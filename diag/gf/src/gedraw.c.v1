/* gedraw.c
 * 
 *	interesting pattern drawing
 */

#include "pcmap.h"
#include "m68000.h"

#include "fbcld.h"
#include "gfdev.h"
#include "../geofdef.h"

extern char line[];	/* command line buffer */
extern short ix;	/* command line index */
extern short interrupts;
extern unsigned short realdrawsetup[];
extern unsigned short realdraw[];
extern unsigned short realdots[];
extern unsigned short realpoly[];
extern short printconfig;
extern short devstatus;

unsigned short *pgearray;

gedraw()
{
    register num;
    char cc;

    cc = line[ix++];
    num = getnum();
    switch (cc) {
	case 'b':	boxes(num);
		break;
	case 'c':	copypix(num);
		break;
	case 'd':	dots(num);
		break;
	case 'p':	passthrus(num);
		break;
	case 'r':	retrace(num);
		break;
	case 'v':	depthvecs(num);
		break;
	case 'D':	depthdots(num);
		break;
	default:	printf("   boxes\n   dots\n   passthru dots\n");
			printf("   vecs depthcued\n   Depthcued dots\n");
			printf("   copypixels (x=<n>)\n   retrace test\n");
    }
}

boxes(num)
    int num;
{
    short i;
    short color=1;
    register unsigned short *pdat;

if (num <=0) num = 1;
while (num-- > 0)
    {
	for (pdat = realdrawsetup; *pdat!=GEOF; ) gesend(*pdat++);
	for (i=0; i<72; i++)
	    {
#ifdef GF2
		gesendlong(0x1080014);
		gesend(1+color);
#else
		gesend(0x2080014);
		gesend(1+color);
		gesend(0xffff);
#endif GF2
		for (pdat = realdraw; *pdat!=GEOF; ) gesend(*pdat++);
		color = 1-color;
		while (GEflags & HIWATER_BIT) ;
	    }
    }
}

dots(num)
    register int num;
{
    register	short	*GEaddr = (short *)&GEdata;
    register unsigned short *pdat;
    register short nwds;
    static short color = 0;
    static short dat = 0;

if (num<=0) num = 1000;
if (interrupts) {
	for (pdat = realdrawsetup; *pdat!=GEOF; ) gesend(*pdat++);
	while (--num >=0) {
#ifdef GF2
		gesendlong(0x1080014);
		gesend((++color%7)+1);
#else
		gesendlong(0x2080014);
		gesend((++color%7)+1);
		gesend(0xffff);
#endif GF2
		for (pdat = realpoly; *pdat != GEOF; ) *GEaddr = *pdat++;
		dat += 16;
		realdots[2] = realdots[4] = dat;
		pdat = realdots;
#ifdef ASMM
		nwds = 36;	/* no. of longs in realdots[] */
		asm(".LL11:	");
		asm("	movl	a4@+,a5@");	/* GEaddr = *pdat++ (long) */
		asm("	dbgt	d6,.LL11");
#endif
		for (nwds = 72; --nwds>=0;) *GEaddr = *pdat++;
	}
}
else printf("do 'ii' instead of 'ir'\n");

}

passthrus(num)		/* do a screenful of dots */
    int num;
{
    register int *GElong = (int *)&GEdata;
    register int x;
    register int y;
    int i;

    if (num==0) num = 1;
    if (interrupts) {
	for (i=0; i<num; i++)
	    for (y=0; y<=800; y+=10)
		for (x=0; x<=1000; x+=10) {
			*GElong = 0x4080012;	/* passthru point */
			*GElong = x<<8;
			*GElong = y<<8;
		}
    }
    else {
	for (i=0; i<num; i++)
	    for (y=0; y<=800; y+=10)
		for (x=0; x<=1000; x+=10) {
			gesendlong(0x4080012);
			gesendlong(x<<8);
			gesendlong(y<<8);
		}
    }
}


gesend(num)
    short num;
{
	if (printconfig) printf(" %x ",num);
	GEdata = num;
	if (!interrupts) while (GEflags & HIWATER_BIT) ;
	return(1);
}

gesendlong(num)
    int num;
{
	if (printconfig) printf(" %x ",num);
	*(int *)&GEdata = num;
	if (!interrupts) while (GEflags & HIWATER_BIT) ;
	return(1);
}


depthvecs(num)
    register num;
{
    register i,j;

    if (num <=0) num = 1023;
    num <<= 8;
	for (i=0; i<0x10000; i+=0x100) {
		gesendlong(0x8080010);
		gesendlong(0);
		gesendlong(i);
		gesendlong(0);
		gesendlong(i);
		gesendlong(0x8080011);
		gesendlong(num);
		gesendlong(i);
		gesendlong(0);
		gesendlong(0);
	}
	for (i=256,j=1023<<8; i<768; i++) {
		gesendlong(0x8080010);
		gesendlong(0);
		gesendlong(i<<8);
		gesendlong(0);
		gesendlong(0xff00);
		gesendlong(0x8080011);
		gesendlong(j);
		gesendlong(i<<8);
		gesendlong(0);
		gesendlong(0);
		j -= 0x200;
	}
}


depthdots(num)
    int num;
{
    register line,pix;

    if (num <=0) num = 1;
    while (num-- > 0) {
	for (line = 767<<8; line > 730<<8; line -=0x100)
		for (pix= 0; pix < 1024<<8; pix+= 0x100) {
			gesendlong(0x8080012);
			gesendlong(pix);
			gesendlong(line);
			gesendlong(0);
			gesendlong(pix);
		}
    }
}

copypix(pix)
   register int pix;
{
    register line;

	for (line = 0; line <0x80; line++) {
		gesendlong(0x508003d);
		gesend(pix+line);	/* xfrom */
		gesend(line);
		gesend(0x100+line);	/* xto */
		gesend(line);
		gesend(pix+(0x100-line));
	}
	gesend(0xff08);
}

retrace(num)
	int num;
{
	register coord = 0x100;
	short save,i;

	save = spl7();
	while (num-- >=0) {
		while (!(FBCflags & VERTINT_BIT)) ;

		FBCdata = coord;
		FBCflags = devstatus | HOSTFLAG;
		gesendlong(0x80008);
		while (FBCflags & INTERRUPT_BIT_) ;
		FBCdata = 0x100 - coord;
		FBCclrint;
	for (i=0; i<100; i++) ;
		FBCflags = devstatus;
		if (coord-- <= 0) coord = 0x100;

		while (FBCflags & VERTINT_BIT) ;
		while (!(FBCflags & VERTINT_BIT)) ;
		while (FBCflags & VERTINT_BIT) ;
	}
	splx(save);
}
