'\"macro stdmacro
.TH PTY 7
.UC 4
.SH NAME
pty \- pseudo terminal driver
.SH DESCRIPTION
The
.I pty
driver provides a device-pair termed a
.IR "pseudo terminal" .
A pseudo terminal is a pair of character devices, a
.I master
device and a
.I slave
device.  The slave device provides processes
an interface identical
to that described in
.IR termio (7).
However, whereas all other devices which provide the 
interface described in
.IR termio (7)
have a hardware device of some sort behind them, the slave
device has, instead, another process manipulating
it through the master half of the pseudo terminal.
That is, anything written on the master device is
given to the slave device as input and anything written
on the slave device is presented as input on the master
device.
.PP
The following 
.I ioctl
calls apply only to pseudo terminals:
.TP
TIOCPKT
Enable/disable 
.I packet
mode.  Packet mode is enabled by specifying (by reference)
a nonzero parameter and disabled by specifying (by reference)
a zero parameter.  When applied to the master side of a pseudo
terminal, each subsequent 
.I read 
from the terminal will return data written on the slave part of
the pseudo terminal preceded by a zero byte (symbolically
defined as TIOCPKT_DATA), or a single byte reflecting control
status information.  In the latter case, the byte is an inclusive-or
of zero or more of the bits:
.RS
.TP
TIOCPKT_FLUSHREAD
whenever the read queue for the terminal is flushed.
.TP
TIOCPKT_FLUSHWRITE
whenever the write queue for the terminal is flushed.
.TP
TIOCPKT_STOP
whenever output to the terminal is stopped a la ^S.
.TP
TIOCPKT_START
whenever output to the terminal is restarted.
.TP
TIOCPKT_DOSTOP
whenever 
.I t_stopc
is ^S
and 
.I t_startc
is ^Q.
.TP
TIOCPKT_NOSTOP
whenever the start and stop characters are not ^S/^Q.
.RE
.IP
This mode is used by
.IR rlogin (1C)
and
.IR rlogind (1M)
to implement a remote-echoed, locally ^S/^Q flow-controlled
remote login with proper back-flushing of output; it can be
used by other similar programs.
.SH ALLOCATION
.PP
The code sequence shown below demonstrates how to allocate
pseudo terminals.  Note that pseudo terminals, like all files,
must have the correct file permissions to be accessible.
.PP
.nf
.ta 4m,+4m,+4m,+4m,+4m,+4m,+4m,+4m,+4m,+4m,+4m,+4m,+4m,+4m
#include <fcntl.h>
#include <sys/types.h>
#include <sys/sysmacros.h>
#include <sys/stat.h>
#include <stdio.h>

extern	int	open(/*char *, int ...*/);
extern	void	close(/*int*/);
extern	int	fstat(/*int, struct stat **/);

/*
 * Find a pseudo tty to use.  Fill in "name" with the name of the tty.
 * Return the open descriptor for the controlling side.  Caller is
 * responsible for opening the slave side, if it wants to.
 */
int
findPseudoTTY(name, ptynum)
	char *name;
	int *ptynum;
{
	int fd;
	struct stat sb;

	fd = open("/dev/ptc", O_RDWR|O_NDELAY);
	if (fd >= 0) {
		if (fstat(fd, &sb) < 0) {
			close(fd);
			return -1;
		}
		*ptynum = minor(sb.st_rdev);
		sprintf(name, "/dev/ttyq%d", *ptynum);
	}
	return fd;
}
.fi
.SH FILES
.DT
/dev/ptc - master pseudo terminal
.br
/dev/ttyq[0-99] - slave pseudo terminals
