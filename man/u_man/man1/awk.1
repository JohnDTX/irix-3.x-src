'\"macro stdmacro
.TH AWK 1
.SH NAME
awk \- pattern scanning and processing language
.SH SYNOPSIS
.B awk
[
.BR \-F c
] [ prog ] [ parameters ] [ files ]
.SH DESCRIPTION
.I Awk\^
scans each input
.I file\^
for lines that match any of a set of patterns specified in
.IR prog .
With each pattern in
.I prog\^
there can be an associated action that will be performed
when a line of a
.I file\^
matches the pattern.
The set of patterns may appear literally as
.IR prog ,
or in a file
specified as
.B \-f
.IR file .
The
.I prog\^
string should be enclosed in single quotes
.RB ( ' )
to protect it from the shell.
.PP
.IR Parameters ,
in the form x=... y=... etc., may be passed to
.IR awk .
.PP
Files are read in order;
if there are no files, the standard input is read.
The file name
.B \-
means the standard input.
Each line is matched against the
pattern portion of every pattern-action statement;
the associated action is performed for each matched pattern.
.PP
An input line is made up of fields separated by white space.
(This default can be changed by using
.SM FS\*S,
see below).
The fields are denoted
.BR $1 ,
.BR $2 ,
\&.\|.\|.\|;
.B $0
refers to the entire line.
.PP
.PP
A pattern-action statement has the form:
.PP
.RS
pattern { action }
.RE
.PP
A missing action means print the line;
a missing pattern always matches.
An action is a sequence of statements.
A statement can be one of the following:
.PP
.RS
.nf
\f3#\f1 comment
\f3if (\f1 conditional \f3)\f1 statement [ \f3else\f1 statement ]
\f3while (\f1 conditional \f3)\f1 statement
\f3for (\f1 expression \f3;\f1 conditional \f3;\f1 expression \f3)\f1 statement
\f3break\f1
\f3continue\f1
\f3{\f1 [ statement ] .\|.\|. \f3}\f1
variable \f3=\f1 expression
\f3print\f1 [ expression-list ] [ \f3>\f1 expression ]
\f3printf\f1 format [ \f3,\f1 expression-list ] [ \f3>\f1 expression ]
\f3next\f1	# skip remaining patterns on this input line
\f3exit\f1	# skip the rest of the input
.fi
.RE
.PP
Statements are terminated by
semicolons, new-lines, or right braces.
An empty expression-list stands for the whole line.
Expressions take on string or numeric values as appropriate,
and are built using the operators
.BR + ,
.BR \- ,
\(** ,
.BR / ,
.BR % ,
and concatenation (indicated by a blank).
The
.B C
operators
.BR ++ ,
.BR \-\^\- ,
.BR += ,
.BR \-= ,
.RB \(** = ,
.BR /= ,
and
.B %=
are also available in expressions.
Variables may be scalars, array elements
(denoted x[i])
or fields.
Variables are initialized to the null string.
Array subscripts may be any string,
not necessarily numeric;
this allows for a form of associative memory.
String constants are quoted (\|"\|).
.PP
The
.I print\^
statement prints its arguments on the standard output
(or on a file if
.BI > expr\^
is present), separated by the current output field separator,
and terminated by the output record separator.
The
.I printf\^
statement formats its expression list according to the format
(see
.IR printf\^ (3S)).
.PP
The built-in function
.I length\^
returns the length of its argument
taken as a string,
or of the whole line if no argument.
There are also built-in functions
.IR exp ,
.IR log ,
.IR sqrt ,
and
.IR int .
The last truncates its argument to an integer;
.I substr(s,m,n)
returns the
.IR n -character
substring of
.I s\^
that begins at position
.IR m .
The function
.I sprintf(fmt,expr,expr,.\|.\|.)
formats the expressions
according to the
.IR printf\^ (3S)
format given by
.I fmt\^
and returns the resulting string.
.PP
Patterns are arbitrary Boolean combinations
(
.BR ! ,
\||\|\^|\|,
.BR && ,
and parentheses) of
regular expressions and
relational expressions.
Regular expressions must be surrounded
by slashes and are as in
.I egrep\^
(see
.IR grep\^ (1)).
Isolated regular expressions
in a pattern apply to the entire line.
Regular expressions may also occur in
relational expressions.
A pattern may consist of two patterns separated by a comma;
in this case, the action is performed for all lines
between an occurrence of the first pattern
and the next occurrence of the second.
.PP
A relational expression is one of the following:
.PP
.RS
expression matchop regular-expression
.br
expression relop expression
.RE
.PP
where a relop is any of the six relational operators in C,
and a matchop is either ~
(for
.IR contains\^ )
or
.BR ! ~
(for
.IR "does not contain\^" ).
A conditional is an arithmetic expression,
a relational expression,
or a Boolean combination
of these.
.PP
The special patterns
.SM BEGIN
and
.SM END
may be used to capture control before the first input line is read
and after the last.
.SM BEGIN
must be the first pattern,
.SM END
the last.
.PP
A single character
.I c\^
may be used to separate the fields by starting
the program with:
.PP
.RS
\s-1BEGIN\s+1 { \s-1FS\s+1 = \f2c\^\fP }
.RE
.PP
or by using the
.BI \-F c\^
option.
.PP
Other variable names with special meanings
include
.SM NF\*S,
the number of fields in the current record;
.SM NR\*S,
the ordinal number of the current record;
.SM FILENAME\*S,
the name of the current input file;
.SM OFS\*S,
the output field separator (default blank);
.SM ORS\*S,
the output record separator (default new-line);
and
.SM OFMT\*S,
the output format for numbers (default
.BR %.6g ).
.SH EXAMPLE
.IP
awk "length > 72" filea
.PP
prints lines longer than 72 characters on the standard
output.
.IP
awk '{ print $2, $1 }' filea
.PP
prints the first two fields of each line in opposite order.
.IP
awk '{ s += $1 } END {print "sum is", s, "average is", s/NR }' filea
.PP
adds up the first column and prints the sum and average.
.IP
awk '{ for (i = NF; i > 0; \-\^\-i) print $1 }' filea
.PP
prints all the fields of each line in reverse order.
The output prints one field per line, beginning at the end
of the file, unless otherwise directed.
.IP
awk "/start/, /stop/" filea
.PP
prints all lines between start/stop pattern pairs,
for every such pair in the file.
.SH SEE ALSO
grep(1), lex(1), sed(1).
.br
.I "Awk\-A Pattern Scanning and Processing Language\^"
by A. V. Aho, B. W. Kernighan, and P. J. Weinberger.
.SH BUGS
Input white space is not preserved on output if fields are involved.
.PP
There are no explicit conversions between numbers and strings.
To force an expression to be treated as a number add 0 to it;
to force it to be treated as a string concatenate the
null string
("\^") to it.
.\"	@(#)awk.1	5.1 of 11/15/83
