'\"macro stdmacro
.TH VI 1 
.SH NAME
vi, view \- screen oriented (visual) display editor based on ex
.SH SYNOPSIS
.B vi
[
.B \-t
tag
] [
.B \-r
] [
\f3+\f1\f2command\f1
] [
\f3\-w\f2n\f1
]
name ...
.br
.B view
[
.B \-t
tag
] [
.B \-r
] [
\f3+\f1\f2command\f1
] [
\f3\-w\f2n\f1
]
name ...
.SH DESCRIPTION
.I Vi\^
(visual) is a display oriented text editor based on
.IR ex\^ (1).
.I Ex\^
and
.I vi\^
run the same code; it is possible to get to
the command mode of
.I ex\^
from within
.I vi\^
and vice-versa.
.PP
.I Vi\^
puts up a screenful of text at a time (unless a smaller window
is specified) and allows rapid and fluid cursor motion to
the place where you want to begin adding, changing, or
deleting text.  With
.IR vi ,
editing can be done on characters, words, lines, or sections at
a time.  When multi-character changes are made, it is necessary
to hit the ESCAPE key to return to cursor motion mode. 
.PP
.I View\^
is an invocation of
.I vi\^
which disallows writing.
.I View\^
is useful for browsing through a file when no 
modifications are intended.
.PP
Using
.I ex\^
commands
and calling up the Shell by typing (!) are done with a colon
(:) and the appropriate command sequence, such as that to
find a string or write the file.
.PP
The
.I "Vi Command Summary\^"
(below),
the
.I "Vi Quick Reference\^"
card and the
.I "Introduction to Display Editing with Vi\|"
provide full details on using
.IR vi .
.PP
The following options are recognized:
.TP "\w'\f3+\f2command\f1\ \ 'u"
.B \-t
Equivalent to an initial
.I tag\^
command, editing the file containing the
.I tag\^
and positioning the editor at its definition.
.TP
.B \-r
Used in recovering after an editor or system crash, retrieving
the last saved version of the named file.  If no file is
specified, a list of saved files will be reported.
.TP
.BI + command
indicates that the editor should begin by executing the
specified command.  If
.I command\^
is omitted, then it defaults to $, positioning
the editor at the last line of the first file initially.
Other useful commands here are scanning patterns of the form
"/pat" or line numbers, e.g., "+100" to start at line 100.
.TP
.B \-w\f2n\f1
sets the default window size to
.IR n ,
and is useful in dialups, to start in small windows.
.PP
.I Name\^
arguments indicate files to be edited.
.SS Vi Command Summary
.nf
.ta \w'word right-limit\ \ \ \ 'u +\w'<line#>G\ \ \ 'u
.PP
\f3Cursor Motion\f1:	Forward	Back
.PP
letter	(space)	^H, h
word right-limit	E,e     
word left-limit	W,w	B,b    
sentence	)	(
paragraph	}	{
section/function	]]	[[
line: same/limit	$	0
\ \ \ 1st charac	+,<ret>	-
\ \ \ same column	^n,LF	^p
\ \ \ specified 	<line#>G	<line#>G   
1/2 screenful	^d	^u  
screenful	^f	^b       
.DT
.PP
\f3Undoing Errors\f1  (see also: change, insert, delete)
.PP
.ta \w'<esc>\ \ \ \ 'u
u	undo last change
U	restore current line
"Np	retrieve Nth last delete
<esc>	abandon incomplete command (without completing it) 
:q!	drastic!  abandon without saving.
.PP
.ta \w'<esc>\ \ \ 'u +\w'before 1st non-blank\ \ \ \ \ 'u +\w'cw<newword>\ \ \ 'u
\f3Insert		Change\f1
.PP
i	before cursor	cw<newword>	change word to newword
I	before 1st non-blank	C	change rest of line
a	after cursor	s	substitute character
A	at end-of-line	S	substitute lines
o	open line below	rx	replace 1 character
O	open line above	R	replace characters
<esc>	terminates insert	xp	transpose character
		<esc>	terminates change
.PP
.ta \w'<esc>\ \ \ 'u +\w'before 1st non-blank\ \ \ \ \ 'u +\w'cw<newword>\ \ \ 'u
\f3Delete		Delete during Insert\f1
.PP
x	character	last charac	^H
X	...before cursor	last word	^W
dw	word	all input this line	@
de	...but leave punctuation
dd	line 
(#)dd	number of lines  
D	rest of line 
.fi
.DT
.SH FILES
See
.IR ex\^ (1).
.SH EXAMPLE
.IP
vi text
.PP
would invoke the editor with the file named "text".  For further
examples, see
.IR "An Introduction to Display Editing with Vi" .
.SH SEE ALSO
ex(1)
.br
.I "Vi Quick Reference\^"
card,
.IR "An Introduction to Display Editing with Vi" .
.SH AUTHOR
William Joy
.br
Mark Horton added macros to \f2visual\^\f1 mode.
.SH BUGS
Software tabs using \f3^T\f1 work only immediately after the
.IR autoindent .
.PP
Left and right shifts on intelligent terminals don't make use of
insert and delete character operations in the terminal.
.PP
The
.I wrapmargin\^
option can be fooled since it looks at output columns when blanks are typed.
If a long word passes through the margin and onto the next line without a 
break, then the line won't be broken.
.PP
Insert/delete within a line can be slow if tabs are present on intelligent
terminals, since the terminals need help in doing this correctly.
.PP
Saving text on deletes in the named buffers is somewhat inefficient.
.PP
The
.I source\^
command does not work when executed as \f3:source\f1;
there is no way to use the \f3:append\f1, \f3:change\f1,
and \f3:insert\f1 commands, since it is not possible to give
more than one line of input to a \f3:\f1 escape.  To use these
on a \f3:global\f1 you must \f3Q\f1 to \f2ex\f1 command mode,
execute them, and then reenter the screen editor with
.I vi\^
or
.IR open .
.\"	@(#)vi.1	5.1 of 11/14/83
