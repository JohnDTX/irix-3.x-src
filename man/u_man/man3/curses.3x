'\"macro stdmacro
.TH CURSES 3X
.SH NAME
curses \- screen functions with ``optimal'' cursor motion
.SH SYNOPSIS
.B cc
[ flags ] files
.B \-lcurses \-ltermcap
[ libraries ]
.br
.B cc
[ flags ] files
.B \-lcurses_p \-ltermcap_p
[ libraries ]
.SH DESCRIPTION
These routines give the user a method of updating screens with reasonable
optimization.  They keep an image of the current screen,
and the user sets up an image of a new one.
Then
.IR refresh ()
tells the routines to make the current screen look like the new one.
.PP
The file
.I "curses.h"
must be included in each module that uses these routines.
In order to initialize the routines, the routine
.IR initscr ()
must be called before any of the other routines that deal with windows and
screens are used.  The routine
.IR endwin ()
should be called before exiting.
.PP
Two of the routines, defined as macros, have the same name as routines
in the Silicon Graphics graphics library.  Those users who use both
curses and the graphics library in the same program should define the
preprocessor symbol
.B IRISCURSES
prior to including
.I curses.h
in each module and use
.IR Move ()
and
.IR Clear ()
instead of the curses routines
.IR move ()
and
.IR clear ().
.PP
The second form may be used for profiling.
.SH SEE ALSO
.I "Screen Updating and Cursor Movement Optimization: A Library Package,"
Ken Arnold,
.br
ioctl(2),
getenv(3C),
termcap(4)
.SH AUTHOR
Ken Arnold
.SH FUNCTIONS
.nf
.ds w \f2win\f1
.ds s \f2stdscr\f1
.ta 2.75i
\s-1addch(ch)	add a character to \*s
addstr(str)	add a string to \*s
box(win,vert,hor)	draw a box around a window
crmode()	set cbreak mode
clear()	clear \*s
clearok(scr,boolf)	set clear flag for \f2scr\f1
clrtobot()	clear to bottom on \*s
clrtoeol()	clear to end of line on \*s
delch()	delete a character
deleteln()	delete a line
delwin(win)	delete \*w
echo()	set echo mode
endwin()	end window modes
erase()	erase \*s
getch()	get a char through \*s
getcap(name)	get terminal capability \f2name\f1
getstr(str)	get a string through \*s
gettmode()	get tty modes
getyx(win,y,x)	get (y,x) co-ordinates
inch()	get char at current (y,x) co-ordinates
initscr()	initialize screens
insch(c)	insert a char
insertln()	insert a line
leaveok(win,boolf)	set leave flag for \*w
longname(termbuf,name)	get long name from \f2termbuf\f1
move(y,x)	move to (y,x) on \*s
mvaddch(y,x,ch)	move to (y,x) and do addch(ch)
mvaddstr(y,x,str)	move to (y,x) and do addstr(str)
mvcur(lasty,lastx,newy,newx)	actually move cursor
mvdelch(y,x)	move to (y,x) and do delch()
mvgetch(y,x)	move to (y,x) and do getch()
mvgetstr(y,x,str)	move to (y,x) and do getstr(str)
mvinch(y,x)	move to (y,x) and do inch()
mvinsch(y,x,c)	move to (y,x) and do insch(c)
mvwaddch(win,y,x,ch)	move to (y,x) and do waddch(win,ch)
mvwaddstr(win,y,x,str)	move to (y,x) and do waddstr(win,str)
mvwdelch(win,y,x)	move to (y,x) and do wdelch(win)
mvwgetch(win,y,x)	move to (y,x) and do wgetch(win)
mvwgetstr(win,y,x,str)	move to (y,x) and do wgetstr(win,str)
mvwinch(win,y,x)	move to (y,x) and do winch(win)
mvwinsch(win,y,x,c)	move to (y,x) and do winsch(win,c)
newwin(lines,cols,begin_y,begin_x)\ 	create a new window
nl()	set newline mapping
nocrmode()	unset cbreak mode
noecho()	unset echo mode
nonl()	unset newline mapping
noraw()	unset raw mode
overlay(win1,win2)	overlay win1 on win2
overwrite(win1,win2)	overwrite win1 on top of win2
printw(fmt,arg1,arg2,...)	printf on \*s
raw()	set raw mode
refresh()	make current screen look like \*s
resetty()	reset tty flags to stored value
savetty()	stored current tty flags
scanw(fmt,arg1,arg2,...)	scanf through \*s
scroll(win)	scroll \*w one line
scrollok(win,boolf)	set scroll flag
setterm(name)	set term variables for name
standend()	end standout mode
standout()	start standout mode
subwin(win,lines,cols,begin_y,begin_x)\ 	create a subwindow
touchwin(win)	\*(lqchange\*(rq all of \*w
unctrl(ch)	printable version of \f2ch\f1
waddch(win,ch)	add char to \*w
waddstr(win,str)	add string to \*w
wclear(win)	clear \*w
wclrtobot(win)	clear to bottom of \*w
wclrtoeol(win)	clear to end of line on \*w
wdelch(win,c)	delete char from \*w
wdeleteln(win)	delete line from \*w
werase(win)	erase \*w
wgetch(win)	get a char through \*w
wgetstr(win,str)	get a string through \*w
winch(win)	get char at current (y,x) in \*w
winsch(win,c)	insert char into \*w
winsertln(win)	insert line into \*w
wmove(win,y,x)	set current (y,x) co-ordinates on \*w
wprintw(win,fmt,arg1,arg2,...)\ 	printf on \*w
wrefresh(win)	make screen look like \*w
wscanw(win,fmt,arg1,arg2,...)\ 	scanf through \*w
wstandend(win)	end standout mode on \*w
wstandout(win)	start standout mode on \*w\s+1
.\" @(#)$Header: /d2/3.7/src/man/u_man/man3/RCS/curses.3x,v 1.1 89/03/27 16:58:09 root Exp $
.\" $Log:	curses.3x,v $
Revision 1.1  89/03/27  16:58:09  root
Initial check-in for 3.7

.\" Revision 1.9  86/10/03  16:54:11  oz
.\" *** empty log message ***
.\" 
.\" Revision 1.8  86/10/03  16:52:36  oz
.\" *** empty log message ***
.\" 
.\" Revision 1.7  86/04/15  15:40:30  celia
.\" fixed ref.
.\" 
.\" Revision 1.6  86/04/15  08:26:29  celia
.\" fixed ref.
.\" 
.\" Revision 1.5  85/05/03  10:38:01  robinf
.\" Updates from 2000 Series Workstation Guide
.\" 
.\" Revision 1.1  85/05/03  10:37:06  robinf
.\" Updates from 2000 Series Workstation Guide

.\" Revision 1.4  85/03/15  19:30:18  bob
.\" Documented mv* macros (SCR 478).
.\" 
.\" Revision 1.3  85/01/08  11:27:32  bob
.\" Changed \f[RIB] to \f[123].
.\" 
.\" Revision 1.2  84/11/27  13:16:32  bob
.\" Fixed typo.
.\" 
