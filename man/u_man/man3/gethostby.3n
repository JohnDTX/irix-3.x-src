'\"macro stdmacro
.\" Copyright (c) 1983 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
.\"
.\"	@(#)gethostbyname.3n	6.6 (Berkeley) 5/20/86
.\"
.TH GETHOSTBYNAME 3N 
.UC 5
.SH NAME
gethostbyname, gethostbyaddr, gethostent, sethostent, endhostent \- get network host entry
.SH SYNOPSIS
.B "#include <netdb.h>
.PP
.B "extern int h_errno;
.PP
.B "struct hostent *gethostbyname(name)
.br
.B "char *name;
.PP
.B "struct hostent *gethostbyaddr(addr, len, type)
.br
.B "char *addr; int len, type;
.PP
.B "struct hostent *gethostent()
.PP
.B "sethostent(stayopen)
.br
.B "int stayopen;
.PP
.B "endhostent()
.PP
.SH DESCRIPTION
.I Gethostbyname
and
.I gethostbyaddr
each return a pointer to an object with the
following structure.
This structure contains either the information obtained from the name server
or broken-out fields from a line in 
.IR /etc/hosts .
If the local name server is not running these routines do a lookup in
.IR /etc/hosts .
.RS
.PP
.nf
struct	hostent {
	char	*h_name;	/* official name of host */
	char	**h_aliases;	/* alias list */
	int	h_addrtype;	/* host address type */
	int	h_length;	/* length of address */
	char	**h_addr_list;	/* list of addresses from name server */
};
#define	h_addr  h_addr_list[0]	/* address, for backward compatibility */
.ft R
.ad
.fi
.RE
.PP
The members of this structure are:
.TP \w'h_addr_list'u+2n
h_name
Official name of the host.
.TP \w'h_addr_list'u+2n
h_aliases
A zero terminated array of alternate names for the host.
.TP \w'h_addr_list'u+2n
h_addrtype
The type of address being returned; currently always AF_INET.
.TP \w'h_addr_list'u+2n
h_length
The length, in bytes, of the address.
.TP \w'h_addr_list'u+2n
h_addr_list
A zero terminated array of network addresses for the host.
Host addresses are returned in network byte order.
.TP \w'h_addr_list'u+2n
h_addr
The first address in h_addr_list; this is for backward compatiblity.
.PP
.I Sethostent
allows a request for the use of a connected socket using TCP for queries.
If the
.I stayopen
flag is non-zero,
this sets the option to send all queries to the name server using TCP
and to retain the connection after each call to 
.I gethostbyname
or
.IR gethostbyaddr .
.PP
.I Endhostent
closes the TCP connection.
.SH DIAGNOSTICS
.PP
Error return status from 
.I gethostbyname
and
.I gethostbyaddr
is indicated by return of a null pointer.
The external integer
.IR h_errno
may then be checked to see whether this is a temporary failure
or an invalid or unknown host.
.PP
.IR h_errno
can have the following values:
.RS
.IP HOST_NOT_FOUND \w'HOST_NOT_FOUND'u+2n
No such host is known.
.IP TRY_AGAIN \w'HOST_NOT_FOUND'u+2n
This is usually a temporary error
and means that the local server did not receive
a response from an authoritative server.
A retry at some later time may succeed.
.IP NO_RECOVERY \w'HOST_NOT_FOUND'u+2n
This is a non-recoverable error.
.IP NO_ADDRESS \w'HOST_NOT_FOUND'u+2n
The requested name is valid but does not have an IP address; 
this is not a temporary error.  
This means another type
of request to the name server will result in an answer.
.RE
.SH FILES
/etc/hosts
.SH "SEE ALSO"
hosts(4)
.SH CAVEAT
.PP
.I Gethostent
is defined, and
.I sethostent
and
.I endhostent
are redefined,
when
.IR libc
is built to use only the routines to lookup in
.IR /etc/hosts 
and not the name server.
.PP
.I Gethostent
reads the next line of
.IR /etc/hosts ,
opening the file if necessary.
.PP
.I Sethostent 
is redefined to open and rewind the file.  If the
.I stayopen
argument is non-zero,
the hosts data base will not be closed after each call to
.I gethostbyname
or
.IR gethostbyaddr .
.I Endhostent
is redefined to close the file.
.SH BUGS
All information
is contained in a static area
so it must be copied if it is
to be saved.  Only the Internet
address format is currently understood.
.SH NOTE
There are two versions of the primitives
documented in this manual entry:  a vanilla
version and a Yellow Pages version.
The programmatic interface of both versions
is identical.
The vanilla version gets its information from an ASCII
file in
.IR /etc .
The Yellow Pages version knows about
Sun's Yellow Pages distributed
lookup service.
If you want the Yellow Pages version, link
the program according to the instructions
for (3Y) primitives as described in
.IR intro (3).
Refer to
.IR ypserv (1M)
and the
.I NFS User's Guide
for more information about the Yellow Pages.
