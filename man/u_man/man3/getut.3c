'\"macro stdmacro
.TH GETUT 3C
.SH NAME
getut: getutent, getutid, getutline, pututline, setutent, endutent, utmpname \- access utmp file entry
.SH SYNOPSIS
.nf
.B #include <utmp.h>
.PP
.B struct utmp \(**getutent ( )
.PP
.B struct utmp \(**getutid (id)
.B struct utmp \(**id;
.PP
.B struct utmp \(**getutline (line)
.B struct utmp \(**line;
.PP
.B struct utmp \(**pututline (utmp)
.B struct utmp \(**utmp;
.PP
.B void setutent ( )
.PP
.B void endutent ( )
.PP
.B int utmpname (file)
.B char \(**file;
.fi
.SH DESCRIPTION
.IR Getutent ,
.I getutid\^
and
.I getutline\^
each return a pointer to a structure of the following type:
.PP
.RS .3i
.nf
.tr ~ 
.ta \w'struct\ 'u +\w'~~~short\ \ 'u +\w'~~~e_termination;\ \ 'u
struct	utmp {
	char	ut_user[8];	/\(** User login name \(**/
	char	ut_id[4];	/\(** /etc/inittab id (usually line #) \(**/
	char	ut_line[12];	/\(** device name (console, lnxx) \(**/
	short	ut_pid;	/\(** process id \(**/
	short	ut_type;	/\(** type of entry \(**/
	struct	exit_status {
	~~~short	~~~e_termination;	/\(** Process termination status \(**/
	~~~short	~~~e_exit;	/\(** Process exit status \(**/
	} ut_exit;		/\(** The exit status of a process
			 \&\(** marked as \s-1DEAD_PROCESS\s+1. \(**/
	time_t	ut_time;	/\(** time entry was made \(**/
};
.tr ~~
.fi
.RE
.DT
.PP
.I Getutent\^
reads in the next entry from a
.IR utmp -like
file.  If the file is not already open, it opens it.  If
it reaches the end of the file, it fails.
.PP
.I Getutid\^
searches forward from the current point in the
.I utmp\^
file until it
finds an entry with a
.I ut_type\^
matching
.I id\->ut_type\^
if the type specified is
.SM RUN_LVL\*S,
.SM BOOT_TIME\*S,
.SM OLD_TIME
or
.SM NEW_TIME\*S.
If the type specified in
.I id\^
is
.SM INIT_PROCESS\*S,
.SM LOGIN_PROCESS\*S,
.SM USER_PROCESS
or
.SM DEAD_PROCESS\*S,
then
.I getutid\^
will return a pointer to the first entry whose type is one of these
four and whose
.I ut_id\^
field matches
.IR id\->ut_id .
If the
end of file is reached without a match, it fails.
.PP
.I Getutline\^
searches forward from the current point in the
.I utmp\^
file until it
finds an entry of the type
.SM
LOGIN_PROCESS
or
.SM
USER_PROCESS
which also has a
.I ut_line\^
string matching the
.I line\->ut_line\^
string.  If the end of file is reached without a match, it fails.
.PP
.I Pututline\^
writes out the supplied
.I utmp\^
structure into the
.I utmp\^
file.  It uses
.I getutid\^
to search forward for the proper place if it finds that it is
not already at the proper place.  It is expected that normally
the user of
.I pututline\^
will have searched for the proper entry using one of the
.I getut\^
routines.  If so,
.I pututline\^
will not search.  If
.I pututline\^
does not find a matching slot for the new entry, it will add
a new entry to the end of the file.
.PP
.I Setutent\^
resets the input stream to the beginning of the file.  This should
be done before each search for a new entry if it is desired that
the entire file be examined.
.PP
.I Endutent\^
closes the currently open file.
.PP
.I Utmpname\^
allows the user to change the name of the file examined, from
.B /etc/utmp
to any other file.  It is most often expected that this other
file will be
.BR /etc/wtmp .
If the file doesn't exist, this will not be apparent until the
first attempt to reference the file is made.
.I Utmpname\^
does not open the file.  It just closes the old file if it is
currently open and saves the new file name.
.I Utmpname\^
returns false if the supplied file name is too long to store in its
internal buffer (of about 78 characters) and returns true otherwise.
.SH FILES
/etc/utmp
.br
/etc/wtmp
.SH SEE ALSO
ttyslot(3C), utmp(4).
.SH DIAGNOSTICS
A
.SM
.B NULL
pointer is returned upon failure to read, whether for permissions
or having reached the end of file, or upon failure to write.
.SH COMMENTS
The most current entry is saved in a static structure.  Multiple
accesses require that it be copied before further accesses are made.
Each call to either
.I getutid\^
or
.I getutline\^
sees the routine examine the static structure before
performing more \s-1I/O\s+1.  If the contents of the static structure match
what it is searching for, it looks no further.  For this reason
to use
.I getutline\^
to search for multiple occurrences, it would be necessary to zero
out the static after each success, or
.I getutline\^
would just return the same pointer over and over again.
There is one exception to the rule about removing the structure
before further reads are done.  The implicit read done by
.I pututline\^
if it finds that it isn't already at the correct place in
the file will not hurt the contents of the static structure
returned by the
.IR getutent ,
.I getutid\^
or
.I getutline\^
routines, if the user has just modified those contents and
passed the pointer back to
.IR pututline .
.PP
These routines use buffered standard \s-1I/O\s+1 for input, but
.I pututline\^
uses an unbuffered non-standard write to avoid race conditions
between processes trying to modify the
.I utmp\^
and
.I wtmp\^
files.
.\"	@(#)getut.3c	5.1 of 10/24/83
.\"	$Source: /d2/3.7/src/man/u_man/man3/RCS/getut.3c,v $
.\"	@(#)$Revision: 1.1 $
.\"	$Date: 89/03/27 16:59:45 $
