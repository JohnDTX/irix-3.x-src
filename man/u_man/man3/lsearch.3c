'\"macro stdmacro
.TH LSEARCH 3C 
.SH NAME
lsearch \- linear search and update
.SH SYNOPSIS
.B "char \(**lsearch ((char \(**)key, (char \(**)base, nelp, width, compar)"
.br
.B unsigned \(**nelp, width;
.br
.B int (\(**compar)( );
.SH DESCRIPTION
.I Lsearch\^
is a linear search routine generalized from Knuth (6.1) Algorithm S.
It returns a pointer into a table indicating where
a datum may be found.
If the datum does not occur, it is added
at the end of the table.
.I Key\^
points to the datum to be sought in the table.
.I Base\^
points to the first element in the table.
.I Nelp\^
points to an integer containing the current number of 
elements in the table.
The integer is incremented if the datum is added to the table.
.I Width\^
is the width of an element in bytes;
.I "sizeof (*key)\^"
should be used.
.I Compar\^
is the name of the comparison function which the user must supply
.RI ( strcmp ,
for example).
It is called with two arguments that point
to the elements being compared.
The function must return zero if the elements are equal and non-zero otherwise.
.SH NOTES
The pointers to the key and the element at the base of the table should be
of type pointer-to-element,
and cast to type pointer-to-character.
.br
The comparison function need not compare every byte,
so arbitrary data may be contained in the elements in addition to the values
being compared.
.br
Although declared as type pointer-to-character,
the value returned should be cast into type pointer-to-element.
.SH "SEE ALSO"
bsearch(3C), hsearch(3C), tsearch(3C)
.br
.IR "The Art of Computer Programming" ,
.I "Volume 1, Sorting and Searching\^"
by Donald Knuth.
.SH BUGS
Undefined results can occur if there is not enough room in the table to
add a new item.
.\"	@(#)lsearch.3c	5.1 of 10/25/83
