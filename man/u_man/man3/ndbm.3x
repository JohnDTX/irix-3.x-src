'\"macro stdmacro
.TH NDBM 3X  
.SH NAME
ndbm: dbm_open, dbm_close, dbm_fetch, dbm_store, dbm_delete, dbm_firstkey, dbm_nextkey, dbm_error, dbm_clearerr \- data base subroutines
.SH SYNOPSIS
.nf
.PP
.B #include <bsd/ndbm.h>
.PP
.B DBM *dbm_open(file, flags, mode)
.B char *file;
.B int flags, mode;
.PP
.B void dbm_close(db)
.B DBM *db;
.PP
.B datum dbm_fetch(db, key)
.B DBM *db;
.B datum key;
.PP
.B int dbm_store(db, key, content, flags)
.B DBM *db;
.B datum key, content;
.B int flags;
.PP
.B int dbm_delete(db, key)
.B DBM *db;
.B datum key;
.PP
.B datum dbm_firstkey(db)
.B DBM *db;
.PP
.B datum dbm_nextkey(db)
.B DBM *db;
.PP
.B int dbm_error(db)
.B DBM *db;
.PP
.B int dbm_clearerr(db)
.B DBM *db;
.SH DESCRIPTION
These functions maintain key/content pairs in a data base.
The functions will handle very large (a billion blocks)
databases and will access a keyed item in one or two file system accesses.
This package replaces the earlier
.IR dbm (3X)
library, which managed only a single database.
To link with these routines, use the loader option
.BR \-ldbm .
.PP
.IR Key s
and
.IR content s
are described by the
.I datum
typedef (see
.IR <bsd/ndbm.h> ).
A
.I datum
specifies a string of
.I dsize
bytes pointed to by
.I dptr.
Arbitrary binary data, as well as normal ASCII strings, are allowed.
The data base is stored in two files.
One file is a directory containing a bit map and has `.dir' as its suffix.
The second file contains all data and has `.pag' as its suffix.
.PP
Before a database can be accessed, it must be opened by
.IR dbm_open .
This will open and/or create the files
.IB file .dir
and
.IB file .pag
depending on the flags parameter (see
.IR open (2)).
.PP
Once open, the data stored under a key is accessed by
.I dbm_fetch
and data is placed under a key by
.IR dbm_store .
The
.I flags
field can be either
.B DBM_INSERT
or
.BR DBM_REPLACE .
.B DBM_INSERT
will only insert new entries into the database and will not
change an existing entry with the same key.
.B DBM_REPLACE
will replace an existing entry if it has the same key.
A key (and its associated contents) is deleted by
.IR dbm_delete .
A linear pass through all keys in a database may be made,
in an (apparently) random order, by use of
.I dbm_firstkey
and
.IR dbm_nextkey .
.I Dbm_firstkey
will return the first key in the database.
.I Dbm_nextkey
will return the next key in the database.
This code will traverse the data base:
.IP
.B for
(key = dbm_firstkey(db); key.dptr != NULL; key = dbm_nextkey(db))
.PP
.I Dbm_error
returns non-zero when an error has occurred reading or writing the database.
.I Dbm_clearerr
resets the error condition on the named database.
.SH DIAGNOSTICS
All functions that return an
.I int
indicate errors with negative values.  A zero return indicates ok.
Routines that return a
.I datum
indicate errors with a null (0)
.I dptr.
If
.IR dbm_store
called with a
.I flags
value of
.B DBM_INSERT
finds an existing entry with the same key
it returns 1.
.SH FILES
/usr/lib/libdbm.a	library containing the
.IR ndbm\^
functions
.SH BUGS
The `.pag' file will contain holes so that its apparent size is about
four times its actual content.  Older UNIX systems may create real
file blocks for these holes when touched.  These files cannot be copied
by normal means
.RI ( cp , 
.IR cat , 
.IR tar , 
.IR ar ) 
without filling in the holes.
.PP
.I Dptr
pointers returned by these subroutines point into static storage
that is changed by subsequent calls.
.PP
The sum of the sizes of a key/content pair must not exceed
the internal block size (currently 4096 bytes).
Moreover all key/content pairs that hash together must fit on a single block.
.I Dbm_store
will return an error in the event that a disk block fills with inseparable data.
.PP
.I Dbm_delete
does not physically reclaim file space,
although it does make it available for reuse.
.PP
The order of keys presented by
.I dbm_firstkey
and
.I dbm_nextkey
depends on a hashing function, not on anything interesting.
.SH SEE ALSO
dbm(3X)
