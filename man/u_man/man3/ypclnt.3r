'\"macro stdmacro
.TH YPCLNT 3R
.SH NAME
ypclnt: yp_bind, yp_unbind, yp_get_default_domain, yp_match, yp_first, yp_next, yp_all, yp_order, yp_master, yperr_string, ypprot_err \- yellow pages client interface
.SH SYNOPSIS
.nf
.B #include <rpcsvc/ypclnt.h>
.PP
.B yp_bind(indomain);
.B char *indomain;
.PP
.B void yp_unbind(indomain)
.B char *indomain;
.PP
.B yp_get_default_domain(outdomain);
.B char **outdomain;
.PP
.B yp_match(indomain, inmap, inkey, inkeylen, outval, outvallen)
.B char *indomain, *inmap, *inkey, **outval;
.B int inkeylen, *outvallen;
.PP
.B yp_first(indomain, inmap, outkey, outkeylen, outval, outvallen)
.B char *indomain, *inmap, **outkey, **outval;
.B int *outkeylen, *outvallen;
.PP
.B yp_next(indomain, inmap, inkey, inkeylen, outkey, outkeylen, outval, outvallen);
.B char *indomain, *inmap, *inkey, **outkey, **outval;
.B int inkeylen, *outkeylen, *outvallen;
.PP
.B yp_all(indomain, inmap, incallback);
.B char *indomain, *inmap;
.B struct ypall_callback incallback;
.PP
.B yp_order(indomain, inmap, outorder);
.B char *indomain, *inmap;
.B int *outorder;
.PP
.B yp_master(indomain, inmap, outname);
.B char *indomain, *inmap, **outname;
.PP
.B char *yperr_string(incode)
.B int incode;
.PP
.B ypprot_err(incode)
.B unsigned int incode;
.fi
.SH DESCRIPTION
This package of functions provides an interface to the 
Yellow Pages (YP) network lookup service.
Refer to \f2ypfiles\f1(4) and \f2ypserv\f1(1M) for an overview of the yellow
pages, including
the definitions of 
.I map
and 
.I domain ,
and a description of the various servers, databases, 
and commands that comprise the YP.
.LP
All input parameters names begin with 
.BR in . 
Output parameters begin with 
.BR out .  
Output parameters of type
.I "char **"
should be addresses of uninitialized character pointers.  Memory is
allocated by the YP client package using
.IR malloc (3C),
and may be freed if the user code has no continuing need for it.  
For each
.I outkey 
and
.IR outval ,
two extra bytes of memory are allocated at the end that contain
NEWLINE and NULL, respectively,
but these two bytes are not reflected in
.IR outkeylen 
or
.I outvallen .
.I indomain
and 
.I inmap
strings must be non-null and null-terminated.  String
parameters which are accompanied by a count parameter may not be null, but
may point to null strings, with the count parameter indicating this.
Counted strings need not be null-terminated.
.LP
All functions in this package of type \f3int\fP
return 0 if they succeed, and a failure code
.RI (YPERR_ xxxx )
otherwise.  Failure codes are described under
.B DIAGNOSTICS 
below.
.LP
The YP lookup calls require a map name and a domain name, at minimum.  
It is assumed that the client process knows the name of the map of 
interest.  Client processes 
should fetch the node's default domain by calling 
.I yp_get_default_domain() ,
and use the returned
.I outdomain 
as the
.I indomain 
parameter to successive YP calls.
.LP
To use the YP services, the client process must be ``bound'' to a YP 
server that serves the appropriate domain using
.IR yp_bind .
Binding need not be done explicitly by user code; this 
is done automatically whenever a YP lookup function is called.
.I yp_bind
can be called directly for processes 
that make use of a backup strategy (e.g., a local file) in cases when
YP services are not available.
.LP
Each binding allocates (uses up) one client process socket descriptor;
each bound domain costs one socket descriptor.  However, multiple 
requests to the same domain use that same descriptor.
.I yp_unbind()
is available at the client interface for processes that 
explicitly manage their socket descriptors while accessing 
multiple domains.  The call to 
.I yp_unbind()
make the domain 
.IR unbound , 
and free all per-process and per-node resources used to bind it.
.LP
If an RPC failure results upon use of a binding, that domain will be
unbound automatically.  At that point, the ypclnt layer will retry 
forever or until the operation succeeds, provided that 
.I ypbind
is running, and either
.IP a) 
the client process can't bind a server for the proper domain, or
.IP b) 
RPC requests to the server fail.  
.LP
If an error is not RPC-related, or if
.I ypbind
is not running, or if a bound
.I ypserv
process returns any answer (success or failure), the ypclnt layer will
return control to the user code, either with an error code, or a
success code and any results.
.LP
.I yp_match
returns the value associated with a passed key.  This key 
must be exact; no pattern matching is available.
.LP
.I yp_first
returns the first key-value pair from the named map in the named domain.
.LP
.I yp_next()
returns the next key-value pair in a named map.  The 
.I inkey 
parameter should be the
.I outkey
returned from an initial call to 
.I yp_first()
(to get the second key-value pair) or the one returned from the nth call to 
.I yp_next()
(to get the nth + second key-value pair).
.LP
The concept of 
.I first 
(and, for that matter, of 
.I next) 
is particular to the
structure of the YP map being processed; there is no relation in
retrieval order to either the lexical order within any original (non-YP)
data base, or to any obvious numerical sorting order on the keys, 
values, or key-value pairs.  The only ordering guarantee made is 
that if the 
.I yp_first()
function is called on a particular map, and then the
.I yp_next()
function is repeatedly called on the same map at the same server 
until the call fails with a reason of 
YPERR_NOMORE, 
every entry in the data base will be seen exactly once.  
Further, if the same sequence of operations is performed on the same 
map at the same server, the entries will be seen in the same order.  
.LP
Under conditions of heavy server load or server failure, it
is possible for the domain to become unbound, then bound
once again (perhaps to a different server) while a client is running.  
This can cause a break in one of the enumeration rules;
specific entries may be seen twice by the client, or not at all.
This approach protects the client from error messages that would
otherwise be returned in the midst of the enumeration.
The next paragraph describes a better solution to enumerating all 
entries in a map.
.LP
.I yp_all
provides a way to transfer an entire map
from server to client in a single request using TCP 
(rather than UDP as with other functions in this package).
The entire transaction take place as a single RPC request and
response.
You can use 
.I yp_all
just like any other YP procedure, 
identify the map in the normal manner, and supply the name of a
function which will be called to process each key-value pair 
within the map.  You return from the call to
.I yp_all
only when the transaction is completed 
(successfully or unsuccessfully), or your 
.I ``foreach''
function decides that it doesn't want to see any more key-value pairs.
.LP
The third parameter to
.I yp_all
is 
.br
.nf
	struct ypall_callback *incallback {
		int (*foreach)();
		char *data;
	};
.fi
.LP
The function
.I foreach
is called 
.br
.sp
.nf
	\f3foreach(instatus, inkey, inkeylen, inval, invallen, indata);
	int instatus, inkeylen, invalllen;
	char *inkey, *inval, *indata;\fP
.fi
.br
.LP
The
.I instatus
parameter will hold one of the return status values defined in 
\f2<rpcsvc/yp_prot.h>\fP \(em either \f2YP_TRUE\fP or an error code.  (See 
.I ypprot_err ,
below, for a function which converts a YP protocol error code to a ypclnt 
layer error code.)
.LP
The key and value parameters are somewhat different than defined in the 
synopsis section above.  First, the memory pointed to by the 
.I inkey
and 
.I inval
parameters is private to the 
.I yp_all
function, and is overwritten with the arrival of each new key-value pair.
It is the responsibility of the 
.I foreach 
function to do something useful with the contents of that memory, but it
does not own the memory itself.  Key and value objects 
presented to the
.I foreach 
function look exactly as they do in the server's map \(em if they
were not newline-terminated or null-terminated in the map, they won't be
here either.
.LP
The
.I indata
parameter is the contents of the 
.I incallback\->data
element passed to
.I yp_all .
The
.I data
element of the callback structure may be used to share state information
between the 
.I foreach
function and the mainline code.  Its use is optional, 
and no part of the YP client package inspects its contents \(em 
cast it to something useful, or ignore it as you see fit.
.LP
The 
.I foreach
function is a Boolean.  It should return zero to indicate that it wants to
be called again for further received key-value pairs, or non-zero to stop
the flow of key-value pairs.  If
.I foreach
returns a non-zero value, it is not called again; the functional
value of
.I yp_all
is then 0.
.LP
.I yp_order
returns the order number for a map.
.LP
.I yp_master
returns the machine name of the master YP server for a map.
.LP
.I yperr_string
returns a pointer to an error message string that is null-terminated but 
contains no period or newline.
.LP
.I ypprot_err
takes a YP protocol error code as input, and returns a ypclnt layer error
code, which may be used in turn as an input to 
.IR yperr_string .
.SH FILES
/usr/include/rpcsvc/ypclnt.h
.br
/usr/include/rpcsvc/yp_prot.h
.SH "SEE ALSO"
ypfiles(4), ypserv(1M). 
.SH DIAGNOSTICS
All integer functions return 0 if the requested operation is successful,
or one of the following errors if the operation fails.
.IP
.ta \w'#define\0'u +\w'YPERR_BADARGS\0\0'u +\w'1\0\0'u
.nf
#define YPERR_BADARGS	1	/* args to function are bad */
#define YPERR_RPC	2	/* RPC failure - domain has been unbound */
#define YPERR_DOMAIN	3	/* can't bind to server on this domain */
#define YPERR_MAP	4	/* no such map in server's domain */
#define YPERR_KEY	5	/* no such key in map */
#define YPERR_YPERR	6	/* internal yp server or client error */
#define YPERR_RESRC	7	/* resource allocation failure */
#define YPERR_NOMORE	8	/* no more records in map database */
#define YPERR_PMAP	9	/* can't communicate with portmapper */
#define YPERR_YPBIND	10	/* can't communicate with ypbind */
#define YPERR_YPSERV	11	/* can't communicate with ypserv */
#define YPERR_NODOM	12	/* local domain name not set */
.fi
