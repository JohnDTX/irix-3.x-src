'\"macro stdmacro
.\"	@(#)varargs.5	6.3 (Berkeley) 5/15/86
.TH VARARGS 5
.AT 3
.SH NAME
varargs \- variable argument list
.SH SYNOPSIS
.B "#include <varargs.h>"
.PP
.I function\c
.RB ( va_alist )
.br
.B va_dcl
.br
.B va_list
.IR pvar ;
.br
.B va_start\c
.RI ( pvar );
.br
f =
.B va_arg\c
.RI ( pvar ,
.IR type );
.br
.B va_end\c
.RI ( pvar );
.SH DESCRIPTION
This set of macros provides a means of writing portable procedures that
accept variable argument lists.
Routines having variable argument lists (such as
.IR printf (3S))
that do not use varargs are inherently nonportable, since different
machines use different argument passing conventions.
.PP
.B va_alist
is used in a function header to declare a variable argument list.
.PP
.B va_dcl
is a declaration for
.BR va_alist .
Note that there is no semicolon after
.B va_dcl.
.PP
.B va_list
is a type which can be used for the variable
.IR pvar ,
which is used to traverse the list.
One such variable must always be declared.
.PP
.B va_start\c
.RI (pvar)
is called to initialize
.I pvar
to the beginning of the list.
.PP
.B va_arg\c
.RI ( pvar ,
.IR type )
will return the next argument in the list pointed to by
.IR pvar .
.I Type
is the type to which the expected argument will be converted
when passed as an argument.
Arguments that are
.B char
or
.B short
should be accessed as
.BR int ;
.B "unsigned char
or
.B "unsigned short
should be accessed
.BR "unsigned int" .
.B float
and 
.B double
arguments should be accessed as
.BR double ,
and 
.B "long float"
arguments as
.BR "long float" .
Different types can be mixed, but it is up
to the routine to know what type of argument is
expected, since it cannot be determined at runtime.
.PP
.B va_end\c
.RI ( pvar )
is used to finish up.
.PP
Multiple traversals, each bracketed by
.B va_start
\&...
.B va_end,
are possible.
.SH EXAMPLE
.nf
	\f3#include\fP <varargs.h>
	execl(\f3va_alist\fP)
	\f3va_dcl\fP
	{
		\f3va_list\fP ap;
		\f3char\fP *file;
		\f3char\fP *args[100];
		\f3int\fP argno = 0;

		\f3va_start\fP(ap);
		file = \f3va_arg(ap, \f3char\fP *);
		\f3while\fP (args[argno++] = \f3va_arg\fP(ap, \f3char\fP *))
			\f3;\fP
		\f3va_end\fP(ap);
		\f3return\fP execv(file, args);
	}
.fi
.SH BUGS
It is up to the calling routine to determine how many arguments
there are, since it is not possible to determine this from the
stack frame.  For example,
.I execl
passes a 0 to signal the end of the list.
.I Printf
can tell how many arguments are supposed to be there by the format.
.PP
The macros
.I va_start
and
.I va_end
may be arbitrarily complex;
for example,
.I va_start
might contain an opening brace,
which is closed by a matching brace in
.IR va_end .
Thus, they should only be used where they could
be placed within a single complex statement.
