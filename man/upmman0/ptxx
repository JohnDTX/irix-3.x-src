.xx "" "" "@: arithmetic on shell variables." "" csh(1)
.xx "" "sii: Interphase Storager" "2 esdi/st-506 disk/tape/floppy/" "" sii(7)
.xx "" "sif: Interphase Storager" "2 floppy controller." "" sif(7)
.xx "" "siq: Interphase Storager" "2 qic-02 tape controller." "" siq(7)
.xx "" "iph: Interphase" "2190 smd disk controller." "" iph(7)
.xx "" "special functions of HP 2640 and" "2621-series terminals." "hp: handle" hp(1)
.xx "" "hp: handle special functions of HP" "2640 and 2621-series terminals." "" hp(1)
.xx "of DASI 300 and 300s terminals." "" "300, 300s: handle special functions" "" 300(1)
.xx "" "handle special functions of DASI" "300 and 300s terminals." "300, 300s:" 300(1)
.xx "DASI 300 and 300s terminals." "300," "300s: handle special functions of" "" 300(1)
.xx "" "special functions of DASI 300 and" "300s terminals." "300, 300s: handle" 300(1)
.xx "" "t3279: IBM" "3270 terminal emulator." "" t3279(1C)
.xx "" "l3tol, ltol3: convert between" "3-byte integers and long integers." "" l3tol(3C)
.xx """breakout""." "superbreak:" "3-D version of the game" "" superbreak(1d)
.xx "" "diff3:" "3-way differential file comparison." "" diff3(1)
.xx "" "ps4014: convert a Tektronix" "4014 files to POSTSCRIPT format." "" ps4014(1)
.xx "4014 terminal." "" "4014: paginator for the Tektronix" "" 4014(1)
.xx "" "4014: paginator for the Tektronix" "4014 terminal." "" 4014(1)
.xx "DASI 450 terminal." "" "450: handle special functions of the" "" 450(1)
.xx "" "handle special functions of the DASI" "450 terminal." "450:" 450(1)
.xx "" "ib: IEEE" "488 interface." "" ib(7)
.xx "" "rc.tcp, rc.nfs, rc.mail, rc." "488, rc.xns: communication option/" "" rc.tcp(1M)
.xx "" "pdp11, u3b, u3b15, u3b2, u3b5, vax," "4d60, mips, m68000, m68k: get/" "" machid(1)
.xx "format." "ps630: convert Diablo" "630 print files to POSTSCRIPT" "" ps630(1)
.xx "" "Pascal and FORTRAN compilers for the" "68010/68020." "cc, pc, f77: C," cc(1)
.xx "" "f77: FORTRAN compiler for the" "68010/68020." "" f77(1)
.xx "" "pc: Pascal compiler for the" "68010/68020." "" pc(1)
.xx "integer and base-64 ASCII string." "" "a64l, l64a: convert between long" "" a64l(3C)
.xx "" "" "abort: generate an IOT fault." "" abort(3C)
.xx "" "" "abs: return integer absolute value." "" abs(3C)
.xx "" "abs: return integer" "absolute value." "" abs(3C)
.xx "" "(_lfabs): floor, ceiling, remainder," "absolute value functions." "/fabs" floor(3M)
.xx "" "accept:" "accept a connection on a socket." "" accept(2)
.xx "socket." "" "accept: accept a connection on a" "" accept(2)
.xx "input." "read:" "accept input from the standard" "" sh(1)
.xx "requests." "" "accept, reject: allow/prevent LP" "" accept(1M)
.xx "file." "touch: update" "access and modification times of a" "" touch(1)
.xx "" "utime: set file" "access and modification times." "" utime(2)
.xx "file." "" "access: determine accessibility of a" "" access(2)
.xx "" "getgroups: get group" "access list." "" getgroups(3B)
.xx "" "phys: allow a process to" "access physical addresses." "" phys(2)
.xx "" "mknetpr: provide" "access to a remote printer." "" mknetpr(1M)
.xx "" "setutent, endutent, utmpname:" "access utmp file entry." "/pututline," getut(3C)
.xx "" "access: determine" "accessibility of a file." "" access(2)
.xx "" "acct: enable or disable process" "accounting." "" acct(2)
.xx "" "acctcon1, acctcon2: connect-time" "accounting." "" acctcon(1M)
.xx "" "acctprc1, acctprc2: process" "accounting." "" acctprc(1M)
.xx "" "turnacct: shell procedures for" "accounting." "/shutacct, startup," acctsh(1M)
.xx "" "/accton, acctwtmp: overview of" "accounting and miscellaneous/" "" acct(1M)
.xx "" "of accounting and miscellaneous" "accounting commands." "/overview" acct(1M)
.xx "" "acct: per-process" "accounting file format." "" acct(4)
.xx "" "acctcom: search and print process" "accounting file(s)." "" acctcom(1)
.xx "" "acctmerg: merge or add total" "accounting files." "" acctmerg(1M)
.xx "" "command summary from per-process" "accounting records." "acctcms:" acctcms(1M)
.xx "" "fwtmp, wtmpfix: manipulate connect" "accounting records." "" fwtmp(1M)
.xx "" "runacct: run daily" "accounting." "" runacct(1M)
.xx "accounting." "" "acct: enable or disable process" "" acct(2)
.xx "format." "" "acct: per-process accounting file" "" acct(4)
.xx "per-process accounting records." "" "acctcms: command summary from" "" acctcms(1M)
.xx "accounting file(s)." "" "acctcom: search and print process" "" acctcom(1)
.xx "accounting." "" "acctcon1, acctcon2: connect-time" "" acctcon(1M)
.xx "" "acctcon1," "acctcon2: connect-time accounting." "" acctcon(1M)
.xx "acctwtmp: overview of accounting/" "" "acctdisk, acctdusg, accton," "" acct(1M)
.xx "of accounting and/" "acctdisk," "acctdusg, accton, acctwtmp: overview" "" acct(1M)
.xx "accounting files." "" "acctmerg: merge or add total" "" acctmerg(1M)
.xx "accounting and/" "acctdisk, acctdusg," "accton, acctwtmp: overview of" "" acct(1M)
.xx "accounting." "" "acctprc1, acctprc2: process" "" acctprc(1M)
.xx "" "acctprc1," "acctprc2: process accounting." "" acctprc(1M)
.xx "" "acctdisk, acctdusg, accton," "acctwtmp: overview of accounting and/" "" acct(1M)
.xx "" "times: print" "accumulated times." "" sh(1)
.xx "" "/(_lcos), tan (_ltan), asin (_lasin)," "acos (_lacos), atan (_latan), atan2/" "" trig(3M)
.xx "" "killall: kill all" "active processes." "" killall(1M)
.xx "" "print current SCCS file editing" "activity." "sact:" sact(1)
.xx "" "a random, hopefully interesting," "adage." "fortune: print" fortune(6)
.xx "" "" "adb: debugger." "" adb(1)
.xx "" "dbadd:" "add an entry to a database." "" dbadd(1)
.xx "environment." "export:" "add shell variables to the" "" sh(1)
.xx "" "acctmerg: merge or" "add total accounting files." "" acctmerg(1M)
.xx "bibliographic database." "" "addbib: create or extend" "" addbib(1)
.xx "clients to connect." "" "addclient: allow remote printing" "" addclient(1M)
.xx "file system/" "setmntent, getmntent," "addmntent, endmntent, hasmntopt: get" "" getmntent(3C)
.xx "" "/inet_lnaof, inet_netof: Internet" "address manipulation routines." "" inet(3N)
.xx "" "/ether_hostton, ether_line: ethernet" "address mapping operations." "" ethers(3R)
.xx "control." "arp:" "address resolution display and" "" arp(1M)
.xx "" "ethers: ethernet" "address to hostname database." "" ethers(4)
.xx "" "allow a process to access physical" "addresses." "phys:" phys(2)
.xx "files." "" "admin: create and administer SCCS" "" admin(1)
.xx "" "admin: create and" "administer SCCS files." "" admin(1)
.xx "format." "afm:" "Adobe POSTSCRIPT font metrics file" "" afm(4)
.xx "" "" "adventure: an exploration game." "" adventure(6)
.xx "file format." "" "afm: Adobe POSTSCRIPT font metrics" "" afm(4)
.xx "" "the flight of any of several" "aircraft." "flight: simulate" flight(1d)
.xx "" "or competitive flight simulator and" "airshow generator." "dog: cooperative" dog(1d)
.xx "" "alarm: set a process's" "alarm clock." "" alarm(2)
.xx "" "" "alarm: set a process's alarm clock." "" alarm(2)
.xx "" "" "alias: shell macros." "" csh(1)
.xx "" "" "aliases: aliases file for sendmail." "" aliases(4)
.xx "" "unalias: remove" "aliases." "" csh(1)
.xx "" "aliases:" "aliases file for sendmail." "" aliases(4)
.xx "" "rebuild the data base for the mail" "aliases file." "newaliases:" newaliases(1)
.xx "" "aliens, alienslog: the" "alien invaders attack the earth." "" aliens(6)
.xx "invaders attack the earth." "" "aliens, alienslog: the alien" "" aliens(6)
.xx "the earth." "aliens," "alienslog: the alien invaders attack" "" aliens(6)
.xx "" "brk, sbrk: change data segment space" "allocation." "" brk(2)
.xx "" "cfree, malloc_check: main memory" "allocator." "/free, realloc, calloc," malloc(3C)
.xx "" "accept, reject:" "allow/prevent LP requests." "" accept(1M)
.xx "" "scandir," "alphasort: scan a directory." "" scandir(3B)
.xx "" "scandir," "alphasort: scan a directory." "" scandir(3C)
.xx "" "else:" "alternative commands." "" csh(1)
.xx "" "elif, else:" "alternative commands." "" sh(1)
.xx "messages." "error:" "analyze and disperse compiler error" "" error(1)
.xx "document." "style:" "analyze surface characteristics of a" "" style(1)
.xx "" "sort: sort" "and/or merge files." "" sort(1)
.xx "" "worms:" "animate worms on a display terminal." "" worms(6)
.xx "" "rain:" "animated raindrops display." "" rain(6)
.xx "" "bcd: convert to" "antique media." "" bcd(6)
.xx "" "intro: introduction to commands and" "application programs." "" intro(1)
.xx "" "to system maintenance commands and" "application programs." "/introduction" intro(1M)
.xx "arguments." "apply:" "apply a command to a set of" "" apply(1)
.xx "arguments." "" "apply: apply a command to a set of" "" apply(1)
.xx "" "" "ar: archive and library maintainer." "" ar(1)
.xx "" "" "ar: archive (library) file format." "" ar(4)
.xx "" "number: convert" "Arabic numerals to English." "" number(6)
.xx "language." "bc:" "arbitrary-precision arithmetic" "" bc(1)
.xx "architectural model." "" "arch: display a simulated" "" arch(1d)
.xx "" "arch: display a simulated" "architectural model." "" arch(1d)
.xx "" "ar:" "archive and library maintainer." "" ar(1)
.xx "" "cpio: format of cpio" "archive." "" cpio(4)
.xx "" "ar:" "archive (library) file format." "" ar(4)
.xx "" "tar: tape" "archiver." "" tar(1)
.xx "" "cpio: copy file" "archives in and out." "" cpio(1)
.xx "" "ranlib: convert" "archives to random libraries." "" ranlib(1)
.xx "" "glob: filename expand" "argument list." "" csh(1)
.xx "" "shift: manipulate" "argument list." "" csh(1)
.xx "" "shift: manipulate" "argument list." "" sh(1)
.xx "" "varargs: variable" "argument list." "" varargs(5)
.xx "command." "xargs: construct" "argument list(s) and execute" "" xargs(1)
.xx "" "getopt: get option letter from" "argument vector." "" getopt(3C)
.xx "" "apply: apply a command to a set of" "arguments." "" apply(1)
.xx "" "expr: evaluate" "arguments as an expression." "" expr(1)
.xx "" "echo: echo" "arguments." "" csh(1)
.xx "" "echo: echo" "arguments." "" echo(1)
.xx "" "bc: arbitrary-precision" "arithmetic language." "" bc(1)
.xx "" "@:" "arithmetic on shell variables." "" csh(1)
.xx "facts." "" "arithmetic: provide drill in number" "" arithmetic(6)
.xx "" "robot: control a robot" "arm." "" robot(1d)
.xx "dogfight." "shadow: full-screen" "armchair pilot's view of the" "" shadow(1d)
.xx "control." "" "arp: address resolution display and" "" arp(1M)
.xx "" "ftp:" "ARPANET file transfer program." "" ftp(1C)
.xx "" "expr: evaluate arguments" "as an expression." "" expr(1)
.xx "" "" "as: assembler." "" as(1)
.xx "" "asa: interpret" "ASA carriage control characters." "" asa(1)
.xx "characters." "" "asa: interpret ASA carriage control" "" asa(1)
.xx "" "ascii: map of" "ASCII character set." "" ascii(5)
.xx "" "" "ascii: map of ASCII character set." "" ascii(5)
.xx "" "between long integer and base-64" "ASCII string." "a64l, l64a: convert" a64l(3C)
.xx "number." "atof (_latof): convert" "ASCII string to floating-point" "" atof(3C)
.xx "time to/" "ctime, localtime, gmtime," "asctime, tzset: convert date and" "" ctime(3C)
.xx "" "/(_lsin), cos (_lcos), tan (_ltan)," "asin (_lasin), acos (_lacos), atan/" "" trig(3M)
.xx "" "help:" "ask for help." "" help(1)
.xx "" "a.out:" "assembler and link editor output." "" a.out(4)
.xx "" "as:" "assembler." "" as(1)
.xx "" "" "assert: verify program assertion." "" assert(3X)
.xx "" "assert: verify program" "assertion." "" assert(3X)
.xx "graphics device." "devport:" "assign a serial port to an external" "" devport(1G)
.xx "" "setbuf:" "assign buffering to a stream." "" setbuf(3S)
.xx "" "nfssvc," "async_daemon: NFS daemons." "" nfssvc(2)
.xx "" "at: execute commands" "at a later time." "" at(1)
.xx "" "ypset: point ypbind" "at a particular server." "" ypset(1M)
.xx "" "yppoll: what version of a YP map is" "at a YP server host." "" yppoll(1M)
.xx "time." "" "at: execute commands at a later" "" at(1)
.xx "" "up a Bourne Shell environment" "at login time." "profile: setting" profile(4)
.xx "" "nice: run a command" "at low priority." "" nice(1)
.xx "" "/asin (_lasin), acos (_lacos)," "atan (_latan), atan2 (_latan2):/" "" trig(3M)
.xx "" "/acos (_lacos), atan (_latan)," "atan2 (_latan2): trigonometric/" "" trig(3M)
.xx "to floating-point number." "" "atof (_latof): convert ASCII string" "" atof(3C)
.xx "" "strtol, atol," "atoi: convert string to integer." "" strtol(3C)
.xx "integer." "strtol," "atol, atoi: convert string to" "" strtol(3C)
.xx "" "alienslog: the alien invaders" "attack the earth." "aliens," aliens(6)
.xx "" "rcs: change RCS file" "attributes." "" rcs(1)
.xx "autoconfiguration code." "" "autoconf: diagnostics from the" "" autoconf(7)
.xx "" "autoconf: diagnostics from the" "autoconfiguration code." "" autoconf(7)
.xx "" "autorobots: escape from the" "automatic robots." "" autorobots(6)
.xx "automatic robots." "" "autorobots: escape from the" "" autorobots(6)
.xx "" "xnsfile,xnspathname: find an" "available network channel or return/" "" xnsfile(3N)
.xx "" "lav: show load" "average." "" lav(1)
.xx "" "graphically display the system load" "average." "loadav:" loadav(1W)
.xx "language." "" "awk: pattern scanning and processing" "" awk(1)
.xx "" "back: the game of" "backgammon." "" back(6)
.xx "" "wait: wait for" "background processes to complete." "" csh(1)
.xx "" "wait: wait for" "background processes to complete." "" sh(1)
.xx "" "wait: wait for" "background processes to complete." "" wait(1)
.xx "" "bckgrnd: generate a textured" "background texture." "" bckgrnd(1d)
.xx "" "texback: generate a textured" "background texture." "" texback(1W)
.xx "for SGI IRIS workstation." "" "backup: interactive backup program" "" backup(1M)
.xx "workstation." "backup: interactive" "backup program for SGI IRIS" "" backup(1M)
.xx "" "" "banner: make posters." "" banner(1)
.xx "" "banner7: print large" "banner on printer." "" banner7(1)
.xx "printer." "" "banner7: print large banner on" "" banner7(1)
.xx "" "display of complex scientific data" "base." "flow:" flow(1d)
.xx "" "newaliases: rebuild the data" "base for the mail aliases file." "" newaliases(1)
.xx "" "hosts: host name data" "base." "" hosts(4)
.xx "" "networks: network name data" "base." "" networks(4)
.xx "" "ttytype: data" "base of terminal types by port." "" ttytype(4)
.xx "" "protocols: protocol name data" "base." "" protocols(4)
.xx "" "rpc: rpc program number data" "base." "" rpc(4)
.xx "" "services: service name data" "base." "" services(4)
.xx "" "delete, firstkey, nextkey: data" "base subroutines." "/fetch, store," dbm(3X)
.xx "" "dbm_error, dbm_clearerr: data" "base subroutines." "/dbm_nextkey," ndbm(3X)
.xx "" "termcap: terminal capability data" "base." "" termcap(4)
.xx "" "ypcat: print values in a YP data" "base." "" ypcat(1)
.xx "" "convert between long integer and" "base-64 ASCII string." "a64l, l64a:" a64l(3C)
.xx "" "oriented (visual) display editor" "based on ex." "vi, view: screen" vi(1)
.xx "of path names." "" "basename, dirname: deliver portions" "" basename(1)
.xx "language." "" "bc: arbitrary-precision arithmetic" "" bc(1)
.xx "cat)." "" "bcat: catenate and print (Berkeley" "" bcat(1)
.xx "" "" "bcd: convert to antique media." "" bcd(6)
.xx "initialization shell scripts." "brc," "bcheckrc, rc, powerfail: system" "" brc(1M)
.xx "background texture." "" "bckgrnd: generate a textured" "" bckgrnd(1d)
.xx "operations." "bcopy," "bcmp, bzero, bswap: byte string" "" bstring(3C)
.xx "string operations." "" "bcopy, bcmp, bzero, bswap: byte" "" bstring(3C)
.xx "" "" "bcopy: interactive block copy." "" bcopy(1M)
.xx "" "" "bdiff: big diff." "" bdiff(1)
.xx "" "cb: C program" "beautifier." "" cb(1)
.xx "" "su:" "become super-user or another user." "" su(1)
.xx "" "exports: NFS filesystems" "being exported." "" exports(4)
.xx "" "fsdb:" "Bell file system debugger." "" fsdb(1M)
.xx "file system volume." "" "Bell file system: format of Bell" "" bellfs(4)
.xx "" "bellinode: format of a" "Bell file system inode." "" bellinode(4)
.xx "" "Bell file system: format of" "Bell file system volume." "" bellfs(4)
.xx "system inode." "" "bellinode: format of a Bell file" "" bellinode(4)
.xx "" "bcat: catenate and print" "(Berkeley cat)." "" bcat(1)
.xx "" "list contents of directory (enhanced" "Berkeley version)." "ls:" ls(1)
.xx "" "j0, j1, jn, y0, y1, yn:" "Bessel functions." "" bessel(3M)
.xx "" "/srandom, initstate, setstate:" "better random number generator;/" "" random(3B)
.xx "" "" "bfs: big file scanner." "" bfs(1)
.xx "" "addbib: create or extend" "bibliographic database." "" addbib(1)
.xx "" "roffbib: run off" "bibliographic database." "" roffbib(1)
.xx "" "sortbib: sort" "bibliographic database." "" sortbib(1)
.xx "" "/lookbib: build inverted index for a" "bibliography, find references in a/" "" lookbib(1)
.xx "" "a bibliography, find references in a" "bibliography." "/inverted index for" lookbib(1)
.xx "" "bdiff:" "big diff." "" bdiff(1)
.xx "" "bfs:" "big file scanner." "" bfs(1)
.xx "" "whereis: locate source," "binary, and or manual for program." "" whereis(1)
.xx "" "uuencode, uudecode: encode/decode a" "binary file for transmission via/" "" uuencode(1C)
.xx "" "strings in an object, or other" "binary file." "/find the printable" strings(1)
.xx "" "fread, fwrite:" "binary input/output." "" fread(3S)
.xx "" "bsearch:" "binary search." "" bsearch(3C)
.xx "" "tsearch, tdelete, twalk: manage" "binary search trees." "" tsearch(3C)
.xx "" "bind:" "bind a name to a socket." "" bind(2)
.xx "" "" "bind: bind a name to a socket." "" bind(2)
.xx "" "ypbind: yellow pages server and" "binder processes." "ypserv," ypserv(1M)
.xx "" "nfsd," "biod: NFS daemons." "" nfsd(1M)
.xx "" "ffs:" "bit string operation." "" ffs(3B)
.xx "" "" "bj: the game of black jack." "" bj(6)
.xx "" "bj: the game of" "black jack." "" bj(6)
.xx "" "blanktime: set the screen" "blanking timeout." "" blanktime(1G)
.xx "timeout." "" "blanktime: set the screen blanking" "" blanktime(1G)
.xx "" "bcopy: interactive" "block copy." "" bcopy(1M)
.xx "" "sum: print checksum and" "block count of a file." "" sum(1)
.xx "" "sync: update the super" "block." "" sync(1)
.xx "" "blt:" "block transfer data." "" blt(3C)
.xx "" "periodically update the super" "block." "update:" update(1M)
.xx "" "df: report number of free disk" "blocks." "" df(1)
.xx "" "" "blt: block transfer data." "" blt(3C)
.xx "" "displays the dogfight score" "board." "dogscore:" dogscore(1d)
.xx "" "duart: on" "board serial ports." "" duart(7)
.xx "" "sgboot: provide network" "boot service." "" sgboot(1M)
.xx "" "" "boot: startup procedures." "" boot(8)
.xx "" "flpuxfer: transfer the" "bootable floppy." "" flpuxfer(1M)
.xx "restoration." "mkboot: make a" "bootable tape for system" "" mkboot(1M)
.xx "" "mkbootflp: create a" "bootable unix floppy disk." "" mkbootflp(1M)
.xx "" "server for DARPA Bootstrap Protocol" "(BOOTP)." "bootp:" bootp(1M)
.xx "Protocol (BOOTP)." "" "bootp: server for DARPA Bootstrap" "" bootp(1M)
.xx "" "bootp: server for DARPA" "Bootstrap Protocol (BOOTP)." "" bootp(1M)
.xx "time." "profile: setting up a" "Bourne Shell environment at login" "" profile(4)
.xx "" "switch: multi-way command" "branch." "" csh(1)
.xx "" "case: multi-way command" "branch." "" sh(1)
.xx "initialization shell scripts." "" "brc, bcheckrc, rc, powerfail: system" "" brc(1M)
.xx "" "" "break: exit while/for loop." "" sh(1)
.xx "" "" "break: exit while/foreach loop." "" csh(1)
.xx "" "superbreak: 3-D version of the game" """breakout""." "" superbreak(1d)
.xx "" "" "breaksw: exit from switch." "" csh(1)
.xx "allocation." "" "brk, sbrk: change data segment space" "" brk(2)
.xx "modest-sized programs." "" "bs: a compiler/interpreter for" "" bs(1)
.xx "" "" "bsearch: binary search." "" bsearch(3C)
.xx "" "bcopy, bcmp, bzero," "bswap: byte string operations." "" bstring(3C)
.xx "" "stdio: standard" "buffered input/output package." "" stdio(3S)
.xx "" "setbuf: assign" "buffering to a stream." "" setbuf(3S)
.xx "" "dbbuild:" "build a database from a script." "" dbbuild(1)
.xx "database." "ypinit:" "build and install yellow pages" "" ypinit(1M)
.xx "bibliography,/" "indxbib, lookbib:" "build inverted index for a" "" lookbib(1)
.xx "" "mknod:" "build special file." "" mknod(1M)
.xx "" "values between host and network" "byte order." "/ntohl, ntohs: convert" byteorder(3N)
.xx "" "bcopy, bcmp, bzero, bswap:" "byte string operations." "" bstring(3C)
.xx "" "swab: swap" "bytes." "" swab(3C)
.xx "operations." "bcopy, bcmp," "bzero, bswap: byte string" "" bstring(3C)
.xx "" "FORTRAN-callable entry points from a" "C file." "extcentry: extract" extcentry(1)
.xx "system." "fpsigset:" "C floating point exception handling" "" fpsigset(3C)
.xx "" "cpp: the" "C language preprocessor." "" cpp(1)
.xx "the 68010/68020." "cc, pc, f77:" "C, Pascal and FORTRAN compilers for" "" cc(1)
.xx "" "cb:" "C program beautifier." "" cb(1)
.xx "" "lint: a" "C program checker." "" lint(1)
.xx "" "cxref: generate" "C program cross reference." "" cxref(1)
.xx "" "ctags: maintain a tags file for a" "C program." "" ctags(1)
.xx "" "indent: indent and format" "C program source." "" indent(1)
.xx "strings." "xstr: extract strings from" "C programs to implement shared" "" xstr(1)
.xx "" "login, cshrc: setting up a" "C Shell environment." "" login(4)
.xx "" "an error message file by massaging" "C source." "mkstr: create" mkstr(1)
.xx "" "" "cal: print calendar." "" cal(1)
.xx "" "dc: desk" "calculator." "" dc(1)
.xx "" "cal: print" "calendar." "" cal(1)
.xx "" "" "calendar: reminder service." "" calendar(1)
.xx "" "cu:" "call another UNIX System." "" cu(1C)
.xx "" "stat: data returned by stat system" "call." "" stat(5)
.xx "memory/" "malloc, free, realloc," "calloc, cfree, malloc_check: main" "" malloc(3C)
.xx "" "intro: introduction to system" "calls and error numbers." "" intro(2)
.xx "" "exercise link and unlink system" "calls." "link, unlink:" link(1M)
.xx "" "routines for remote procedure" "calls." "rpc: library" rpc(3R)
.xx "LP line printer." "lp," "cancel: send/cancel requests to an" "" lp(1)
.xx "" "termcap: terminal" "capability data base." "" termcap(4)
.xx "" "" "capture: dump screen image to file." "" capture(1W)
.xx "" "cribbage: the" "card game cribbage." "" cribbage(6)
.xx "" "pnch: file format for" "card images." "" pnch(4)
.xx "" "asa: interpret ASA" "carriage control characters." "" asa(1)
.xx "" "" "case: multi-way command branch." "" sh(1)
.xx "" "" "case: selector in switch." "" csh(1)
.xx "" "esac: terminate" "case." "" sh(1)
.xx "" "bcat: catenate and print (Berkeley" "cat)." "" bcat(1)
.xx "" "" "cat: concatenate and print files." "" cat(1)
.xx "" "pscat: convert" "C/A/T files to POSTSCRIPT format." "" pscat(1)
.xx "" "default:" "catchall clause in switch." "" csh(1)
.xx "" "bcat:" "catenate and print (Berkeley cat)." "" bcat(1)
.xx "" "" "cb: C program beautifier." "" cb(1)
.xx "compilers for the 68010/68020." "" "cc, pc, f77: C, Pascal and FORTRAN" "" cc(1)
.xx "" "" "cd: change directory." "" csh(1)
.xx "" "" "cd: change directory." "" sh(1)
.xx "" "" "cd: change working directory." "" cd(1)
.xx "an SCCS delta." "" "cdc: change the delta commentary of" "" cdc(1)
.xx "" "" "cedit: edit colors on the screen." "" cedit(1W)
.xx "demonstration programs." "showmap," "cedit, interp: color map" "" colordemos(1d)
.xx "(_lfabs): floor,/" "floor (_lfloor)," "ceil (_lceil), fmod (_lfmod), fabs" "" floor(3M)
.xx "" "/fmod (_lfmod), fabs (_lfabs): floor," "ceiling, remainder, absolute value/" "" floor(3M)
.xx "LP." "mkcentpr: register a" "Centronics-interface printer with" "" mkcentpr(1M)
.xx "" "mkf2c, mkc2f: generate" "C-FORTRAN interface routines." "" mkf2c(1)
.xx "" "malloc, free, realloc, calloc," "cfree, malloc_check: main memory/" "" malloc(3C)
.xx "allocation." "brk, sbrk:" "change data segment space" "" brk(2)
.xx "" "cd:" "change directory." "" csh(1)
.xx "" "chdir:" "change directory." "" csh(1)
.xx "" "cd:" "change directory." "" sh(1)
.xx "pages." "yppasswd:" "change login password in yellow" "" yppasswd(1)
.xx "" "passwd:" "change login password." "" passwd(1)
.xx "" "chmod:" "change mode." "" chmod(1)
.xx "" "chmod:" "change mode of file." "" chmod(2)
.xx "mask." "umask:" "change or display file creation" "" csh(1)
.xx "mask." "umask:" "change or display file creation" "" sh(1)
.xx "" "ulimit:" "change or display size limits." "" sh(1)
.xx "" "chown:" "change owner and group of a file." "" chown(2)
.xx "" "chown, chgrp:" "change owner or group." "" chown(1)
.xx "" "nice:" "change priority of a process." "" nice(2)
.xx "" "rcs:" "change RCS file attributes." "" rcs(1)
.xx "" "chroot:" "change root directory." "" chroot(2)
.xx "" "chroot:" "change root directory for a command." "" chroot(1M)
.xx "SCCS delta." "cdc:" "change the delta commentary of an" "" cdc(1)
.xx "" "newform:" "change the format of a text file." "" newform(1)
.xx "" "rename:" "change the name of a file." "" rename(2)
.xx "file." "iset:" "change the type field of an image" "" iset(1W)
.xx "" "delta: make a delta" "(change) to an SCCS file." "" delta(1)
.xx "" "set:" "change value of shell variable." "" csh(1)
.xx "" "cd:" "change working directory." "" cd(1)
.xx "" "chdir:" "change working directory." "" chdir(2)
.xx "" "yppush: force propagation of a" "changed YP map." "" yppush(1M)
.xx "" "number generator; routines for" "changing generators." "/better random" random(3B)
.xx "" "available network channel or return" "channel number." "/find an" xnsfile(3N)
.xx "" "/find an available network" "channel or return channel number." "" xnsfile(3N)
.xx "" "pipe: create an interprocess" "channel." "" pipe(2)
.xx "" "ungetc: push" "character back into input stream." "" ungetc(3S)
.xx "neqn." "eqnchar: special" "character definitions for eqn and" "" eqnchar(5)
.xx "" "freq: report on" "character frequencies in a file." "" freq(1)
.xx "" "cuserid: get" "character login name of the user." "" cuserid(3S)
.xx "" "getc, getchar, fgetc, getw: get" "character or word from stream." "" getc(3S)
.xx "" "putc, putchar, fputc, putw: put" "character or word on a stream." "" putc(3S)
.xx "" "ascii: map of ASCII" "character set." "" ascii(5)
.xx "" "style: analyze surface" "characteristics of a document." "" style(1)
.xx "" "asa: interpret ASA carriage control" "characters." "" asa(1)
.xx "" "_tolower, toascii: translate" "characters." "/tolower, _toupper," conv(3C)
.xx "" "isascii: classify or translate" "characters." "/isgraph, iscntrl," ctype(3C)
.xx "" "tr: translate" "characters." "" tr(1)
.xx "lastlogin, monacct, nulladm,/" "" "chargefee, ckpacct, dodisk," "" acctsh(1M)
.xx "robots." "" "chase: try to escape the killer" "" chase(6)
.xx "" "" "chdir: change directory." "" csh(1)
.xx "" "" "chdir: change working directory." "" chdir(2)
.xx "" "fsck, dfsck: file system consistency" "check and interactive repair." "" fsck(1M)
.xx "" "" "check: check RCS status of a file." "" check(1)
.xx "" "ci:" "check in RCS revisions." "" ci(1)
.xx "" "co:" "check out RCS revisions." "" co(1)
.xx "" "check:" "check RCS status of a file." "" check(1)
.xx "" "spray: scatter data in order to" "check the network." "" spray(3X)
.xx "text prepared by cw(1) for troff." "" "checkcw: verifies constant-width" "" checkcw(1)
.xx "" "lint: a C program" "checker." "" lint(1)
.xx "" "pwck, grpck: password/group file" "checkers." "" pwck(1M)
.xx "with the mm macros." "" "checkmm: checks documents formatted" "" checkmm(1)
.xx "formatted with the MM/" "mm, osdd," "checkmm: print/check documents" "" mm(1)
.xx "mm macros." "checkmm:" "checks documents formatted with the" "" checkmm(1)
.xx "" "sum: print" "checksum and block count of a file." "" sum(1)
.xx "" "chown," "chgrp: change owner or group." "" chown(1)
.xx "" "times: get process and" "child process times." "" times(2)
.xx "" "wait: wait for" "child process to stop or terminate." "" wait(2)
.xx "" "" "chmod: change mode." "" chmod(1)
.xx "" "" "chmod: change mode of file." "" chmod(2)
.xx "file." "" "chown: change owner and group of a" "" chown(2)
.xx "" "" "chown, chgrp: change owner or group." "" chown(1)
.xx "" "" "chroot: change root directory." "" chroot(2)
.xx "command." "" "chroot: change root directory for a" "" chroot(1M)
.xx "" "" "ci: check in RCS revisions." "" ci(1)
.xx "nulladm, prctmp,/" "chargefee," "ckpacct, dodisk, lastlogin, monacct," "" acctsh(1M)
.xx "" "/isprint, isgraph, iscntrl, isascii:" "classify or translate characters." "" ctype(3C)
.xx "" "default: catchall" "clause in switch." "" csh(1)
.xx "" "uuclean: uucp spool directory" "clean-up." "" uuclean(1M)
.xx "" "" "clear: clear terminal screen." "" clear(1)
.xx "" "clri:" "clear inode." "" clri(1M)
.xx "" "gclear:" "clear IRIS graphics screen." "" gclear(1G)
.xx "" "clear:" "clear terminal screen." "" clear(1)
.xx "inquiries." "ferror, feof," "clearerr, fileno: stream status" "" ferror(3S)
.xx "" "ypprot_err: yellow pages" "client interface." "/yperr_string," ypclnt(3R)
.xx "" "addclient: allow remote printing" "clients to connect." "" addclient(1M)
.xx "" "a shell (command interpreter) with" "C-like syntax." "csh:" csh(1)
.xx "" "alarm: set a process's alarm" "clock." "" alarm(2)
.xx "" "cron:" "clock daemon." "" cron(1M)
.xx "day." "" "clock: display the current time of" "" clock(1W)
.xx "" "" "clock: report CPU time used." "" clock(3C)
.xx "" "close:" "close a file descriptor." "" close(2)
.xx "" "" "close: close a file descriptor." "" close(2)
.xx "" "fclose, fflush:" "close or flush a stream." "" fclose(3S)
.xx "" "/telldir, seekdir, rewinddir," "closedir: directory operations." "" directory(3B)
.xx "" "/telldir, seekdir, rewinddir," "closedir: directory operations." "" directory(3C)
.xx "log." "syslog, openlog," "closelog, setlogmask: control system" "" syslog(3B)
.xx "" "" "clri: clear inode." "" clri(1M)
.xx "" "" "cmp: compare two files." "" cmp(1)
.xx "" "" "co: check out RCS revisions." "" co(1)
.xx "" "from the autoconfiguration" "code." "autoconf: diagnostics" autoconf(7)
.xx "" "" "col: filter reverse line-feeds." "" col(1)
.xx "to rmail format." "" "collectmail: convert mail from unix" "" collectmail(1)
.xx "" "showmap, cedit, interp:" "color map demonstration programs." "" colordemos(1d)
.xx "" "loadmap: load a part of the" "color map from a file." "" loadmap(1W)
.xx "" "makemap: make the default" "color map." "" makemap(1W)
.xx "" "randmap: randomize a section of the" "color map." "" randmap(1W)
.xx "" "savemap: save a range of the" "color map." "" savemap(1W)
.xx "" "showmap: display the contents of the" "color map." "" showmap(1W)
.xx "" "showramp: interactive" "color ramp." "" showramp(1d)
.xx "programs." "demomakemap: loads" "colors for mex demonstration" "" demomakemap(1d)
.xx "" "gamma correction value for mapping" "colors." "gamma: set the" gamma(1W)
.xx "" "savedesktop: saves" "colors in ~/.desktop." "" savedesktop(1W)
.xx "" "cedit: edit" "colors on the screen." "" cedit(1W)
.xx "" "textcolors: set the" "colors used by a text window." "" textcolors(1G)
.xx "" "" "comb: combine SCCS deltas." "" comb(1)
.xx "" "comb:" "combine SCCS deltas." "" comb(1)
.xx "to two sorted files." "" "comm: select or reject lines common" "" comm(1)
.xx "" "nice: run a" "command at low priority." "" nice(1)
.xx "" "switch: multi-way" "command branch." "" csh(1)
.xx "" "case: multi-way" "command branch." "" sh(1)
.xx "" "chroot: change root directory for a" "command." "" chroot(1M)
.xx "" "exec: overlay shell with specified" "command." "" csh(1)
.xx "" "time: time" "command." "" csh(1)
.xx "" "env: set environment for" "command execution." "" env(1)
.xx "" "uux: unix to unix" "command execution." "" uux(1C)
.xx "" "rehash: recompute" "command hash table." "" csh(1)
.xx "" "unhash: discard" "command hash table." "" csh(1)
.xx "" "nohup: run" "command immune to hangups." "" csh(1)
.xx "" "nohup: run a" "command immune to hangups (sh only)." "" nohup(1)
.xx "syntax." "csh: a shell" "(command interpreter) with C-like" "" csh(1)
.xx "" "getopt: parse" "command options." "" getopt(1)
.xx "" "sh: shell, the standard" "command programming language." "" sh(1)
.xx "" "for returning a stream to a remote" "command." "/ruserok: routines" rcmd(3N)
.xx "" "repeat: execute" "command repeatedly." "" csh(1)
.xx "" "rexec: return stream to a remote" "command." "" rexec(3N)
.xx "" "onintr: process interrupts in" "command scripts." "" csh(1)
.xx "" "trap: process interrupts in" "command scripts." "" sh(1)
.xx "" ":: null" "command." "" sh(1)
.xx "" "exec: overlay shell with specified" "command." "" sh(1)
.xx "" "test: condition evaluation" "command." "" sh(1)
.xx "accounting records." "acctcms:" "command summary from per-process" "" acctcms(1M)
.xx "" "system: issue a shell" "command." "" system(3S)
.xx "" "test: condition evaluation" "command." "" test(1)
.xx "" "time: time a" "command." "" time(1)
.xx "" "apply: apply a" "command to a set of arguments." "" apply(1)
.xx "" "goto:" "command transfer." "" csh(1)
.xx "" "argument list(s) and execute" "command." "xargs: construct" xargs(1)
.xx "" "and miscellaneous accounting" "commands." "/overview of accounting" acct(1M)
.xx "" "intro: introduction to" "commands and application programs." "" intro(1)
.xx "" "/introduction to system maintenance" "commands and application programs." "" intro(1M)
.xx "" "at: execute" "commands at a later time." "" at(1)
.xx "" "while: repeat" "commands conditionally." "" csh(1)
.xx "" "until, while: repeat" "commands conditionally." "" sh(1)
.xx "" "else: alternative" "commands." "" csh(1)
.xx "" "source: read" "commands from file." "" csh(1)
.xx "" ".: read" "commands from file." "" sh(1)
.xx "" "install: install" "commands." "" install(1M)
.xx "" "Install: install" "commands." "" install.4d(1M)
.xx "" "rcsintro: introduction to RCS" "commands." "" rcsintro(1)
.xx "" "elif, else: alternative" "commands." "" sh(1)
.xx "" "cdc: change the delta" "commentary of an SCCS delta." "" cdc(1)
.xx "" "linenum: line number entries in a" "common object file." "" linenum(4)
.xx "" "scnhdr: section header for a" "common object file." "" scnhdr(4)
.xx "" "filehdr: file header for" "common object files." "" filehdr(4)
.xx "" "comm: select or reject lines" "common to two sorted files." "" comm(1)
.xx "" "socket: create an endpoint for" "communication - TCP." "" socket(2)
.xx "" "ipcs: report inter-process" "communication facilities status." "" ipcs(1)
.xx "" "/rc.nfs, rc.mail, rc.488, rc.xns:" "communication option initialization." "" rc.tcp(1M)
.xx "" "ftok: standard interprocess" "communication package." "" stdipc(3C)
.xx "" "diff: differential file" "comparator." "" diff(1)
.xx "" "rcsdiff:" "compare RCS revisions." "" rcsdiff(1)
.xx "" "cmp:" "compare two files." "" cmp(1)
.xx "file." "sccsdiff:" "compare two versions of an SCCS" "" sccsdiff(1)
.xx "" "diff3: 3-way differential file" "comparison." "" diff3(1)
.xx "" "dircmp: directory" "comparison." "" dircmp(1)
.xx "airshow/" "dog: cooperative or" "competitive flight simulator and" "" dog(1d)
.xx "expression." "regcmp, regex:" "compile and execute regular" "" regcmp(3X)
.xx "" "regexp: regular expression" "compile and match routines." "" regexp(5)
.xx "" "regcmp: regular expression" "compile." "" regcmp(1)
.xx "" "error: analyze and disperse" "compiler error messages." "" error(1)
.xx "" "f77: FORTRAN" "compiler for the 68010/68020." "" f77(1)
.xx "" "pc: Pascal" "compiler for the 68010/68020." "" pc(1)
.xx "" "yacc: yet another" "compiler-compiler." "" yacc(1)
.xx "modest-sized programs." "bs: a" "compiler/interpreter for" "" bs(1)
.xx "" "cc, pc, f77: C, Pascal and FORTRAN" "compilers for the 68010/68020." "" cc(1)
.xx "" "erf, erfc: error function and" "complementary error function." "" erf(3M)
.xx "" "wait for background processes to" "complete." "wait:" csh(1)
.xx "" "wait for background processes to" "complete." "wait:" sh(1)
.xx "" "wait for background processes to" "complete." "wait:" wait(1)
.xx "" "flow: display of" "complex scientific data base." "" flow(1d)
.xx "" "pack, pcat, unpack:" "compress and expand files." "" pack(1)
.xx "" "mkdepend:" "compute header file dependencies." "" mkdepend(1)
.xx "" "cat:" "concatenate and print files." "" cat(1)
.xx "" "test:" "condition evaluation command." "" sh(1)
.xx "" "test:" "condition evaluation command." "" test(1)
.xx "" "endif: terminate" "conditional." "" csh(1)
.xx "" "fi: terminate" "conditional." "" sh(1)
.xx "" "if:" "conditional statement." "" csh(1)
.xx "" "if, then:" "conditional statement." "" sh(1)
.xx "" "while: repeat commands" "conditionally." "" csh(1)
.xx "" "until, while: repeat commands" "conditionally." "" sh(1)
.xx "parameters." "ifconfig:" "configure network interface" "" ifconfig(1M)
.xx "" "lpadmin:" "configure the LP spooling system." "" lpadmin(1M)
.xx "" "fwtmp, wtmpfix: manipulate" "connect accounting records." "" fwtmp(1M)
.xx "" "allow remote printing clients to" "connect." "addclient:" addclient(1M)
.xx "socket." "" "connect: initiate a connection on a" "" connect(2)
.xx "" "getpeername: get name of" "connected peer." "" getpeername(2)
.xx "" "socketpair: create a pair of" "connected sockets." "" socketpair(2)
.xx "" "an out-going terminal line" "connection." "/and relinquish" dial(3C)
.xx "" "accept: accept a" "connection on a socket." "" accept(2)
.xx "" "connect: initiate a" "connection on a socket." "" connect(2)
.xx "" "shut down part of a full-duplex" "connection." "shutdown:" shutdown(2)
.xx "" "xnsconnect: make XNS" "connection." "" xnsconnect(3N)
.xx "" "xnswrite: write to XNS" "connection." "" xnswrite(3N)
.xx "" "listen: listen for" "connections on a socket." "" listen(2)
.xx "" "acctcon1, acctcon2:" "connect-time accounting." "" acctcon(1M)
.xx "repair." "fsck, dfsck: file system" "consistency check and interactive" "" fsck(1M)
.xx "" "cw: prepare" "constant-width text for troff." "" cw(1)
.xx "cw(1) for troff." "checkcw: verifies" "constant-width text prepared by" "" checkcw(1)
.xx "" "mkfs:" "construct a file system." "" mkfs(1M)
.xx "execute command." "xargs:" "construct argument list(s) and" "" xargs(1)
.xx "" "remove nroff/troff, tbl, and eqn" "constructs." "deroff:" deroff(1)
.xx "Berkeley version)." "ls: list" "contents of directory (enhanced" "" ls(1)
.xx "" "showmap: display the" "contents of the color map." "" showmap(1W)
.xx "" "csplit:" "context split." "" csplit(1)
.xx "" "" "continue: cycle in loop." "" csh(1)
.xx "" "" "continue: cycle in loop." "" sh(1)
.xx "" "robot:" "control a robot arm." "" robot(1d)
.xx "" "arp: address resolution display and" "control." "" arp(1M)
.xx "" "asa: interpret ASA carriage" "control characters." "" asa(1)
.xx "" "ioctl:" "control device." "" ioctl(2)
.xx "" "fcntl: file" "control." "" fcntl(2)
.xx "" "init, telinit: process" "control initialization." "" init(1M)
.xx "" "icmp: Internet" "Control Message Protocol." "" icmp(7P)
.xx "" "msgctl: message" "control operations." "" msgctl(2)
.xx "" "semctl: semaphore" "control operations." "" semctl(2)
.xx "" "shmctl: shared memory" "control operations." "" shmctl(2)
.xx "" "fcntl: file" "control options." "" fcntl(5)
.xx "" "timedc: timed" "control program." "" timedc(1M)
.xx "" "tcp: Internet Transmission" "Control Protocol." "" tcp(7P)
.xx "" "openlog, closelog, setlogmask:" "control system log." "syslog," syslog(3B)
.xx "" "uustat: uucp status inquiry and job" "control." "" uustat(1C)
.xx "" "vc: version" "control." "" vc(1)
.xx "" "dsd: st-506 disk/tape/floppy" "controller." "" dsd(7)
.xx "" "floppy: st-506 disk/tape/floppy" "controller." "" floppy(7)
.xx "" "iph: Interphase 2190 smd disk" "controller." "" iph(7)
.xx "" "qic: st-506 disk/tape" "controller." "" qic(7)
.xx "" "sif: Interphase Storager 2 floppy" "controller." "" sif(7)
.xx "" "2 esdi/st-506 disk/tape/floppy" "controller." "/Interphase Storager" sii(7)
.xx "" "Interphase Storager 2 qic-02 tape" "controller." "siq:" siq(7)
.xx "dogfight." "radar: flight" "controller's view of the Ethernet" "" radar(1d)
.xx "" "tty:" "controlling terminal interface." "" tty(7)
.xx "" "term:" "conventional names for terminals." "" term(5)
.xx "" "units:" "conversion program." "" units(1)
.xx "POSTSCRIPT format." "ps4014:" "convert a Tektronix 4014 files to" "" ps4014(1)
.xx "" "dd:" "convert and copy a file." "" dd(1)
.xx "" "number:" "convert Arabic numerals to English." "" number(6)
.xx "libraries." "ranlib:" "convert archives to random" "" ranlib(1)
.xx "floating-point/" "atof (_latof):" "convert ASCII string to" "" atof(3C)
.xx "long integers." "l3tol, ltol3:" "convert between 3-byte integers and" "" l3tol(3C)
.xx "base-64 ASCII string." "a64l, l64a:" "convert between long integer and" "" a64l(3C)
.xx "format." "pscat:" "convert C/A/T files to POSTSCRIPT" "" pscat(1)
.xx "" "/localtime, gmtime, asctime, tzset:" "convert date and time to string." "" ctime(3C)
.xx "POSTSCRIPT format." "ps630:" "convert Diablo 630 print files to" "" ps630(1)
.xx "" "/fcvt (_d_fcvt), gcvt (_d_gcvt):" "convert floating-point number to/" "" ecvt(3C)
.xx "" "scanf, fscanf, sscanf:" "convert formatted input." "" scanf(3S)
.xx "format." "collectmail:" "convert mail from unix to rmail" "" collectmail(1)
.xx "format." "psplot:" "convert plot files to POSTSCRIPT" "" psplot(1)
.xx "" "strtol, atol, atoi:" "convert string to integer." "" strtol(3C)
.xx "format for printing." "enscript:" "convert text files to POSTSCRIPT" "" enscript(1)
.xx "" "bcd:" "convert to antique media." "" bcd(6)
.xx "POSTSCRIPT format." "psdit:" "convert troff intermediate format to" "" psdit(1)
.xx "network/" "htonl, htons, ntohl, ntohs:" "convert values between host and" "" byteorder(3N)
.xx "simulator and airshow/" "dog:" "cooperative or competitive flight" "" dog(1d)
.xx "" "dd: convert and" "copy a file." "" dd(1)
.xx "" "vis:" "copy a file to the screen." "" vis(1W)
.xx "" "bcopy: interactive block" "copy." "" bcopy(1M)
.xx "" "cpio:" "copy file archives in and out." "" cpio(1)
.xx "" "cp, ln, mv:" "copy, link or move files." "" cp(1)
.xx "" "rcp: remote file" "copy." "" rcp(1C)
.xx "" "IRIS terminal root partition" "copy." "rootcopy:" rootcopy(1M)
.xx "" "uucp, uulog, uuname: unix to unix" "copy." "" uucp(1C)
.xx "" "unix system-to-unix system file" "copy." "uuto, uupick: public" uuto(1C)
.xx "" "xcp: remote file" "copy." "" xcp(1C)
.xx "" "" "core: format of core image file." "" core(4)
.xx "" "core: format of" "core image file." "" core(4)
.xx "" "gamma: set the gamma" "correction value for mapping colors." "" gamma(1W)
.xx "(_lasin), acos/" "sin (_lsin)," "cos (_lcos), tan (_ltan), asin" "" trig(3M)
.xx "hyperbolic/" "sinh (_lsinh)," "cosh (_lcosh), tanh (_ltanh):" "" sinh(3M)
.xx "" "sum: print checksum and block" "count of a file." "" sum(1)
.xx "" "wc: word" "count." "" wc(1)
.xx "files." "" "cp, ln, mv: copy, link or move" "" cp(1)
.xx "" "cpio: format of" "cpio archive." "" cpio(4)
.xx "" "" "cpio: copy file archives in and out." "" cpio(1)
.xx "" "" "cpio: format of cpio archive." "" cpio(4)
.xx "" "" "cpp: the C language preprocessor." "" cpp(1)
.xx "" "sethostname: set name of host" "cpu." "" sethostname(2)
.xx "" "clock: report" "CPU time used." "" clock(3C)
.xx "" "craps: the game of" "craps." "" craps(6)
.xx "" "" "craps: the game of craps." "" craps(6)
.xx "crashes." "" "crash: what to do when the system" "" crash(8)
.xx "" "crash: what to do when the system" "crashes." "" crash(8)
.xx "an existing one." "" "creat: create a new file or rewrite" "" creat(2)
.xx "" "mkbootflp:" "create a bootable unix floppy disk." "" mkbootflp(1M)
.xx "" "dbcreate:" "create a database." "" dbcreate(1)
.xx "" "tmpnam, tempnam:" "create a name for a temporary file." "" tmpnam(3S)
.xx "existing one." "creat:" "create a new file or rewrite an" "" creat(2)
.xx "" "fork:" "create a new process." "" fork(2)
.xx "" "socketpair:" "create a pair of connected sockets." "" socketpair(2)
.xx "document." "ndx:" "create a subject-page index for a" "" ndx(1)
.xx "" "tmpfile:" "create a temporary file." "" tmpfile(3S)
.xx "- TCP." "socket:" "create an endpoint for communication" "" socket(2)
.xx "massaging C source." "mkstr:" "create an error message file by" "" mkstr(1)
.xx "" "pipe:" "create an interprocess channel." "" pipe(2)
.xx "" "admin:" "create and administer SCCS files." "" admin(1)
.xx "database." "addbib:" "create or extend bibliographic" "" addbib(1)
.xx "" "umask: change or display file" "creation mask." "" csh(1)
.xx "" "umask: change or display file" "creation mask." "" sh(1)
.xx "" "umask: set and get file" "creation mask." "" umask(2)
.xx "" "cribbage: the card game" "cribbage." "" cribbage(6)
.xx "" "" "cribbage: the card game cribbage." "" cribbage(6)
.xx "" "" "cron: clock daemon." "" cron(1M)
.xx "" "cxref: generate C program" "cross reference." "" cxref(1)
.xx "files." "macref: produce" "cross-reference listing of macro" "" macref(1)
.xx "" "more, page: file perusal filter for" "crt viewing." "" more(1)
.xx "with C-like syntax." "" "csh: a shell (command interpreter)" "" csh(1)
.xx "" "cshrc:" "csh system-wide .login file." "" cshrc(4)
.xx "" "" "cshrc: csh system-wide .login file." "" cshrc(4)
.xx "environment." "login," "cshrc: setting up a C Shell" "" login(4)
.xx "" "" "csplit: context split." "" csplit(1)
.xx "terminal." "" "ct: spawn getty to a remote" "" ct(1C)
.xx "program." "" "ctags: maintain a tags file for a C" "" ctags(1)
.xx "terminal." "" "ctermid: generate file name for" "" ctermid(3S)
.xx "tzset: convert date and time to/" "" "ctime, localtime, gmtime, asctime," "" ctime(3C)
.xx "" "" "cu: call another UNIX System." "" cu(1C)
.xx "" "cube: real-time display of famous" "cube puzzle." "" cube(1d)
.xx "cube puzzle." "" "cube: real-time display of famous" "" cube(1d)
.xx "" "curve: fast interactive" "cubic curve display." "" curve(1d)
.xx "" "ttt," "cubic: tic-tac-toe." "" ttt(6)
.xx "" "setdomainname: get/set name of" "current domain." "getdomainname," getdomainname(2)
.xx "" "domainname: set or display name of" "current domain system." "" domainname(1)
.xx "" "get/set unique identifier of" "current host." "gethostid, sethostid:" gethostid(2)
.xx "" "gethostname: get name of" "current host." "" gethostname(2)
.xx "" "hostid: set or print identifier of" "current host system." "" hostid(1)
.xx "" "hostname: set or print name of" "current host system." "" hostname(1)
.xx "" "sact: print" "current SCCS file editing activity." "" sact(1)
.xx "" "loadst: print" "current time and load statistics.." "" loadst(1)
.xx "" "clock: display the" "current time of day." "" clock(1W)
.xx "" "uname: get name of" "current UNIX system." "" uname(2)
.xx "" "whoami: print effective" "current user id." "" whoami(1)
.xx "" "the slot in the utmp file of the" "current user." "ttyslot: find" ttyslot(3C)
.xx "" "getcwd: get pathname of" "current working directory." "" getcwd(3C)
.xx "" "getwd: get" "current working directory pathname." "" getwd(3C)
.xx "``optimal'' cursor motion." "" "curses: screen functions with" "" curses(3X)
.xx "" "screen functions with ``optimal''" "cursor motion." "curses:" curses(3X)
.xx "" "curve: fast interactive cubic" "curve display." "" curve(1d)
.xx "display." "" "curve: fast interactive cubic curve" "" curve(1d)
.xx "" "spline: interpolate smooth" "curve." "" spline(1)
.xx "the user." "" "cuserid: get character login name of" "" cuserid(3S)
.xx "line of a file." "" "cut: cut out selected fields of each" "" cut(1)
.xx "of a file." "cut:" "cut out selected fields of each line" "" cut(1)
.xx "troff." "" "cw: prepare constant-width text for" "" cw(1)
.xx "" "constant-width text prepared by" "cw(1) for troff." "checkcw: verifies" checkcw(1)
.xx "reference." "" "cxref: generate C program cross" "" cxref(1)
.xx "" "continue:" "cycle in loop." "" csh(1)
.xx "" "continue:" "cycle in loop." "" sh(1)
.xx "" "heme: depthcued display of the" "Cytochrome P450 protein molecule." "" heme(1d)
.xx "" "cron: clock" "daemon." "" cron(1M)
.xx "" "routed: network routing" "daemon." "" routed(1M)
.xx "" "timed: time server" "daemon." "" timed(1M)
.xx "" "xnsd: network utility" "daemon." "" xnsd(1M)
.xx "" "nfsd, biod: NFS" "daemons." "" nfsd(1M)
.xx "" "nfssvc, async_daemon: NFS" "daemons." "" nfssvc(2)
.xx "" "runacct: run" "daily accounting." "" runacct(1M)
.xx "" "bootp: server for" "DARPA Bootstrap Protocol (BOOTP)." "" bootp(1M)
.xx "Protocol server." "ftpd:" "DARPA Internet File Transfer" "" ftpd(1M)
.xx "mapper." "portmap:" "DARPA port to RPC program number" "" portmap(1M)
.xx "" "telnetd:" "DARPA TELNET protocol server." "" telnetd(1M)
.xx "server." "tftpd:" "DARPA Trivial File Transfer Protocol" "" tftpd(1M)
.xx "" "300s: handle special functions of" "DASI 300 and 300s terminals." "300," 300(1)
.xx "" "450: handle special functions of the" "DASI 450 terminal." "" 450(1)
.xx "" "flow: display of complex scientific" "data base." "" flow(1d)
.xx "" "newaliases: rebuild the" "data base for the mail aliases file." "" newaliases(1)
.xx "" "hosts: host name" "data base." "" hosts(4)
.xx "" "networks: network name" "data base." "" networks(4)
.xx "" "ttytype:" "data base of terminal types by port." "" ttytype(4)
.xx "" "protocols: protocol name" "data base." "" protocols(4)
.xx "" "rpc: rpc program number" "data base." "" rpc(4)
.xx "" "services: service name" "data base." "" services(4)
.xx "" "store, delete, firstkey, nextkey:" "data base subroutines." "/fetch," dbm(3X)
.xx "" "dbm_error, dbm_clearerr:" "data base subroutines." "/dbm_nextkey," ndbm(3X)
.xx "" "termcap: terminal capability" "data base." "" termcap(4)
.xx "" "ypcat: print values in a YP" "data base." "" ypcat(1)
.xx "" "blt: block transfer" "data." "" blt(3C)
.xx "" "eval: re-evaluate shell" "data." "" csh(1)
.xx "" "plock: lock process, text, or" "data in memory." "" plock(2)
.xx "" "spray: scatter" "data in order to check the network." "" spray(3X)
.xx "" "prof: display profile" "data." "" prof(1)
.xx "" "xdr: library routines for external" "data representation." "" xdr(3R)
.xx "" "stat:" "data returned by stat system call." "" stat(5)
.xx "" "brk, sbrk: change" "data segment space allocation." "" brk(2)
.xx "" "eval: re-evaluate shell" "data." "" sh(1)
.xx "" "null:" "data sink." "" null(7)
.xx "" "types: primitive system" "data types." "" types(5)
.xx "" "create or extend bibliographic" "database." "addbib:" addbib(1)
.xx "" "ypfiles: the yellowpages" "database and directory structure." "" ypfiles(4)
.xx "" "dbadd: add an entry to a" "database." "" dbadd(1)
.xx "" "dbcreate: create a" "database." "" dbcreate(1)
.xx "" "dblist: list information about the" "database." "" dblist(1)
.xx "" "dbprint: print a" "database entry." "" dbprint(1)
.xx "" "ethers: ethernet address to hostname" "database." "" ethers(4)
.xx "" "dbbuild: build a" "database from a script." "" dbbuild(1)
.xx "" "join: relational" "database operator." "" join(1)
.xx "" "roffbib: run off bibliographic" "database." "" roffbib(1)
.xx "" "sortbib: sort bibliographic" "database." "" sortbib(1)
.xx "" "build and install yellow pages" "database." "ypinit:" ypinit(1M)
.xx "" "ypmake: rebuild yellow pages" "database." "" ypmake(1M)
.xx "" "udp: Internet User" "Datagram Protocol." "" udp(7P)
.xx "" "gettimeofday: get" "date and time." "" gettimeofday(3B)
.xx "" "gmtime, asctime, tzset: convert" "date and time to string." "/localtime," ctime(3C)
.xx "" "date: print and set the" "date." "" date(1)
.xx "" "rc.getdate: user-configurable system" "date initialization." "" rc.getdate(1M)
.xx "" "" "date: print and set the date." "" date(1)
.xx "" "clock: display the current time of" "day." "" clock(1W)
.xx "" "motd: message of the" "day." "" motd(4)
.xx "" "" "dbadd: add an entry to a database." "" dbadd(1)
.xx "script." "" "dbbuild: build a database from a" "" dbbuild(1)
.xx "" "" "dbcreate: create a database." "" dbcreate(1)
.xx "database." "" "dblist: list information about the" "" dblist(1)
.xx "" "makedbm: make a yellow pages" "dbm file." "" makedbm(1M)
.xx "" "/dbm_nextkey, dbm_error," "dbm_clearerr: data base subroutines." "" ndbm(3X)
.xx "dbm_delete, dbm_firstkey,/" "dbm_open," "dbm_close, dbm_fetch, dbm_store," "" ndbm(3X)
.xx "" "dbm_close, dbm_fetch, dbm_store," "dbm_delete, dbm_firstkey,/" "dbm_open," ndbm(3X)
.xx "" "/dbm_firstkey, dbm_nextkey," "dbm_error, dbm_clearerr: data base/" "" ndbm(3X)
.xx "dbm_firstkey,/" "dbm_open, dbm_close," "dbm_fetch, dbm_store, dbm_delete," "" ndbm(3X)
.xx "" "/dbm_fetch, dbm_store, dbm_delete," "dbm_firstkey, dbm_nextkey,/" "" ndbm(3X)
.xx "firstkey, nextkey: data base/" "" "dbminit, fetch, store, delete," "" dbm(3X)
.xx "" "dbm_store, dbm_delete, dbm_firstkey," "dbm_nextkey, dbm_error,/" "/dbm_fetch," ndbm(3X)
.xx "dbm_store, dbm_delete,/" "" "dbm_open, dbm_close, dbm_fetch," "" ndbm(3X)
.xx "" "dbm_open, dbm_close, dbm_fetch," "dbm_store, dbm_delete, dbm_firstkey,/" "" ndbm(3X)
.xx "" "" "dbprint: print a database entry." "" dbprint(1)
.xx "" "" "dbx: debugger." "" dbx(1)
.xx "" "" "dc: desk calculator." "" dc(1)
.xx "" "" "dd: convert and copy a file." "" dd(1)
.xx "" "getibent, ibnflags: package for" "dealing with ibtab files." "/endibent," ibtab(3N)
.xx "" "adb:" "debugger." "" adb(1)
.xx "" "dbx:" "debugger." "" dbx(1)
.xx "" "edge: window-based" "debugger." "" edge(1G)
.xx "" "fsdb: Bell file system" "debugger." "" fsdb(1M)
.xx "(_d_gcvt): convert/" "ecvt" "(_d_ecvt), fcvt (_d_fcvt), gcvt" "" ecvt(3C)
.xx "" "" "default: catchall clause in switch." "" csh(1)
.xx "" "makemap: make the" "default color map." "" makemap(1W)
.xx "" "kernel: install a" "default kernel." "" kernel(1M)
.xx "" "eqnchar: special character" "definitions for eqn and neqn." "" eqnchar(5)
.xx "" "mkutmp, rmutmp: make and" "delete /etc/utmp entry." "" utmp(3N)
.xx "subroutines." "dbminit, fetch, store," "delete, firstkey, nextkey: data base" "" dbm(3X)
.xx "" "queue system to a pristine state by" "deleting printers." "/reset the lp" preset(1M)
.xx "" "basename, dirname:" "deliver portions of path names." "" basename(1)
.xx "" "tail:" "deliver the last part of a file." "" tail(1)
.xx "" "the delta commentary of an SCCS" "delta." "cdc: change" cdc(1)
.xx "" "delta: make a" "delta (change) to an SCCS file." "" delta(1)
.xx "" "cdc: change the" "delta commentary of an SCCS delta." "" cdc(1)
.xx "" "rmdel: remove a" "delta from an SCCS file." "" rmdel(1)
.xx "SCCS file." "" "delta: make a delta (change) to an" "" delta(1)
.xx "" "comb: combine SCCS" "deltas." "" comb(1)
.xx "" "zshadejet: shading and z-buffering" "demo." "/zshadeabstract, zshadeegg," zshadecar(1d)
.xx "demonstration programs." "" "demomakemap: loads colors for mex" "" demomakemap(1d)
.xx "shadows." "light:" "demonstrates real-time lighting and" "" light(1d)
.xx "" "showmap, cedit, interp: color map" "demonstration programs." "" colordemos(1d)
.xx "" "demomakemap: loads colors for mex" "demonstration programs." "" demomakemap(1d)
.xx "" "mesg: permit or" "deny messages." "" mesg(1)
.xx "" "mkdepend: compute header file" "dependencies." "" mkdepend(1)
.xx "" "tset: terminal" "dependent initialization." "" tset(1)
.xx "P450 protein molecule." "heme:" "depthcued display of the Cytochrome" "" heme(1d)
.xx "fighter." "jet:" "depthcued wireframe model of a jet" "" jet(1d)
.xx "space shuttle." "shuttle:" "depthcued wireframe model of the" "" shuttle(1d)
.xx "eqn constructs." "" "deroff: remove nroff/troff, tbl, and" "" deroff(1)
.xx "" "font:" "description files for troff." "" font(4)
.xx "" "troff:" "description of output language." "" troff(5)
.xx "" "close: close a file" "descriptor." "" close(2)
.xx "" "dup: duplicate an open file" "descriptor." "" dup(2)
.xx "" "dup2: duplicate a file" "descriptor." "" dup2(3B)
.xx "" "hasmntopt: get file system" "descriptor file entry." "/endmntent," getmntent(3C)
.xx "" "getdtablesize: get" "descriptor table size." "" getdtablesize(2)
.xx "" "dc:" "desk calculator." "" dc(1)
.xx "" "savedesktop: saves colors in ~/." "desktop." "" savedesktop(1W)
.xx "" "savedesktop: saves colors in" "~/.desktop." "" savedesktop(1W)
.xx "" "access:" "determine accessibility of a file." "" access(2)
.xx "" "file:" "determine file type." "" file(1)
.xx "" "serial port to an external graphics" "device." "devport: assign a" devport(1G)
.xx "" "drum: paging" "device." "" drum(7)
.xx "" "long lines for finite width output" "device." "fold: fold" fold(1)
.xx "" "ioctl: control" "device." "" ioctl(2)
.xx "" "devnm:" "device name." "" devnm(1M)
.xx "" "" "devnm: device name." "" devnm(1M)
.xx "external graphics device." "" "devport: assign a serial port to an" "" devport(1G)
.xx "blocks." "" "df: report number of free disk" "" df(1)
.xx "floating-point/" "ecvt (_d_ecvt), fcvt" "(_d_fcvt), gcvt (_d_gcvt): convert" "" ecvt(3C)
.xx "and interactive repair." "fsck," "dfsck: file system consistency check" "" fsck(1M)
.xx "" "ecvt (_d_ecvt), fcvt (_d_fcvt), gcvt" "(_d_gcvt): convert floating-point/" "" ecvt(3C)
.xx "format." "ps630: convert" "Diablo 630 print files to POSTSCRIPT" "" ps630(1)
.xx "autoconfiguration code." "autoconf:" "diagnostics from the" "" autoconf(7)
.xx "relinquish an out-going terminal/" "" "dial, undial: establish and" "" dial(3C)
.xx "" "ratfor: rational Fortran" "dialect." "" ratfor(1)
.xx "" "print wordy sentences; thesaurus for" "diction." "diction, explain:" diction(1)
.xx "sentences; thesaurus for diction." "" "diction, explain: print wordy" "" diction(1)
.xx "" "bdiff: big" "diff." "" bdiff(1)
.xx "" "" "diff: differential file comparator." "" diff(1)
.xx "comparison." "" "diff3: 3-way differential file" "" diff3(1)
.xx "" "sdiff: side-by-side" "difference program." "" sdiff(1)
.xx "" "diffmk: mark" "differences between files." "" diffmk(1)
.xx "" "diff:" "differential file comparator." "" diff(1)
.xx "" "diff3: 3-way" "differential file comparison." "" diff3(1)
.xx "files." "" "diffmk: mark differences between" "" diffmk(1)
.xx "" "" "dir: format of directories." "" dir(4)
.xx "" "" "dircmp: directory comparison." "" dircmp(1)
.xx "" "dir: format of" "directories." "" dir(4)
.xx "" "rm, rmdir: remove files or" "directories." "" rm(1)
.xx "" "cd: change working" "directory." "" cd(1)
.xx "" "chdir: change working" "directory." "" chdir(2)
.xx "" "chroot: change root" "directory." "" chroot(2)
.xx "" "uuclean: uucp spool" "directory clean-up." "" uuclean(1M)
.xx "" "dircmp:" "directory comparison." "" dircmp(1)
.xx "" "cd: change" "directory." "" csh(1)
.xx "" "chdir: change" "directory." "" csh(1)
.xx "version)." "ls: list contents of" "directory (enhanced Berkeley" "" ls(1)
.xx "system independent/" "getdents: read" "directory entries and put in a file" "" getdents(2)
.xx "" "dirent: file system independent" "directory entry." "" dirent(4)
.xx "" "unlink: remove" "directory entry." "" unlink(2)
.xx "" "chroot: change root" "directory for a command." "" chroot(1M)
.xx "" "/etc/mklost+found: make a lost+found" "directory for fsck." "" mklost+found(1M)
.xx "" "get pathname of current working" "directory." "getcwd:" getcwd(3C)
.xx "" "mkdir: make a" "directory." "" mkdir(1)
.xx "" "mkdir: make a" "directory." "" mkdir(2)
.xx "" "mvdir: move a" "directory." "" mvdir(1M)
.xx "" "pwd: working" "directory name." "" pwd(1)
.xx "" "seekdir, rewinddir, closedir:" "directory operations." "/telldir," directory(3B)
.xx "" "seekdir, rewinddir, closedir:" "directory operations." "/telldir," directory(3C)
.xx "file." "mknod: make a" "directory, or a special or ordinary" "" mknod(2)
.xx "" "getwd: get current working" "directory pathname." "" getwd(3C)
.xx "" "rmdir: remove a" "directory." "" rmdir(2)
.xx "" "scandir, alphasort: scan a" "directory." "" scandir(3B)
.xx "" "scandir, alphasort: scan a" "directory." "" scandir(3C)
.xx "" "cd: change" "directory." "" sh(1)
.xx "" "popd: pop shell" "directory stack." "" csh(1)
.xx "" "pushd: push shell" "directory stack." "" csh(1)
.xx "" "the yellowpages database and" "directory structure." "ypfiles:" ypfiles(4)
.xx "directory entry." "" "dirent: file system independent" "" dirent(4)
.xx "names." "basename," "dirname: deliver portions of path" "" basename(1)
.xx "" "enable," "disable: enable/disable LP printers." "" enable(1)
.xx "" "acct: enable or" "disable process accounting." "" acct(2)
.xx "" "unhash:" "discard command hash table." "" csh(1)
.xx "" "unset:" "discard shell variables." "" csh(1)
.xx "" "type, modes, speed, and line" "discipline." "getty: set terminal" getty(1M)
.xx "" "df: report number of free" "disk blocks." "" df(1)
.xx "" "iph: Interphase 2190 smd" "disk controller." "" iph(7)
.xx "" "sgilabel: print or update the SGI" "disk drive label." "" sgilabel(1M)
.xx "" "create a bootable unix floppy" "disk." "mkbootflp:" mkbootflp(1M)
.xx "" "du: summarize" "disk usage." "" du(1)
.xx "" "qic: st-506" "disk/tape controller." "" qic(7)
.xx "" "dsd: st-506" "disk/tape/floppy controller." "" dsd(7)
.xx "" "floppy: st-506" "disk/tape/floppy controller." "" floppy(7)
.xx "" "Interphase Storager 2 esdi/st-506" "disk/tape/floppy controller." "sii:" sii(7)
.xx "" "mount, umount: mount and" "dismount filesystems." "" mount(1M)
.xx "" "error: analyze and" "disperse compiler error messages." "" error(1)
.xx "model." "arch:" "display a simulated architectural" "" arch(1d)
.xx "" "ipaste:" "display an image file on the screen." "" ipaste(1W)
.xx "" "arp: address resolution" "display and control." "" arp(1M)
.xx "" "curve: fast interactive cubic curve" "display." "" curve(1d)
.xx "" "vi, view: screen oriented (visual)" "display editor based on ex." "" vi(1)
.xx "" "EMACS:" "display editor." "" emacs(1)
.xx "" "umask: change or" "display file creation mask." "" csh(1)
.xx "" "umask: change or" "display file creation mask." "" sh(1)
.xx "system." "domainname: set or" "display name of current domain" "" domainname(1)
.xx "base." "flow:" "display of complex scientific data" "" flow(1d)
.xx "" "cube: real-time" "display of famous cube puzzle." "" cube(1d)
.xx "protein molecule." "heme: depthcued" "display of the Cytochrome P450" "" heme(1d)
.xx "" "prof:" "display profile data." "" prof(1)
.xx "" "rain: animated raindrops" "display." "" rain(6)
.xx "" "ulimit: change or" "display size limits." "" sh(1)
.xx "" "worms: animate worms on a" "display terminal." "" worms(6)
.xx "map." "showmap:" "display the contents of the color" "" showmap(1W)
.xx "" "clock:" "display the current time of day." "" clock(1W)
.xx "" "loadav: graphically" "display the system load average." "" loadav(1W)
.xx "" "dogscore:" "displays the dogfight score board." "" dogscore(1d)
.xx "" "hypot: Euclidean" "distance function." "" hypot(3M)
.xx "" "/seed48, lcong48: generate uniformly" "distributed pseudo-random numbers." "" drand48(3C)
.xx "rectangles." "showpie: show the" "division of a window into" "" showpie(1W)
.xx "" "create a subject-page index for a" "document." "ndx:" ndx(1)
.xx "" "analyze surface characteristics of a" "document." "style:" style(1)
.xx "" "generate a list of subjects from a" "document." "subj:" subj(1)
.xx "macros." "checkmm: checks" "documents formatted with the mm" "" checkmm(1)
.xx "" "mm, osdd, checkmm: print/check" "documents formatted with the MM/" "" mm(1)
.xx "macros." "mm: prints" "documents formatted with the mm" "" mm(1)
.xx "" "the MM macro package for formatting" "documents." "mm:" mm(5)
.xx "" "mmt: typeset" "documents." "" mmt(1)
.xx "" "and insert literature references in" "documents." "refer: find" refer(1)
.xx "" "mmt, mvt: typeset" "documents, view graphs, and slides." "" mmt(1)
.xx "prctmp,/" "chargefee, ckpacct," "dodisk, lastlogin, monacct, nulladm," "" acctsh(1M)
.xx "flight simulator and airshow/" "" "dog: cooperative or competitive" "" dog(1d)
.xx "" "controller's view of the Ethernet" "dogfight." "radar: flight" radar(1d)
.xx "" "dogscore: displays the" "dogfight score board." "" dogscore(1d)
.xx "" "armchair pilot's view of the" "dogfight." "shadow: full-screen" shadow(1d)
.xx "score board." "" "dogscore: displays the dogfight" "" dogscore(1d)
.xx "" "w: who is on and what they are" "doing." "" w(1)
.xx "" "whodo: who is" "doing what." "" whodo(1M)
.xx "" "get/set name of current" "domain." "/setdomainname:" getdomainname(2)
.xx "" "set or display name of current" "domain system." "domainname:" domainname(1)
.xx "current domain system." "" "domainname: set or display name of" "" domainname(1)
.xx "" "" "done: terminate loop." "" sh(1)
.xx "" "rogue: exploring the Dungeons of" "Doom." "" rogue(6)
.xx "connection." "shutdown: shut" "down part of a full-duplex" "" shutdown(2)
.xx "text." "text:" "dragging and scrolling of pixel" "" text(1d)
.xx "mrand48, jrand48, srand48, seed48,/" "" "drand48, erand48, lrand48, nrand48," "" drand48(3C)
.xx "" "grap: pic preprocessor for" "drawing graphs." "" grap(1)
.xx "" "pic: troff preprocessor for" "drawing simple pictures." "" pic(1)
.xx "" "arithmetic: provide" "drill in number facts." "" arithmetic(6)
.xx "" "print or update the SGI disk" "drive label." "sgilabel:" sgilabel(1M)
.xx "" "iib: initialize ib" "driver." "" iib(1M)
.xx "" "nx: XNS Ethernet" "driver." "" nx(7)
.xx "" "pty: pseudo terminal" "driver." "" pty(7)
.xx "" "surface editor and rendering" "driver." "surfcar, surfegg:" surfcar(1d)
.xx "" "nterm: terminal" "driving tables for nroff." "" nterm(5)
.xx "" "" "drum: paging device." "" drum(7)
.xx "controller." "" "dsd: st-506 disk/tape/floppy" "" dsd(7)
.xx "" "" "du: summarize disk usage." "" du(1)
.xx "" "" "duart: on board serial ports." "" duart(7)
.xx "" "od: octal" "dump." "" od(1)
.xx "" "capture:" "dump screen image to file." "" capture(1W)
.xx "" "rogue: exploring the" "Dungeons of Doom." "" rogue(6)
.xx "descriptor." "" "dup: duplicate an open file" "" dup(2)
.xx "" "" "dup2: duplicate a file descriptor." "" dup2(3B)
.xx "" "dup2:" "duplicate a file descriptor." "" dup2(3B)
.xx "" "dup:" "duplicate an open file descriptor." "" dup(2)
.xx "" "cut: cut out selected fields of" "each line of a file." "" cut(1)
.xx "" "the alien invaders attack the" "earth." "aliens, alienslog:" aliens(6)
.xx "" "echo:" "echo arguments." "" csh(1)
.xx "" "echo:" "echo arguments." "" echo(1)
.xx "" "" "echo: echo arguments." "" csh(1)
.xx "" "" "echo: echo arguments." "" echo(1)
.xx "hosts." "ping: send ICMP" "ECHO_REQUEST packets to network" "" ping(1M)
.xx "(_d_gcvt): convert floating-point/" "" "ecvt (_d_ecvt), fcvt (_d_fcvt), gcvt" "" ecvt(3C)
.xx "" "" "ed: text editor." "" ed(1)
.xx "" "end, etext," "edata: last locations in program." "" end(3C)
.xx "" "" "edge: window-based debugger." "" edge(1G)
.xx "" "cedit:" "edit colors on the screen." "" cedit(1W)
.xx "" "ex," "edit: text editor." "" ex(1)
.xx "" "sact: print current SCCS file" "editing activity." "" sact(1)
.xx "" "surfcar, surfegg: surface" "editor and rendering driver." "" surfcar(1d)
.xx "" "screen oriented (visual) display" "editor based on ex." "vi, view:" vi(1)
.xx "" "ed: text" "editor." "" ed(1)
.xx "" "EMACS: display" "editor." "" emacs(1)
.xx "" "ex, edit: text" "editor." "" ex(1)
.xx "windows." "emacsedit: an" "editor for use in Emacs shell" "" emacsedit(1)
.xx "" "ld: link" "editor." "" ld(1)
.xx "" "a.out: assembler and link" "editor output." "" a.out(4)
.xx "" "sed: stream" "editor." "" sed(1)
.xx "" "whoami: print" "effective current user id." "" whoami(1)
.xx "" "effective user, real group, and" "effective group IDs." "/get real user," getuid(2)
.xx "" "/getgid, getegid: get real user," "effective user, real group, and/" "" getuid(2)
.xx "system inode." "" "efsinode: format of an Extent file" "" efsinode(4)
.xx "pattern." "grep," "egrep, fgrep: search a file for a" "" grep(1)
.xx "" "insque, remque: insert/remove" "element from a queue." "" insque(3B)
.xx "" "" "elif, else: alternative commands." "" sh(1)
.xx "" "" "else: alternative commands." "" csh(1)
.xx "" "elif," "else: alternative commands." "" sh(1)
.xx "" "" "EMACS: display editor." "" emacs(1)
.xx "" "emacsedit: an editor for use in" "Emacs shell windows." "" emacsedit(1)
.xx "Emacs shell windows." "" "emacsedit: an editor for use in" "" emacsedit(1)
.xx "" "t3279: IBM 3270 terminal" "emulator." "" t3279(1C)
.xx "printers." "" "enable, disable: enable/disable LP" "" enable(1)
.xx "accounting." "acct:" "enable or disable process" "" acct(2)
.xx "" "enable, disable:" "enable/disable LP printers." "" enable(1)
.xx "transmission/" "uuencode, uudecode:" "encode/decode a binary file for" "" uuencode(1C)
.xx "program." "" "end, etext, edata: last locations in" "" end(3C)
.xx "" "logout:" "end session." "" csh(1)
.xx "" "" "end: terminate loop." "" csh(1)
.xx "" "/getgrgid, getgrnam, setgrent," "endgrent: get group file entry." "" getgrent(3C)
.xx "" "/gethostent, sethostent," "endhostent: get network host entry." "" gethostbyname(3N)
.xx "package for/" "setibfile, setibent," "endibent, getibent, ibnflags:" "" ibtab(3N)
.xx "" "" "endif: terminate conditional." "" csh(1)
.xx "" "setmntent, getmntent, addmntent," "endmntent, hasmntopt: get file/" "" getmntent(3C)
.xx "" "/getnetbyname, setnetent," "endnetent: get network entry." "" getnetent(3N)
.xx "group/" "getnetgrent, setnetgrent," "endnetgrent, innetgr: get network" "" getnetgrent(3R)
.xx "" "socket: create an" "endpoint for communication - TCP." "" socket(2)
.xx "" "/getprotobyname, setprotoent," "endprotoent: get protocol entry." "" getprotoent(3N)
.xx "" "/getpwuid, getpwnam, setpwent," "endpwent: get password file entry." "" getpwent(3C)
.xx "" "/getrpcbynumber, setrpcent," "endrpcent: get rpc entry." "" getrpcent(3R)
.xx "" "/getservbyname, setservent," "endservent: get service entry." "" getservent(3N)
.xx "" "" "endsw: terminate switch." "" csh(1)
.xx "" "/getutline, pututline, setutent," "endutent, utmpname: access utmp file/" "" getut(3C)
.xx "" "number: convert Arabic numerals to" "English." "" number(6)
.xx "" "ls: list contents of directory" "(enhanced Berkeley version)." "" ls(1)
.xx "POSTSCRIPT format for printing." "" "enscript: convert text files to" "" enscript(1)
.xx "" "getdents: read directory" "entries and put in a file system/" "" getdents(2)
.xx "" "nlist: get" "entries from name list." "" nlist(3C)
.xx "" "linenum: line number" "entries in a common object file." "" linenum(4)
.xx "" "man, manprog: print" "entries in this manual." "" man(1)
.xx "" "man: macros for formatting" "entries in this manual." "" man(5)
.xx "" "dbprint: print a database" "entry." "" dbprint(1)
.xx "" "file system independent directory" "entry." "dirent:" dirent(4)
.xx "" "utmp, wtmp: utmp and wtmp" "entry formats." "" utmp(4)
.xx "" "setgrent, endgrent: get group file" "entry." "/getgrgid, getgrnam," getgrent(3C)
.xx "" "endhostent: get network host" "entry." "/gethostent, sethostent," gethostbyname(3N)
.xx "" "get file system descriptor file" "entry." "/endmntent, hasmntopt:" getmntent(3C)
.xx "" "setnetent, endnetent: get network" "entry." "/getnetbyaddr, getnetbyname," getnetent(3N)
.xx "" "innetgr: get network group" "entry." "/setnetgrent, endnetgrent," getnetgrent(3R)
.xx "" "endprotoent: get protocol" "entry." "/getprotobyname, setprotoent," getprotoent(3N)
.xx "" "endpwent: get password file" "entry." "/getpwnam, setpwent," getpwent(3C)
.xx "" "setrpcent, endrpcent: get rpc" "entry." "/getrpcbynumber," getrpcent(3R)
.xx "" "setservent, endservent: get service" "entry." "/getservbyname," getservent(3N)
.xx "" "endutent, utmpname: access utmp file" "entry." "/pututline, setutent," getut(3C)
.xx "" "extcentry: extract FORTRAN-callable" "entry points from a C file." "" extcentry(1)
.xx "" "putpwent: write password file" "entry." "" putpwent(3C)
.xx "" "dbadd: add an" "entry to a database." "" dbadd(1)
.xx "" "unlink: remove directory" "entry." "" unlink(2)
.xx "" "rmutmp: make and delete /etc/utmp" "entry." "mkutmp," utmp(3N)
.xx "execution." "" "env: set environment for command" "" env(1)
.xx "" "" "environ: user environment." "" environ(5)
.xx "" "profile: setting up a Bourne Shell" "environment at login time." "" profile(4)
.xx "" "setenv: set variable in" "environment." "" csh(1)
.xx "" "environ: user" "environment." "" environ(5)
.xx "" "env: set" "environment for command execution." "" env(1)
.xx "" "login, cshrc: setting up a C Shell" "environment." "" login(4)
.xx "" "getenv: return value for" "environment name." "" getenv(3C)
.xx "" "printenv: print out the" "environment." "" printenv(1)
.xx "" "export: add shell variables to the" "environment." "" sh(1)
.xx "" "unsetenv: remove" "environment variables." "" csh(1)
.xx "" "special character definitions for" "eqn and neqn." "eqnchar:" eqnchar(5)
.xx "" "deroff: remove nroff/troff, tbl, and" "eqn constructs." "" deroff(1)
.xx "troff." "" "eqn: format mathematical text for" "" eqn(1)
.xx "definitions for eqn and neqn." "" "eqnchar: special character" "" eqnchar(5)
.xx "" "hosts." "equiv: list of trusted hosts." "" hosts.equiv(4)
.xx "jrand48, srand48, seed48,/" "drand48," "erand48, lrand48, nrand48, mrand48," "" drand48(3C)
.xx "complementary error function." "" "erf, erfc: error function and" "" erf(3M)
.xx "complementary error function." "erf," "erfc: error function and" "" erf(3M)
.xx "error messages." "perror," "errno, sys_errlist, sys_nerr: system" "" perror(3C)
.xx "error messages." "" "error: analyze and disperse compiler" "" error(1)
.xx "error function." "erf, erfc:" "error function and complementary" "" erf(3M)
.xx "" "error function and complementary" "error function." "erf, erfc:" erf(3M)
.xx "source." "mkstr: create an" "error message file by massaging C" "" mkstr(1)
.xx "" "error: analyze and disperse compiler" "error messages." "" error(1)
.xx "" "errno, sys_errlist, sys_nerr: system" "error messages." "perror," perror(3C)
.xx "" "introduction to system calls and" "error numbers." "intro:" intro(2)
.xx "" "matherr:" "error-handling function." "" matherr(3M)
.xx "" "spellin, hashcheck: find spelling" "errors." "spell, hashmake," spell(1)
.xx "" "for intercepting FORTRAN runtime" "errors.." "userexit: user routine" userexit(3X)
.xx "" "" "esac: terminate case." "" sh(1)
.xx "" "autorobots:" "escape from the automatic robots." "" autorobots(6)
.xx "" "robots:" "escape from the robots." "" robots(6)
.xx "" "chase: try to" "escape the killer robots." "" chase(6)
.xx "" "sii: Interphase Storager 2" "esdi/st-506 disk/tape/floppy/" "" sii(7)
.xx "out-going terminal/" "dial, undial:" "establish and relinquish an" "" dial(3C)
.xx "" "setmnt:" "establish mount table." "" setmnt(1M)
.xx "directory for fsck." "" "/etc/mklost+found: make a lost+found" "" mklost+found(1M)
.xx "table." "" "/etc/mtab: mounted file system" "" mtab(4)
.xx "" "mkutmp, rmutmp: make and delete" "/etc/utmp entry." "" utmp(3N)
.xx "program." "end," "etext, edata: last locations in" "" end(3C)
.xx "Ethernet." "" "ether: monitor traffic on the" "" ether(3X)
.xx "ether_hostton,/" "ether_ntoa," "ether_aton, ether_ntohost," "" ethers(3R)
.xx "address/" "/ether_aton, ether_ntohost," "ether_hostton, ether_line: ethernet" "" ethers(3R)
.xx "" "/ether_ntohost, ether_hostton," "ether_line: ethernet address mapping/" "" ethers(3R)
.xx "" "/ether_hostton, ether_line:" "ethernet address mapping operations." "" ethers(3R)
.xx "database." "ethers:" "ethernet address to hostname" "" ethers(4)
.xx "" "flight controller's view of the" "Ethernet dogfight." "radar:" radar(1d)
.xx "" "nx: XNS" "Ethernet driver." "" nx(7)
.xx "" "ether: monitor traffic on the" "Ethernet." "" ether(3X)
.xx "" "xnsioctl: ioctls for XNS and" "Ethernet." "" xnsioctl(3N)
.xx "ether_ntohost, ether_hostton,/" "" "ether_ntoa, ether_aton," "" ethers(3R)
.xx "ether_line:/" "ether_ntoa, ether_aton," "ether_ntohost, ether_hostton," "" ethers(3R)
.xx "database." "" "ethers: ethernet address to hostname" "" ethers(4)
.xx "" "hypot:" "Euclidean distance function." "" hypot(3M)
.xx "" "" "eval: re-evaluate shell data." "" csh(1)
.xx "" "" "eval: re-evaluate shell data." "" sh(1)
.xx "" "expr:" "evaluate arguments as an expression." "" expr(1)
.xx "" "test: condition" "evaluation command." "" sh(1)
.xx "" "test: condition" "evaluation command." "" test(1)
.xx "" "history: print history" "event list." "" csh(1)
.xx "" "" "ex, edit: text editor." "" ex(1)
.xx "" "(visual) display editor based on" "ex." "vi, view: screen oriented" vi(1)
.xx "" "fpsigset: C floating point" "exception handling system." "" fpsigset(3C)
.xx "" "/FORTRAN and Pascal floating-point" "exception handling system." "" setfpe(3X)
.xx "command." "" "exec: overlay shell with specified" "" csh(1)
.xx "command." "" "exec: overlay shell with specified" "" sh(1)
.xx "execlp, execvp: execute a file." "" "execl, execv, execle, execve," "" exec(2)
.xx "execute a file." "execl, execv," "execle, execve, execlp, execvp:" "" exec(2)
.xx "" "execl, execv, execle, execve," "execlp, execvp: execute a file." "" exec(2)
.xx "" "execle, execve, execlp, execvp:" "execute a file." "execl, execv," exec(2)
.xx "" "repeat:" "execute command repeatedly." "" csh(1)
.xx "" "construct argument list(s) and" "execute command." "xargs:" xargs(1)
.xx "" "at:" "execute commands at a later time." "" at(1)
.xx "" "regcmp, regex: compile and" "execute regular expression." "" regcmp(3X)
.xx "" "env: set environment for command" "execution." "" env(1)
.xx "" "sleep: suspend" "execution for an interval." "" sleep(1)
.xx "" "sleep: suspend" "execution for interval." "" sleep(3C)
.xx "" "resume_prof, suspend_prof: prepare" "execution profile." "monitor," monitor(3C)
.xx "" "rexecd: remote" "execution server." "" rexecd(1M)
.xx "" "profil:" "execution time profile." "" profil(2)
.xx "" "uux: unix to unix command" "execution." "" uux(1C)
.xx "" "xcmd, xsh: remote" "execution via XNS." "" xcmd(3N)
.xx "" "xx, xlogin: remote" "execution via XNS." "" xx(1C)
.xx "execvp: execute a file." "execl," "execv, execle, execve, execlp," "" exec(2)
.xx "file." "execl, execv, execle," "execve, execlp, execvp: execute a" "" exec(2)
.xx "" "execv, execle, execve, execlp," "execvp: execute a file." "execl," exec(2)
.xx "calls." "link, unlink:" "exercise link and unlink system" "" link(1M)
.xx "" "create a new file or rewrite an" "existing one." "creat:" creat(2)
.xx "" "" "exit, _exit: terminate process." "" exit(2)
.xx "" "breaksw:" "exit from switch." "" csh(1)
.xx "" "" "exit: leave shell." "" csh(1)
.xx "" "" "exit: leave shell." "" sh(1)
.xx "" "exit," "_exit: terminate process." "" exit(2)
.xx "" "break:" "exit while/for loop." "" sh(1)
.xx "" "break:" "exit while/foreach loop." "" csh(1)
.xx "(_llog10), pow (_lpow), sqrt/" "" "exp (_lexp), log (_llog), log10" "" exp(3M)
.xx "" "glob: filename" "expand argument list." "" csh(1)
.xx "" "pack, pcat, unpack: compress and" "expand files." "" pack(1)
.xx "thesaurus for diction." "diction," "explain: print wordy sentences;" "" diction(1)
.xx "" "adventure: an" "exploration game." "" adventure(6)
.xx "" "rogue:" "exploring the Dungeons of Doom." "" rogue(6)
.xx "square/" "/pow (_lpow), sqrt (_lsqrt):" "exponential, logarithm, power," "" exp(3M)
.xx "environment." "" "export: add shell variables to the" "" sh(1)
.xx "" "exports: NFS filesystems being" "exported." "" exports(4)
.xx "exported." "" "exports: NFS filesystems being" "" exports(4)
.xx "expression." "" "expr: evaluate arguments as an" "" expr(1)
.xx "routines." "regexp: regular" "expression compile and match" "" regexp(5)
.xx "" "regcmp: regular" "expression compile." "" regcmp(1)
.xx "" "expr: evaluate arguments as an" "expression." "" expr(1)
.xx "" "regex: compile and execute regular" "expression." "regcmp," regcmp(3X)
.xx "entry points from a C file." "" "extcentry: extract FORTRAN-callable" "" extcentry(1)
.xx "" "addbib: create or" "extend bibliographic database." "" addbib(1)
.xx "" "greek: graphics for the" "extended TTY-37 type-box." "" greek(5)
.xx "" "Extent file system: layout of the" "Extent file system." "" efs(4)
.xx "" "efsinode: format of an" "Extent file system inode." "" efsinode(4)
.xx "Extent file system." "" "Extent file system: layout of the" "" efs(4)
.xx "" "xdr: library routines for" "external data representation." "" xdr(3R)
.xx "" "devport: assign a serial port to an" "external graphics device." "" devport(1G)
.xx "points from a C file." "extcentry:" "extract FORTRAN-callable entry" "" extcentry(1)
.xx "implement shared strings." "xstr:" "extract strings from C programs to" "" xstr(1)
.xx "for the 68010/68020." "cc, pc," "f77: C, Pascal and FORTRAN compilers" "" cc(1)
.xx "68010/68020." "" "f77: FORTRAN compiler for the" "" f77(1)
.xx "" "/ceil (_lceil), fmod (_lfmod)," "fabs (_lfabs): floor, ceiling,/" "" floor(3M)
.xx "" "introduction to networking" "facilities." "networking:" intro(7P)
.xx "" "report inter-process communication" "facilities status." "ipcs:" ipcs(1)
.xx "" "factor:" "factor a number." "" factor(1)
.xx "" "" "factor: factor a number." "" factor(1)
.xx "" "true," "false: provide truth values." "" true(1)
.xx "" "inet: Internet protocol" "family." "" inet(7P)
.xx "" "cube: real-time display of" "famous cube puzzle." "" cube(1d)
.xx "display." "curve:" "fast interactive cubic curve" "" curve(1d)
.xx "" "abort: generate an IOT" "fault." "" abort(3C)
.xx "stream." "" "fclose, fflush: close or flush a" "" fclose(3S)
.xx "" "" "fcntl: file control." "" fcntl(2)
.xx "" "" "fcntl: file control options." "" fcntl(5)
.xx "convert/" "ecvt (_d_ecvt)," "fcvt (_d_fcvt), gcvt (_d_gcvt):" "" ecvt(3C)
.xx "" "fopen, freopen," "fdopen: open a stream." "" fopen(3S)
.xx "status inquiries." "ferror," "feof, clearerr, fileno: stream" "" ferror(3S)
.xx "stream status inquiries." "" "ferror, feof, clearerr, fileno:" "" ferror(3S)
.xx "nextkey: data base/" "dbminit," "fetch, store, delete, firstkey," "" dbm(3X)
.xx "" "head: give first" "few lines." "" head(1)
.xx "" "fclose," "fflush: close or flush a stream." "" fclose(3S)
.xx "" "" "ffs: bit string operation." "" ffs(3B)
.xx "from stream." "getc, getchar," "fgetc, getw: get character or word" "" getc(3S)
.xx "" "gets," "fgets: get a string from a stream." "" gets(3S)
.xx "" "grep, egrep," "fgrep: search a file for a pattern." "" grep(1)
.xx "" "" "fi: terminate conditional." "" sh(1)
.xx "" "iset: change the type" "field of an image file." "" iset(1W)
.xx "" "cut: cut out selected" "fields of each line of a file." "" cut(1)
.xx "" "depthcued wireframe model of a jet" "fighter." "jet:" jet(1d)
.xx "" "utime: set" "file access and modification times." "" utime(2)
.xx "" "access: determine accessibility of a" "file." "" access(2)
.xx "" "cpio: copy" "file archives in and out." "" cpio(1)
.xx "" "rcs: change RCS" "file attributes." "" rcs(1)
.xx "" "mkstr: create an error message" "file by massaging C source." "" mkstr(1)
.xx "" "capture: dump screen image to" "file." "" capture(1W)
.xx "" "check: check RCS status of a" "file." "" check(1)
.xx "" "pwck, grpck: password/group" "file checkers." "" pwck(1M)
.xx "" "chmod: change mode of" "file." "" chmod(2)
.xx "" "chown: change owner and group of a" "file." "" chown(2)
.xx "" "diff: differential" "file comparator." "" diff(1)
.xx "" "diff3: 3-way differential" "file comparison." "" diff3(1)
.xx "" "fcntl:" "file control." "" fcntl(2)
.xx "" "fcntl:" "file control options." "" fcntl(5)
.xx "" "rcp: remote" "file copy." "" rcp(1C)
.xx "" "public unix system-to-unix system" "file copy." "uuto, uupick:" uuto(1C)
.xx "" "xcp: remote" "file copy." "" xcp(1C)
.xx "" "core: format of core image" "file." "" core(4)
.xx "" "umask: change or display" "file creation mask." "" csh(1)
.xx "" "umask: change or display" "file creation mask." "" sh(1)
.xx "" "umask: set and get" "file creation mask." "" umask(2)
.xx "" "source: read commands from" "file." "" csh(1)
.xx "" "cshrc: csh system-wide .login" "file." "" cshrc(4)
.xx "" "selected fields of each line of a" "file." "cut: cut out" cut(1)
.xx "" "dd: convert and copy a" "file." "" dd(1)
.xx "" "make a delta (change) to an SCCS" "file." "delta:" delta(1)
.xx "" "mkdepend: compute header" "file dependencies." "" mkdepend(1)
.xx "" "close: close a" "file descriptor." "" close(2)
.xx "" "dup: duplicate an open" "file descriptor." "" dup(2)
.xx "" "dup2: duplicate a" "file descriptor." "" dup2(3B)
.xx "" "" "file: determine file type." "" file(1)
.xx "" "sact: print current SCCS" "file editing activity." "" sact(1)
.xx "" "setgrent, endgrent: get group" "file entry." "/getgrgid, getgrnam," getgrent(3C)
.xx "" "get file system descriptor" "file entry." "/endmntent, hasmntopt:" getmntent(3C)
.xx "" "setpwent, endpwent: get password" "file entry." "/getpwuid, getpwnam," getpwent(3C)
.xx "" "endutent, utmpname: access utmp" "file entry." "/pututline, setutent," getut(3C)
.xx "" "putpwent: write password" "file entry." "" putpwent(3C)
.xx "" "execve, execlp, execvp: execute a" "file." "execl, execv, execle," exec(2)
.xx "" "entry points from a C" "file." "/extract FORTRAN-callable" extcentry(1)
.xx "" "ctags: maintain a tags" "file for a C program." "" ctags(1)
.xx "" "grep, egrep, fgrep: search a" "file for a pattern." "" grep(1)
.xx "" "aliases: aliases" "file for sendmail." "" aliases(4)
.xx "" "/uudecode: encode/decode a binary" "file for transmission via mail." "" uuencode(1C)
.xx "" "acct: per-process accounting" "file format." "" acct(4)
.xx "" "afm: Adobe POSTSCRIPT font metrics" "file format." "" afm(4)
.xx "" "ar: archive (library)" "file format." "" ar(4)
.xx "" "pnch:" "file format for card images." "" pnch(4)
.xx "" "postscript: print" "file format." "" postscript(4)
.xx "" "intro: introduction to" "file formats." "" intro(4)
.xx "" "report on character frequencies in a" "file." "freq:" freq(1)
.xx "" "get: get a version of an SCCS" "file." "" get(1)
.xx "" "group: group" "file." "" group(4)
.xx "" "see: see what a" "file has in it." "" see(1)
.xx "" "filehdr:" "file header for common object files." "" filehdr(4)
.xx "" "ibtab: format of ibtab" "file." "" ibtab(4)
.xx "" "split: split a" "file into pieces." "" split(1)
.xx "" "change the type field of an image" "file." "iset:" iset(1W)
.xx "" "issue: issue identification" "file." "" issue(4)
.xx "" "provide information about an image" "file." "istat:" istat(1W)
.xx "" "number entries in a common object" "file." "linenum: line" linenum(4)
.xx "" "link: link to a" "file." "" link(2)
.xx "" "load a part of the color map from a" "file." "loadmap:" loadmap(1W)
.xx "" "makedbm: make a yellow pages dbm" "file." "" makedbm(1M)
.xx "" "merge: three-way" "file merge." "" merge(1)
.xx "" "mknod: build special" "file." "" mknod(1M)
.xx "" "directory, or a special or ordinary" "file." "mknod: make a" mknod(2)
.xx "" "ctermid: generate" "file name for terminal." "" ctermid(3S)
.xx "" "mktemp: make a unique" "file name." "" mktemp(3C)
.xx "" "the data base for the mail aliases" "file." "newaliases: rebuild" newaliases(1)
.xx "" "newform: change the format of a text" "file." "" newform(1)
.xx "" "ttyslot: find the slot in the utmp" "file of the current user." "" ttyslot(3C)
.xx "" "ipaste: display an image" "file on the screen." "" ipaste(1W)
.xx "" "creat: create a new" "file or rewrite an existing one." "" creat(2)
.xx "" "passwd: password" "file." "" passwd(4)
.xx "" "files or subsequent lines of one" "file." "/merge same lines of several" paste(1)
.xx "" "more, page:" "file perusal filter for crt viewing." "" more(1)
.xx "" "fseek, rewind, ftell: reposition a" "file pointer in a stream." "" fseek(3S)
.xx "" "lseek: move read/write" "file pointer." "" lseek(2)
.xx "" "prs: print an SCCS" "file." "" prs(1)
.xx "" "reverse page order of a POSTSCRIPT" "file." "psrev: select or" psrev(1)
.xx "" "rcsfile: format of RCS" "file." "" rcsfile(4)
.xx "" "read: read from" "file." "" read(2)
.xx "" "rename: change the name of a" "file." "" rename(2)
.xx "" "rmdel: remove a delta from an SCCS" "file." "" rmdel(1)
.xx "" "for modifying yellow pages password" "file." "rpc.passwd: server" rpc.passwd(1M)
.xx "" "bfs: big" "file scanner." "" bfs(1)
.xx "" "compare two versions of an SCCS" "file." "sccsdiff:" sccsdiff(1)
.xx "" "sccsfile: format of SCCS" "file." "" sccsfile(4)
.xx "" "section header for a common object" "file." "scnhdr:" scnhdr(4)
.xx "" ".: read commands from" "file." "" sh(1)
.xx "" "size: size of an object" "file." "" size(1)
.xx "" "stat, lstat, fstat: get" "file status." "" stat(2)
.xx "" "in an object, or other binary" "file." "/find the printable strings" strings(1)
.xx "" "print checksum and block count of a" "file." "sum:" sum(1)
.xx "" "symlink: make symbolic link to a" "file." "" symlink(2)
.xx "interactive repair." "fsck, dfsck:" "file system consistency check and" "" fsck(1M)
.xx "" "fsdb: Bell" "file system debugger." "" fsdb(1M)
.xx "" "/addmntent, endmntent, hasmntopt: get" "file system descriptor file entry." "" getmntent(3C)
.xx "" "file system: layout of the Extent" "file system." "Extent" efs(4)
.xx "system volume." "Bell" "file system: format of Bell file" "" bellfs(4)
.xx "volumes." "" "file system: format of system" "" fs(4)
.xx "entry." "dirent:" "file system independent directory" "" dirent(4)
.xx "" "/read directory entries and put in a" "file system independent format." "" getdents(2)
.xx "" "statfs, fstatfs: get" "file system information - TCP." "" statfs(2)
.xx "" "bellinode: format of a Bell" "file system inode." "" bellinode(4)
.xx "" "efsinode: format of an Extent" "file system inode." "" efsinode(4)
.xx "" "labelit: label a" "file system." "" labelit(1M)
.xx "file system." "Extent" "file system: layout of the Extent" "" efs(4)
.xx "" "mkfs: construct a" "file system." "" mkfs(1M)
.xx "" "mount: mount a" "file system." "" mount(2)
.xx "" "nfs: network" "file system." "" nfs(7)
.xx "" "nfsmount: mount an NFS" "file system." "" nfsmount(2)
.xx "" "nfsstat: Network" "File System statistics." "" nfsstat(1M)
.xx "" "ustat: get" "file system statistics." "" ustat(2)
.xx "" "/etc/mtab: mounted" "file system table." "" mtab(4)
.xx "" "rmtab: remotely mounted" "file system table." "" rmtab(4)
.xx "" "sysfs: get" "file system type information." "" sysfs(2)
.xx "" "umount: unmount a" "file system." "" umount(2)
.xx "" "Bell file system: format of Bell" "file system volume." "" bellfs(4)
.xx "" "tail: deliver the last part of a" "file." "" tail(1)
.xx "" "tmpfile: create a temporary" "file." "" tmpfile(3S)
.xx "" "create a name for a temporary" "file." "tmpnam, tempnam:" tmpnam(3S)
.xx "" "truncate, ftruncate: truncate a" "file to a specified length." "" truncate(2)
.xx "" "vis: copy a" "file to the screen." "" vis(1W)
.xx "" "access and modification times of a" "file." "touch: update" touch(1)
.xx "" "ftp: ARPANET" "file transfer program." "" ftp(1C)
.xx "" "tftp: trivial" "file transfer program." "" tftp(1C)
.xx "" "ftpd: DARPA Internet" "File Transfer Protocol server." "" ftpd(1M)
.xx "" "tftpd: DARPA Trivial" "File Transfer Protocol server." "" tftpd(1M)
.xx "" "ftw: walk a" "file tree." "" ftw(3C)
.xx "" "file: determine" "file type." "" file(1)
.xx "" "undo a previous get of an SCCS" "file." "unget:" unget(1)
.xx "" "uniq: report repeated lines in a" "file." "" uniq(1)
.xx "" "val: validate SCCS" "file." "" val(1)
.xx "" "write: write on a" "file." "" write(2)
.xx "" "umask: set" "file-creation mode mask." "" umask(1)
.xx "object files." "" "filehdr: file header for common" "" filehdr(4)
.xx "" "glob:" "filename expand argument list." "" csh(1)
.xx "" "ferror, feof, clearerr," "fileno: stream status inquiries." "" ferror(3S)
.xx "" "search and print process accounting" "file(s)." "acctcom:" acctcom(1)
.xx "" "merge or add total accounting" "files." "acctmerg:" acctmerg(1M)
.xx "" "admin: create and administer SCCS" "files." "" admin(1)
.xx "" "cat: concatenate and print" "files." "" cat(1)
.xx "" "cmp: compare two" "files." "" cmp(1)
.xx "" "or reject lines common to two sorted" "files." "comm: select" comm(1)
.xx "" "cp, ln, mv: copy, link or move" "files." "" cp(1)
.xx "" "diffmk: mark differences between" "files." "" diffmk(1)
.xx "" "file header for common object" "files." "filehdr:" filehdr(4)
.xx "" "find: find" "files." "" find(1)
.xx "" "font: description" "files for troff." "" font(4)
.xx "" "fspec: format specification in text" "files." "" fspec(4)
.xx "" "fsplit: split fortran or ratfor" "files." "" fsplit(1)
.xx "" "package for dealing with ibtab" "files." "/getibent, ibnflags:" ibtab(3N)
.xx "" "ident: identify" "files." "" ident(1)
.xx "" "intro: introduction to special" "files." "" intro(7)
.xx "" "cross-reference listing of macro" "files." "macref: produce" macref(1)
.xx "" "rm, rmdir: remove" "files or directories." "" rm(1)
.xx "" "paste: merge same lines of several" "files or subsequent lines of one/" "" paste(1)
.xx "" "pcat, unpack: compress and expand" "files." "pack," pack(1)
.xx "" "pr: print" "files." "" pr(1)
.xx "" "and other information about RCS" "files." "rlog: print log messages" rlog(1)
.xx "" "sort: sort and/or merge" "files." "" sort(1)
.xx "printing." "enscript: convert text" "files to POSTSCRIPT format for" "" enscript(1)
.xx "" "ps4014: convert a Tektronix 4014" "files to POSTSCRIPT format." "" ps4014(1)
.xx "" "ps630: convert Diablo 630 print" "files to POSTSCRIPT format." "" ps630(1)
.xx "" "pscat: convert C/A/T" "files to POSTSCRIPT format." "" pscat(1)
.xx "" "psplot: convert plot" "files to POSTSCRIPT format." "" psplot(1)
.xx "" "what: identify SCCS" "files." "" what(1)
.xx "" "exports: NFS" "filesystems being exported." "" exports(4)
.xx "" "fstab: static information about" "filesystems." "mntent," mntent(4)
.xx "" "mount, umount: mount and dismount" "filesystems." "" mount(1M)
.xx "" "keep track of remotely mounted" "filesystems." "mount:" mount(3X)
.xx "" "more, page: file perusal" "filter for crt viewing." "" more(1)
.xx "" "greek: select terminal" "filter." "" greek(1)
.xx "" "nl: line numbering" "filter." "" nl(1)
.xx "" "col:" "filter reverse line-feeds." "" col(1)
.xx "" "/psinterface: TRANSCRIPT spooler" "filters for POSTSCRIPT printers." "" transcript(5)
.xx "return channel/" "xnsfile,xnspathname:" "find an available network channel or" "" xnsfile(3N)
.xx "references in documents." "refer:" "find and insert literature" "" refer(1)
.xx "" "find:" "find files." "" find(1)
.xx "" "" "find: find files." "" find(1)
.xx "" "hyphen:" "find hyphenated words." "" hyphen(1)
.xx "" "ttyname, isatty:" "find name of a terminal." "" ttyname(3C)
.xx "library." "lorder:" "find ordering relation for an object" "" lorder(1)
.xx "" "/inverted index for a bibliography," "find references in a bibliography." "" lookbib(1)
.xx "" "spell, hashmake, spellin, hashcheck:" "find spelling errors." "" spell(1)
.xx "object, or other binary/" "strings:" "find the printable strings in an" "" strings(1)
.xx "the current user." "ttyslot:" "find the slot in the utmp file of" "" ttyslot(3C)
.xx "" "fold: fold long lines for" "finite width output device." "" fold(1)
.xx "" "head: give" "first few lines." "" head(1)
.xx "" "dbminit, fetch, store, delete," "firstkey, nextkey: data base/" "" dbm(3X)
.xx "" "fish: play ``Go" "Fish''." "" fish(6)
.xx "" "" "fish: play ``Go Fish''." "" fish(6)
.xx "" "set: set shell" "flags or positional parameters." "" sh(1)
.xx "Ethernet dogfight." "radar:" "flight controller's view of the" "" radar(1d)
.xx "" "flight: simulate the" "flight of any of several aircraft." "" flight(1d)
.xx "of several aircraft." "" "flight: simulate the flight of any" "" flight(1d)
.xx "" "dog: cooperative or competitive" "flight simulator and airshow/" "" dog(1d)
.xx "system." "fpsigset: C" "floating point exception handling" "" fpsigset(3C)
.xx "" "/fpecleanup: FORTRAN and Pascal" "floating-point exception handling/" "" setfpe(3X)
.xx "" "(_latof): convert ASCII string to" "floating-point number." "atof" atof(3C)
.xx "" "/(_d_fcvt), gcvt (_d_gcvt): convert" "floating-point number to string." "" ecvt(3C)
.xx "" "modf (_lmodf): manipulate parts of" "floating-point numbers." "/(_lldexp)," frexp(3C)
.xx "value/" "/fmod (_lfmod), fabs (_lfabs):" "floor, ceiling, remainder, absolute" "" floor(3M)
.xx "(_lfmod), fabs (_lfabs): floor,/" "" "floor (_lfloor), ceil (_lceil), fmod" "" floor(3M)
.xx "" "sif: Interphase Storager 2" "floppy controller." "" sif(7)
.xx "" "mkbootflp: create a bootable unix" "floppy disk." "" mkbootflp(1M)
.xx "" "flpuxfer: transfer the bootable" "floppy." "" flpuxfer(1M)
.xx "" "flp:" "floppy formatter." "" flp(1)
.xx "controller." "" "floppy: st-506 disk/tape/floppy" "" floppy(7)
.xx "data base." "" "flow: display of complex scientific" "" flow(1d)
.xx "" "" "flp: floppy formatter." "" flp(1)
.xx "floppy." "" "flpuxfer: transfer the bootable" "" flpuxfer(1M)
.xx "" "fclose, fflush: close or" "flush a stream." "" fclose(3S)
.xx "" "floor (_lfloor), ceil (_lceil)," "fmod (_lfmod), fabs (_lfabs): floor,/" "" floor(3M)
.xx "" "" "fmt: simple text formatter." "" fmt(1)
.xx "width output device." "" "fold: fold long lines for finite" "" fold(1)
.xx "output device." "fold:" "fold long lines for finite width" "" fold(1)
.xx "" "merge mail messages from one" "folder to another." "mergemail:" mergemail(1)
.xx "" "" "font: description files for troff." "" font(4)
.xx "" "loadfont: replace the system" "font." "" loadfont(1G)
.xx "" "afm: Adobe POSTSCRIPT" "font metrics file format." "" afm(4)
.xx "stream." "" "fopen, freopen, fdopen: open a" "" fopen(3S)
.xx "map." "yppush:" "force propagation of a changed YP" "" yppush(1M)
.xx "" "" "foreach: loop over list of names." "" csh(1)
.xx "" "" "fork: create a new process." "" fork(2)
.xx "" "acct: per-process accounting file" "format." "" acct(4)
.xx "" "Adobe POSTSCRIPT font metrics file" "format." "afm:" afm(4)
.xx "" "ar: archive (library) file" "format." "" ar(4)
.xx "" "indent: indent and" "format C program source." "" indent(1)
.xx "" "convert mail from unix to rmail" "format." "collectmail:" collectmail(1)
.xx "" "pnch: file" "format for card images." "" pnch(4)
.xx "" "convert text files to POSTSCRIPT" "format for printing." "enscript:" enscript(1)
.xx "" "and put in a file system independent" "format." "/read directory entries" getdents(2)
.xx "" "neqn:" "format mathematical text for nroff." "" neqn(1)
.xx "" "eqn:" "format mathematical text for troff." "" eqn(1)
.xx "" "bellinode:" "format of a Bell file system inode." "" bellinode(4)
.xx "" "newform: change the" "format of a text file." "" newform(1)
.xx "inode." "efsinode:" "format of an Extent file system" "" efsinode(4)
.xx "" "inode:" "format of an inode." "" inode(4)
.xx "" "Bell file system:" "format of Bell file system volume." "" bellfs(4)
.xx "" "core:" "format of core image file." "" core(4)
.xx "" "cpio:" "format of cpio archive." "" cpio(4)
.xx "" "dir:" "format of directories." "" dir(4)
.xx "" "ibtab:" "format of ibtab file." "" ibtab(4)
.xx "" "rcsfile:" "format of RCS file." "" rcsfile(4)
.xx "" "sccsfile:" "format of SCCS file." "" sccsfile(4)
.xx "" "file system:" "format of system volumes." "" fs(4)
.xx "" "nroff:" "format or typeset text." "" nroff(1)
.xx "" "postscript: print file" "format." "" postscript(4)
.xx "" "a Tektronix 4014 files to POSTSCRIPT" "format." "ps4014: convert" ps4014(1)
.xx "" "Diablo 630 print files to POSTSCRIPT" "format." "ps630: convert" ps630(1)
.xx "" "convert C/A/T files to POSTSCRIPT" "format." "pscat:" pscat(1)
.xx "" "intermediate format to POSTSCRIPT" "format." "psdit: convert troff" psdit(1)
.xx "" "convert plot files to POSTSCRIPT" "format." "psplot:" psplot(1)
.xx "" "fspec:" "format specification in text files." "" fspec(4)
.xx "" "tbl:" "format tables for nroff or troff." "" tbl(1)
.xx "" "nroff:" "format text." "" nroff(1)
.xx "" "psdit: convert troff intermediate" "format to POSTSCRIPT format." "" psdit(1)
.xx "" "intro: introduction to file" "formats." "" intro(4)
.xx "" "utmp, wtmp: utmp and wtmp entry" "formats." "" utmp(4)
.xx "" "scanf, fscanf, sscanf: convert" "formatted input." "" scanf(3S)
.xx "" "printf, fprintf, sprintf: print" "formatted output." "" printf(3S)
.xx "" "checkmm: checks documents" "formatted with the mm macros." "" checkmm(1)
.xx "" "osdd, checkmm: print/check documents" "formatted with the MM macros." "mm," mm(1)
.xx "" "mm: prints documents" "formatted with the mm macros." "" mm(1)
.xx "" "flp: floppy" "formatter." "" flp(1)
.xx "" "fmt: simple text" "formatter." "" fmt(1)
.xx "" "mptx: the macro package for" "formatting a permuted index." "" mptx(5)
.xx "" "troff: text" "formatting and typesetting language." "" troff(1)
.xx "" "mm: the MM macro package for" "formatting documents." "" mm(5)
.xx "" "man: macros for" "formatting entries in this manual." "" man(5)
.xx "" "ms: text" "formatting macros." "" ms(5)
.xx "" "me: macros for" "formatting papers." "" me(5)
.xx "exception/" "setfpe, fpecleanup:" "FORTRAN and Pascal floating-point" "" setfpe(3X)
.xx "68010/68020." "f77:" "FORTRAN compiler for the" "" f77(1)
.xx "" "cc, pc, f77: C, Pascal and" "FORTRAN compilers for the/" "" cc(1)
.xx "" "ratfor: rational" "Fortran dialect." "" ratfor(1)
.xx "" "fsplit: split" "fortran or ratfor files." "" fsplit(1)
.xx "" "user routine for intercepting" "FORTRAN runtime errors.." "userexit:" userexit(3X)
.xx "C file." "extcentry: extract" "FORTRAN-callable entry points from a" "" extcentry(1)
.xx "interesting, adage." "" "fortune: print a random, hopefully" "" fortune(6)
.xx "floating-point exception/" "setfpe," "fpecleanup: FORTRAN and Pascal" "" setfpe(3X)
.xx "output." "printf," "fprintf, sprintf: print formatted" "" printf(3S)
.xx "handling system." "" "fpsigset: C floating point exception" "" fpsigset(3C)
.xx "on a stream." "putc, putchar," "fputc, putw: put character or word" "" putc(3S)
.xx "" "puts," "fputs: put a string on a stream." "" puts(3S)
.xx "" "" "fread, fwrite: binary input/output." "" fread(3S)
.xx "" "df: report number of" "free disk blocks." "" df(1)
.xx "malloc_check: main memory/" "malloc," "free, realloc, calloc, cfree," "" malloc(3C)
.xx "" "fopen," "freopen, fdopen: open a stream." "" fopen(3S)
.xx "frequencies in a file." "" "freq: report on character" "" freq(1)
.xx "" "freq: report on character" "frequencies in a file." "" freq(1)
.xx "modf (_lmodf): manipulate parts of/" "" "frexp (_lfrexp), ldexp (_lldexp)," "" frexp(3C)
.xx "input." "scanf," "fscanf, sscanf: convert formatted" "" scanf(3S)
.xx "check and interactive repair." "" "fsck, dfsck: file system consistency" "" fsck(1M)
.xx "" "make a lost+found directory for" "fsck." "/etc/mklost+found:" mklost+found(1M)
.xx "" "" "fsdb: Bell file system debugger." "" fsdb(1M)
.xx "file pointer in a stream." "" "fseek, rewind, ftell: reposition a" "" fseek(3S)
.xx "files." "" "fspec: format specification in text" "" fspec(4)
.xx "files." "" "fsplit: split fortran or ratfor" "" fsplit(1)
.xx "filesystems." "mntent," "fstab: static information about" "" mntent(4)
.xx "" "stat, lstat," "fstat: get file status." "" stat(2)
.xx "- TCP." "statfs," "fstatfs: get file system information" "" statfs(2)
.xx "a stream." "fseek, rewind," "ftell: reposition a file pointer in" "" fseek(3S)
.xx "communication package." "" "ftok: standard interprocess" "" stdipc(3C)
.xx "" "" "ftp: ARPANET file transfer program." "" ftp(1C)
.xx "Protocol server." "" "ftpd: DARPA Internet File Transfer" "" ftpd(1M)
.xx "specified length." "truncate," "ftruncate: truncate a file to a" "" truncate(2)
.xx "" "" "ftw: walk a file tree." "" ftw(3C)
.xx "" "shutdown: shut down part of a" "full-duplex connection." "" shutdown(2)
.xx "the dogfight." "shadow:" "full-screen armchair pilot's view of" "" shadow(1d)
.xx "function." "erf, erfc: error" "function and complementary error" "" erf(3M)
.xx "" "function and complementary error" "function." "erf, erfc: error" erf(3M)
.xx "" "gamma: log gamma" "function." "" gamma(3M)
.xx "" "hypot: Euclidean distance" "function." "" hypot(3M)
.xx "" "matherr: error-handling" "function." "" matherr(3M)
.xx "" "timed sleep and processor yield" "function." "sginap:" sginap(2)
.xx "" "j0, j1, jn, y0, y1, yn: Bessel" "functions." "" bessel(3M)
.xx "" "logarithm, power, square root" "functions." "/(_lsqrt): exponential," exp(3M)
.xx "" "ceiling, remainder, absolute value" "functions." "/fabs (_lfabs): floor," floor(3M)
.xx "" "300, 300s: handle special" "functions of DASI 300 and 300s/" "" 300(1)
.xx "terminals." "hp: handle special" "functions of HP 2640 and 2621-series" "" hp(1)
.xx "" "450: handle special" "functions of the DASI 450 terminal." "" 450(1)
.xx "" "(_lcosh), tanh (_ltanh): hyperbolic" "functions." "sinh (_lsinh), cosh" sinh(3M)
.xx "" "atan2 (_latan2): trigonometric" "functions." "/(_lacos), atan (_latan)," trig(3M)
.xx "motion." "curses: screen" "functions with ``optimal'' cursor" "" curses(3X)
.xx "" "fread," "fwrite: binary input/output." "" fread(3S)
.xx "accounting records." "" "fwtmp, wtmpfix: manipulate connect" "" fwtmp(1M)
.xx "" "adventure: an exploration" "game." "" adventure(6)
.xx "" "superbreak: 3-D version of the" "game ""breakout""." "" superbreak(1d)
.xx "" "cribbage: the card" "game cribbage." "" cribbage(6)
.xx "" "moo: guessing" "game." "" moo(6)
.xx "" "back: the" "game of backgammon." "" back(6)
.xx "" "bj: the" "game of black jack." "" bj(6)
.xx "" "craps: the" "game of craps." "" craps(6)
.xx "" "wump: the" "game of hunt-the-wumpus." "" wump(6)
.xx "" "life: play the" "game of life." "" life(6)
.xx "" "mastermind:" "game of ""mastermind""." "" mastermind(6)
.xx "" "trek: trekkie" "game." "" trek(6)
.xx "" "worm: play the growing worm" "game." "" worm(6)
.xx "" "intro: introduction to" "games." "" intro(6)
.xx "colors." "gamma: set the" "gamma correction value for mapping" "" gamma(1W)
.xx "" "gamma: log" "gamma function." "" gamma(3M)
.xx "" "" "gamma: log gamma function." "" gamma(3M)
.xx "value for mapping colors." "" "gamma: set the gamma correction" "" gamma(1W)
.xx "" "" "gclear: clear IRIS graphics screen." "" gclear(1G)
.xx "" "ecvt (_d_ecvt), fcvt (_d_fcvt)," "gcvt (_d_gcvt): convert/" "" ecvt(3C)
.xx "document." "subj:" "generate a list of subjects from a" "" subj(1)
.xx "" "maze:" "generate a maze." "" maze(6)
.xx "texture." "bckgrnd:" "generate a textured background" "" bckgrnd(1d)
.xx "texture." "texback:" "generate a textured background" "" texback(1W)
.xx "" "abort:" "generate an IOT fault." "" abort(3C)
.xx "" "cxref:" "generate C program cross reference." "" cxref(1)
.xx "routines." "mkf2c, mkc2f:" "generate C-FORTRAN interface" "" mkf2c(1)
.xx "" "ctermid:" "generate file name for terminal." "" ctermid(3S)
.xx "" "ncheck:" "generate names from i-numbers." "" ncheck(1M)
.xx "tasks." "lex:" "generate programs for simple lexical" "" lex(1)
.xx "" "/jrand48, srand48, seed48, lcong48:" "generate uniformly distributed/" "" drand48(3C)
.xx "" "flight simulator and airshow" "generator." "/or competitive" dog(1d)
.xx "" "rand, srand: simple random-number" "generator." "" rand(3C)
.xx "" "/setstate: better random number" "generator; routines for changing/" "" random(3B)
.xx "" "generator; routines for changing" "generators." "/better random number" random(3B)
.xx "character or word from stream." "" "getc, getchar, fgetc, getw: get" "" getc(3S)
.xx "or word from stream." "getc," "getchar, fgetc, getw: get character" "" getc(3S)
.xx "working directory." "" "getcwd: get pathname of current" "" getcwd(3C)
.xx "date initialization." "rc." "getdate: user-configurable system" "" rc.getdate(1M)
.xx "put in a file system independent/" "" "getdents: read directory entries and" "" getdents(2)
.xx "get/set name of current domain." "" "getdomainname, setdomainname:" "" getdomainname(2)
.xx "size." "" "getdtablesize: get descriptor table" "" getdtablesize(2)
.xx "user, real/" "getuid, geteuid, getgid," "getegid: get real user, effective" "" getuid(2)
.xx "name." "" "getenv: return value for environment" "" getenv(3C)
.xx "user, effective user, real/" "getuid," "geteuid, getgid, getegid: get real" "" getuid(2)
.xx "effective user,/" "getuid, geteuid," "getgid, getegid: get real user," "" getuid(2)
.xx "setgrent, endgrent: get group file/" "" "getgrent, getgrgid, getgrnam," "" getgrent(3C)
.xx "endgrent: get group file/" "getgrent," "getgrgid, getgrnam, setgrent," "" getgrent(3C)
.xx "group file/" "getgrent, getgrgid," "getgrnam, setgrent, endgrent: get" "" getgrent(3C)
.xx "" "" "getgroups: get group access list." "" getgroups(3B)
.xx "sethostent,/" "gethostbyname," "gethostbyaddr, gethostent," "" gethostbyname(3N)
.xx "gethostent, sethostent, endhostent:/" "" "gethostbyname, gethostbyaddr," "" gethostbyname(3N)
.xx "get/" "gethostbyname, gethostbyaddr," "gethostent, sethostent, endhostent:" "" gethostbyname(3N)
.xx "identifier of current host." "" "gethostid, sethostid: get/set unique" "" gethostid(2)
.xx "identification." "" "gethostident: get the host's unique" "" gethostident(3C)
.xx "" "" "gethostident: print hostident value." "" gethostident(1M)
.xx "host." "" "gethostname: get name of current" "" gethostname(2)
.xx "" "setibfile, setibent, endibent," "getibent, ibnflags: package for/" "" ibtab(3N)
.xx "" "" "getlogin: get login name." "" getlogin(3C)
.xx "hasmntopt: get file/" "setmntent," "getmntent, addmntent, endmntent," "" getmntent(3C)
.xx "setnetent, endnetent:/" "getnetent," "getnetbyaddr, getnetbyname," "" getnetent(3N)
.xx "get/" "getnetent, getnetbyaddr," "getnetbyname, setnetent, endnetent:" "" getnetent(3N)
.xx "getnetbyname, setnetent, endnetent:/" "" "getnetent, getnetbyaddr," "" getnetent(3N)
.xx "endnetgrent, innetgr: get network/" "" "getnetgrent, setnetgrent," "" getnetgrent(3R)
.xx "argument vector." "" "getopt: get option letter from" "" getopt(3C)
.xx "" "" "getopt: parse command options." "" getopt(1)
.xx "" "" "getpagesize: get system page size." "" getpagesize(2)
.xx "" "" "getpass: read a password." "" getpass(3C)
.xx "peer." "" "getpeername: get name of connected" "" getpeername(2)
.xx "process group, and parent/" "getpid," "getpgrp, getppid: get process," "" getpid(2)
.xx "process, process group, and parent/" "" "getpid, getpgrp, getppid: get" "" getpid(2)
.xx "and parent process/" "getpid, getpgrp," "getppid: get process, process group," "" getpid(2)
.xx "" "getprotoent, getprotobynumber," "getprotobyname, setprotoent,/" "" getprotoent(3N)
.xx "setprotoent,/" "getprotoent," "getprotobynumber, getprotobyname," "" getprotoent(3N)
.xx "getprotobyname, setprotoent,/" "" "getprotoent, getprotobynumber," "" getprotoent(3N)
.xx "" "" "getpw: get name from UID." "" getpw(3C)
.xx "setpwent, endpwent: get password/" "" "getpwent, getpwuid, getpwnam," "" getpwent(3C)
.xx "password file/" "getpwent, getpwuid," "getpwnam, setpwent, endpwent: get" "" getpwent(3C)
.xx "endpwent: get password/" "getpwent," "getpwuid, getpwnam, setpwent," "" getpwent(3C)
.xx "setrpcent, endrpcent:/" "getrpcent," "getrpcbyname, getrpcbynumber," "" getrpcent(3R)
.xx "endrpcent:/" "getrpcent, getrpcbyname," "getrpcbynumber, setrpcent," "" getrpcent(3R)
.xx "getrpcbynumber, setrpcent,/" "" "getrpcent, getrpcbyname," "" getrpcent(3R)
.xx "" "" "getrpcport: get RPC port number." "" getrpcport(3R)
.xx "stream." "" "gets, fgets: get a string from a" "" gets(3S)
.xx "" "getservent, getservbyport," "getservbyname, setservent,/" "" getservent(3N)
.xx "setservent, endservent:/" "getservent," "getservbyport, getservbyname," "" getservent(3N)
.xx "getservbyname, setservent,/" "" "getservent, getservbyport," "" getservent(3N)
.xx "" "getdomainname, setdomainname:" "get/set name of current domain." "" getdomainname(2)
.xx "host." "gethostid, sethostid:" "get/set unique identifier of current" "" gethostid(2)
.xx "" "" "getsockname: get socket name." "" getsockname(2)
.xx "options on sockets." "" "getsockopt, setsockopt: get and set" "" getsockopt(2)
.xx "" "" "gettimeofday: get date and time." "" gettimeofday(3B)
.xx "" "speed and terminal settings used by" "getty." "gettydefs:" gettydefs(4)
.xx "speed, and line discipline." "" "getty: set terminal type, modes," "" getty(1M)
.xx "" "ct: spawn" "getty to a remote terminal." "" ct(1C)
.xx "settings used by getty." "" "gettydefs: speed and terminal" "" gettydefs(4)
.xx "get real user, effective user, real/" "" "getuid, geteuid, getgid, getegid:" "" getuid(2)
.xx "pututline, setutent, endutent,/" "" "getutent, getutid, getutline," "" getut(3C)
.xx "setutent, endutent,/" "getutent," "getutid, getutline, pututline," "" getut(3C)
.xx "endutent,/" "getutent, getutid," "getutline, pututline, setutent," "" getut(3C)
.xx "from the operating system." "" "getversion: get version information" "" getversion(2)
.xx "stream." "getc, getchar, fgetc," "getw: get character or word from" "" getc(3S)
.xx "pathname." "" "getwd: get current working directory" "" getwd(3C)
.xx "" "head:" "give first few lines." "" head(1)
.xx "" "" "glob: filename expand argument list." "" csh(1)
.xx "and time to/" "ctime, localtime," "gmtime, asctime, tzset: convert date" "" ctime(3C)
.xx "" "fish: play" "``Go Fish''." "" fish(6)
.xx "" "" "goto: command transfer." "" csh(1)
.xx "" "setjmp, longjmp: non-local" "goto." "" setjmp(3C)
.xx "graphs." "" "grap: pic preprocessor for drawing" "" grap(1)
.xx "average." "loadav:" "graphically display the system load" "" loadav(1W)
.xx "" "assign a serial port to an external" "graphics device." "devport:" devport(1G)
.xx "type-box." "greek:" "graphics for the extended TTY-37" "" greek(5)
.xx "" "gclear: clear IRIS" "graphics screen." "" gclear(1G)
.xx "" "wsiris: remote login with" "graphics." "" wsiris(1C)
.xx "" "mmt, mvt: typeset documents, view" "graphs, and slides." "" mmt(1)
.xx "" "macro package for typesetting view" "graphs and slides." "mv: a troff" mv(5)
.xx "" "mvt: typeset view" "graphs and slides." "" mvt(1)
.xx "" "grap: pic preprocessor for drawing" "graphs." "" grap(1)
.xx "TTY-37 type-box." "" "greek: graphics for the extended" "" greek(5)
.xx "" "" "greek: select terminal filter." "" greek(1)
.xx "for a pattern." "" "grep, egrep, fgrep: search a file" "" grep(1)
.xx "" "getgroups: get" "group access list." "" getgroups(3B)
.xx "" "/get real user, effective user, real" "group, and effective group IDs." "" getuid(2)
.xx "" "/getppid: get process, process" "group, and parent process IDs." "" getpid(2)
.xx "" "chown, chgrp: change owner or" "group." "" chown(1)
.xx "" "endnetgrent, innetgr: get network" "group entry." "/setnetgrent," getnetgrent(3R)
.xx "" "getgrnam, setgrent, endgrent: get" "group file entry." "/getgrgid," getgrent(3C)
.xx "" "group:" "group file." "" group(4)
.xx "" "" "group: group file." "" group(4)
.xx "" "setpgrp: set process" "group ID." "" setpgrp(2)
.xx "" "id: print user and" "group IDs and names." "" id(1)
.xx "" "user, real group, and effective" "group IDs." "/get real user, effective" getuid(2)
.xx "" "setuid, setgid: set user and" "group IDs." "" setuid(2)
.xx "" "newgrp: log in to a new" "group." "" newgrp(1)
.xx "" "chown: change owner and" "group of a file." "" chown(2)
.xx "" "send a signal to a process or a" "group of processes." "kill:" kill(2)
.xx "" "newgrp: log in to a new" "group." "" sh(1)
.xx "" "netgroup: list of network" "groups." "" netgroup(4)
.xx "" "maintain, update, and regenerate" "groups of programs." "make:" make(1)
.xx "" "worm: play the" "growing worm game." "" worm(6)
.xx "" "pwck," "grpck: password/group file checkers." "" pwck(1M)
.xx "" "ssignal," "gsignal: software signals." "" ssignal(3C)
.xx "" "hangman:" "guess the word." "" hangman(6)
.xx "" "moo:" "guessing game." "" moo(6)
.xx "and 300s terminals." "300, 300s:" "handle special functions of DASI 300" "" 300(1)
.xx "and 2621-series terminals." "hp:" "handle special functions of HP 2640" "" hp(1)
.xx "450 terminal." "450:" "handle special functions of the DASI" "" 450(1)
.xx "" "fpsigset: C floating point exception" "handling system." "" fpsigset(3C)
.xx "" "and Pascal floating-point exception" "handling system." "/FORTRAN" setfpe(3X)
.xx "" "" "hangman: guess the word." "" hangman(6)
.xx "" "nohup: run command immune to" "hangups." "" csh(1)
.xx "" "nohup: run a command immune to" "hangups (sh only)." "" nohup(1)
.xx "" "hsearch, hcreate, hdestroy: manage" "hash search tables." "" hsearch(3C)
.xx "" "rehash: recompute command" "hash table." "" csh(1)
.xx "" "unhash: discard command" "hash table." "" csh(1)
.xx "" "spell, hashmake, spellin," "hashcheck: find spelling errors." "" spell(1)
.xx "spelling errors." "spell," "hashmake, spellin, hashcheck: find" "" spell(1)
.xx "" "/getmntent, addmntent, endmntent," "hasmntopt: get file system/" "" getmntent(3C)
.xx "search tables." "hsearch," "hcreate, hdestroy: manage hash" "" hsearch(3C)
.xx "" "hsearch, hcreate," "hdestroy: manage hash search tables." "" hsearch(3C)
.xx "" "" "head: give first few lines." "" head(1)
.xx "" "mkdepend: compute" "header file dependencies." "" mkdepend(1)
.xx "" "scnhdr: section" "header for a common object file." "" scnhdr(4)
.xx "" "filehdr: file" "header for common object files." "" filehdr(4)
.xx "" "" "help: ask for help." "" help(1)
.xx "" "help: ask for" "help." "" help(1)
.xx "Cytochrome P450 protein molecule." "" "heme: depthcued display of the" "" heme(1d)
.xx "" "a YP map from some YP server to" "here." "ypxfr: transfer" ypxfr(1M)
.xx "" "history: print" "history event list." "" csh(1)
.xx "" "" "history: print history event list." "" csh(1)
.xx "" "" "holidays: holidays of the year." "" holidays(4)
.xx "" "holidays:" "holidays of the year." "" holidays(4)
.xx "" "fortune: print a random," "hopefully interesting, adage." "" fortune(6)
.xx "" "ntohl, ntohs: convert values between" "host and network byte order." "/htons," byteorder(3N)
.xx "" "sethostname: set name of" "host cpu." "" sethostname(2)
.xx "" "sethostent, endhostent: get network" "host entry." "/gethostent," gethostbyname(3N)
.xx "" "get/set unique identifier of current" "host." "gethostid, sethostid:" gethostid(2)
.xx "" "gethostname: get name of current" "host." "" gethostname(2)
.xx "master?." "ypwhich: which" "host is the YP server or map" "" ypwhich(1)
.xx "" "hosts:" "host name data base." "" hosts(4)
.xx "" "ruptime: show" "host status of local machines." "" ruptime(1C)
.xx "" "set or print identifier of current" "host system." "hostid:" hostid(1)
.xx "" "set or print name of current" "host system." "hostname:" hostname(1)
.xx "" "of a YP map is at a YP server" "host." "yppoll: what version" yppoll(1M)
.xx "current host system." "" "hostid: set or print identifier of" "" hostid(1)
.xx "" "gethostident: print" "hostident value." "" gethostident(1M)
.xx "" "ethers: ethernet address to" "hostname database." "" ethers(4)
.xx "current host system." "" "hostname: set or print name of" "" hostname(1)
.xx "" "rhosts: list of trusted" "hosts and users." "" rhosts(4)
.xx "" "" "hosts: host name data base." "" hosts(4)
.xx "" "hosts.equiv: list of trusted" "hosts." "" hosts.equiv(4)
.xx "" "ICMP ECHO_REQUEST packets to network" "hosts." "ping: send" ping(1M)
.xx "" "gethostident: get the" "host's unique identification." "" gethostident(3C)
.xx "" "" "hosts.equiv: list of trusted hosts." "" hosts.equiv(4)
.xx "" "uptime: show" "how long system has been up." "" uptime(1)
.xx "" "hp: handle special functions of" "HP 2640 and 2621-series terminals." "" hp(1)
.xx "2640 and 2621-series terminals." "" "hp: handle special functions of HP" "" hp(1)
.xx "hash search tables." "" "hsearch, hcreate, hdestroy: manage" "" hsearch(3C)
.xx "values between host and network/" "" "htonl, htons, ntohl, ntohs: convert" "" byteorder(3N)
.xx "between host and network/" "htonl," "htons, ntohl, ntohs: convert values" "" byteorder(3N)
.xx "" "wump: the game of" "hunt-the-wumpus." "" wump(6)
.xx "" "" "hyp: hyperchannel table translation." "" hyp(1M)
.xx "" "cosh (_lcosh), tanh (_ltanh):" "hyperbolic functions." "/(_lsinh)," sinh(3M)
.xx "" "hyroute: set the" "hyperchannel routing tables." "" hyroute(1M)
.xx "" "hyp:" "hyperchannel table translation." "" hyp(1M)
.xx "" "" "hyphen: find hyphenated words." "" hyphen(1)
.xx "" "hyphen: find" "hyphenated words." "" hyphen(1)
.xx "" "" "hypot: Euclidean distance function." "" hypot(3M)
.xx "routing tables." "" "hyroute: set the hyperchannel" "" hyroute(1M)
.xx "" "iib: initialize" "ib driver." "" iib(1M)
.xx "" "" "ib: IEEE 488 interface." "" ib(7)
.xx "" "t3279:" "IBM 3270 terminal emulator." "" t3279(1C)
.xx "ibtab/" "/setibent, endibent, getibent," "ibnflags: package for dealing with" "" ibtab(3N)
.xx "" "ibtab: format of" "ibtab file." "" ibtab(4)
.xx "" "ibnflags: package for dealing with" "ibtab files." "/endibent, getibent," ibtab(3N)
.xx "" "" "ibtab: format of ibtab file." "" ibtab(4)
.xx "hosts." "ping: send" "ICMP ECHO_REQUEST packets to network" "" ping(1M)
.xx "Protocol." "" "icmp: Internet Control Message" "" icmp(7P)
.xx "" "semaphore set or shared memory" "id." "ipcrm: remove a message queue," ipcrm(1)
.xx "names." "" "id: print user and group IDs and" "" id(1)
.xx "" "setpgrp: set process group" "ID." "" setpgrp(2)
.xx "" "whoami: print effective current user" "id." "" whoami(1)
.xx "" "" "ident: identify files." "" ident(1)
.xx "" "issue: issue" "identification file." "" issue(4)
.xx "" "gethostident: get the host's unique" "identification." "" gethostident(3C)
.xx "" "model: model" "identification." "" model(4)
.xx "" "sys_id: system" "identification." "" sys_id(4)
.xx "" "gethostid, sethostid: get/set unique" "identifier of current host." "" gethostid(2)
.xx "" "hostid: set or print" "identifier of current host system." "" hostid(1)
.xx "" "ident:" "identify files." "" ident(1)
.xx "" "what:" "identify SCCS files." "" what(1)
.xx "" "id: print user and group" "IDs and names." "" id(1)
.xx "" "process group, and parent process" "IDs." "/getpgrp, getppid: get process," getpid(2)
.xx "" "real group, and effective group" "IDs." "/get real user, effective user," getuid(2)
.xx "" "setuid, setgid: set user and group" "IDs." "" setuid(2)
.xx "" "ib:" "IEEE 488 interface." "" ib(7)
.xx "" "" "if: conditional statement." "" csh(1)
.xx "" "" "if, then: conditional statement." "" sh(1)
.xx "interface parameters." "" "ifconfig: configure network" "" ifconfig(1M)
.xx "" "" "iib: initialize ib driver." "" iib(1M)
.xx "" "core: format of core" "image file." "" core(4)
.xx "" "iset: change the type field of an" "image file." "" iset(1W)
.xx "" "istat: provide information about an" "image file." "" istat(1W)
.xx "" "ipaste: display an" "image file on the screen." "" ipaste(1W)
.xx "" "shrink: shrink an" "image." "" shrink(1W)
.xx "" "capture: dump screen" "image to file." "" capture(1W)
.xx "" "pnch: file format for card" "images." "" pnch(4)
.xx "" "nohup: run command" "immune to hangups." "" csh(1)
.xx "" "nohup: run a command" "immune to hangups (sh only)." "" nohup(1)
.xx "" "extract strings from C programs to" "implement shared strings." "xstr:" xstr(1)
.xx "" "indent:" "indent and format C program source." "" indent(1)
.xx "source." "" "indent: indent and format C program" "" indent(1)
.xx "" "dirent: file system" "independent directory entry." "" dirent(4)
.xx "" "entries and put in a file system" "independent format." "/read directory" getdents(2)
.xx "" "/tgetstr, tgoto, tputs: terminal" "independent operation routines." "" termcap(3X)
.xx "" "indxbib, lookbib: build inverted" "index for a bibliography, find/" "" lookbib(1)
.xx "" "ndx: create a subject-page" "index for a document." "" ndx(1)
.xx "" "package for formatting a permuted" "index." "mptx: the macro" mptx(5)
.xx "" "ptx: make permuted" "index." "" ptx(1)
.xx "" "ptx: permuted" "index." "" ptx(1)
.xx "" "/strpbrk, strspn, strcspn, strtok," "index, rindex: string operations." "" string(3C)
.xx "teletypes." "last:" "indicate last logins of users and" "" last(1)
.xx "index for a bibliography, find/" "" "indxbib, lookbib: build inverted" "" lookbib(1)
.xx "" "" "inet: Internet protocol family." "" inet(7P)
.xx "inet_makeaddr, inet_lnaof,/" "" "inet_addr, inet_network, inet_ntoa," "" inet(3N)
.xx "" "" "inetd: internet ``super-server''." "" inetd(1M)
.xx "address/" "/inet_ntoa, inet_makeaddr," "inet_lnaof, inet_netof: Internet" "" inet(3N)
.xx "" "inet_addr, inet_network, inet_ntoa," "inet_makeaddr, inet_lnaof,/" "" inet(3N)
.xx "" "/inet_makeaddr, inet_lnaof," "inet_netof: Internet address/" "" inet(3N)
.xx "inet_makeaddr,/" "inet_addr," "inet_network, inet_ntoa," "" inet(3N)
.xx "" "inet_addr, inet_network," "inet_ntoa, inet_makeaddr,/" "" inet(3N)
.xx "" "statfs, fstatfs: get file system" "information - TCP." "" statfs(2)
.xx "" "istat: provide" "information about an image file." "" istat(1W)
.xx "" "mntent, fstab: static" "information about filesystems." "" mntent(4)
.xx "" "rlog: print log messages and other" "information about RCS files." "" rlog(1)
.xx "" "dblist: list" "information about the database." "" dblist(1)
.xx "machines." "rnusers, rusers: return" "information about users on remote" "" rnusers(3X)
.xx "system." "getversion: get version" "information from the operating" "" getversion(2)
.xx "" "lpstat: print LP status" "information." "" lpstat(1)
.xx "" "rpcinfo: report RPC" "information." "" rpcinfo(1M)
.xx "" "sysfs: get file system type" "information." "" sysfs(2)
.xx "" "uname: print system name and version" "information." "" uname(1)
.xx "" "inittab: script for the" "init process." "" inittab(4)
.xx "initialization." "" "init, telinit: process control" "" init(1M)
.xx "" "init, telinit: process control" "initialization." "" init(1M)
.xx "" "user-configurable system date" "initialization." "rc.getdate:" rc.getdate(1M)
.xx "" "rc.488, rc.xns: communication option" "initialization." "/rc.nfs, rc.mail," rc.tcp(1M)
.xx "" "brc, bcheckrc, rc, powerfail: system" "initialization shell scripts." "" brc(1M)
.xx "" "tset: terminal dependent" "initialization." "" tset(1)
.xx "" "iib:" "initialize ib driver." "" iib(1M)
.xx "" "connect:" "initiate a connection on a socket." "" connect(2)
.xx "" "popen, pclose:" "initiate pipe to/from a process." "" popen(3S)
.xx "number generator;/" "random, srandom," "initstate, setstate: better random" "" random(3B)
.xx "process." "" "inittab: script for the init" "" inittab(4)
.xx "" "/setnetgrent, endnetgrent," "innetgr: get network group entry." "" getnetgrent(3R)
.xx "" "format of a Bell file system" "inode." "bellinode:" bellinode(4)
.xx "" "clri: clear" "inode." "" clri(1M)
.xx "" "format of an Extent file system" "inode." "efsinode:" efsinode(4)
.xx "" "" "inode: format of an inode." "" inode(4)
.xx "" "inode: format of an" "inode." "" inode(4)
.xx "" "read: accept" "input from the standard input." "" sh(1)
.xx "" "fscanf, sscanf: convert formatted" "input." "scanf," scanf(3S)
.xx "" "read: accept input from the standard" "input." "" sh(1)
.xx "" "ungetc: push character back into" "input stream." "" ungetc(3S)
.xx "" "fread, fwrite: binary" "input/output." "" fread(3S)
.xx "" "stdio: standard buffered" "input/output package." "" stdio(3S)
.xx "" "clearerr, fileno: stream status" "inquiries." "ferror, feof," ferror(3S)
.xx "" "uustat: uucp status" "inquiry and job control." "" uustat(1C)
.xx "documents." "refer: find and" "insert literature references in" "" refer(1)
.xx "" "insque, remque:" "insert/remove element from a queue." "" insque(3B)
.xx "element from a queue." "" "insque, remque: insert/remove" "" insque(3B)
.xx "" "kernel:" "install a default kernel." "" kernel(1M)
.xx "" "install:" "install commands." "" install(1M)
.xx "" "Install:" "install commands." "" install.4d(1M)
.xx "" "" "install: install commands." "" install(1M)
.xx "" "" "Install: install commands." "" install.4d(1M)
.xx "" "ypinit: build and" "install yellow pages database." "" ypinit(1M)
.xx "" "abs: return" "integer absolute value." "" abs(3C)
.xx "" "a64l, l64a: convert between long" "integer and base-64 ASCII string." "" a64l(3C)
.xx "" "atol, atoi: convert string to" "integer." "strtol," strtol(3C)
.xx "" "l3tol, ltol3: convert between 3-byte" "integers and long integers." "" l3tol(3C)
.xx "" "between 3-byte integers and long" "integers." "l3tol, ltol3: convert" l3tol(3C)
.xx "IRIS workstation." "backup:" "interactive backup program for SGI" "" backup(1M)
.xx "" "bcopy:" "interactive block copy." "" bcopy(1M)
.xx "" "showramp:" "interactive color ramp." "" showramp(1d)
.xx "" "curve: fast" "interactive cubic curve display." "" curve(1d)
.xx "" "file system consistency check and" "interactive repair." "fsck, dfsck:" fsck(1M)
.xx "errors.." "userexit: user routine for" "intercepting FORTRAN runtime" "" userexit(3X)
.xx "" "fortune: print a random, hopefully" "interesting, adage." "" fortune(6)
.xx "" "ib: IEEE 488" "interface." "" ib(7)
.xx "" "lo: software loopback network" "interface." "" lo(7)
.xx "" "mtio: magnetic tape" "interface." "" mtio(7)
.xx "" "ifconfig: configure network" "interface parameters." "" ifconfig(1M)
.xx "" "mkf2c, mkc2f: generate C-FORTRAN" "interface routines." "" mkf2c(1)
.xx "" "termio: general terminal" "interface." "" termio(7)
.xx "" "telnet: user" "interface to the TELNET protocol." "" telnet(1C)
.xx "Protocol." "xns:" "interface to XNS Sequenced Packet" "" xns(7)
.xx "" "tty: controlling terminal" "interface." "" tty(7)
.xx "" "ypprot_err: yellow pages client" "interface." "/yp_master, yperr_string," ypclnt(3R)
.xx "format." "psdit: convert troff" "intermediate format to POSTSCRIPT" "" psdit(1)
.xx "routines." "/inet_lnaof, inet_netof:" "Internet address manipulation" "" inet(3N)
.xx "" "icmp:" "Internet Control Message Protocol." "" icmp(7P)
.xx "server." "ftpd: DARPA" "Internet File Transfer Protocol" "" ftpd(1M)
.xx "" "ip:" "Internet Protocol - TCP." "" ip(7P)
.xx "" "inet:" "Internet protocol family." "" inet(7P)
.xx "" "mailq: send mail over the" "Internet." "sendmail, newaliases," sendmail(1M)
.xx "" "inetd:" "internet ``super-server''." "" inetd(1M)
.xx "Protocol." "tcp:" "Internet Transmission Control" "" tcp(7P)
.xx "" "udp:" "Internet User Datagram Protocol." "" udp(7P)
.xx "programs." "showmap, cedit," "interp: color map demonstration" "" colordemos(1d)
.xx "" "iph:" "Interphase 2190 smd disk controller." "" iph(7)
.xx "disk/tape/floppy controller." "sii:" "Interphase Storager 2 esdi/st-506" "" sii(7)
.xx "controller." "sif:" "Interphase Storager 2 floppy" "" sif(7)
.xx "controller." "siq:" "Interphase Storager 2 qic-02 tape" "" siq(7)
.xx "" "spline:" "interpolate smooth curve." "" spline(1)
.xx "characters." "asa:" "interpret ASA carriage control" "" asa(1)
.xx "" "sno: SNOBOL" "interpreter." "" sno(1)
.xx "" "tc: troff output" "interpreter." "" tc(1)
.xx "" "csh: a shell (command" "interpreter) with C-like syntax." "" csh(1)
.xx "" "pipe: create an" "interprocess channel." "" pipe(2)
.xx "facilities status." "ipcs: report" "inter-process communication" "" ipcs(1)
.xx "" "ftok: standard" "interprocess communication package." "" stdipc(3C)
.xx "" "onintr: process" "interrupts in command scripts." "" csh(1)
.xx "" "trap: process" "interrupts in command scripts." "" sh(1)
.xx "" "sleep: suspend execution for an" "interval." "" sleep(1)
.xx "" "sleep: suspend execution for" "interval." "" sleep(3C)
.xx "application programs." "intro:" "introduction to commands and" "" intro(1)
.xx "" "intro:" "introduction to file formats." "" intro(4)
.xx "" "intro:" "introduction to games." "" intro(6)
.xx "" "intro:" "introduction to miscellany." "" intro(5)
.xx "facilities." "networking:" "introduction to networking" "" intro(7P)
.xx "" "rcsintro:" "introduction to RCS commands." "" rcsintro(1)
.xx "" "intro:" "introduction to special files." "" intro(7)
.xx "libraries." "intro:" "introduction to subroutines and" "" intro(3)
.xx "error numbers." "intro:" "introduction to system calls and" "" intro(2)
.xx "commands and application/" "intro:" "introduction to system maintenance" "" intro(1M)
.xx "procedures." "intro:" "introduction to system maintenance" "" intro(8)
.xx "" "ncheck: generate names from" "i-numbers." "" ncheck(1M)
.xx "" "aliens, alienslog: the alien" "invaders attack the earth." "" aliens(6)
.xx "find/" "indxbib, lookbib: build" "inverted index for a bibliography," "" lookbib(1)
.xx "" "select: synchronous" "I/O multiplexing - TCP." "" select(2)
.xx "" "iostat: report" "I/O statistics." "" iostat(1)
.xx "" "" "ioctl: control device." "" ioctl(2)
.xx "" "xnsioctl:" "ioctls for XNS and Ethernet." "" xnsioctl(3N)
.xx "" "" "iostat: report I/O statistics." "" iostat(1)
.xx "" "abort: generate an" "IOT fault." "" abort(3C)
.xx "" "" "ip: Internet Protocol - TCP." "" ip(7P)
.xx "multibus mapping operations." "" "ip2mapio, ip2mapmem, ip2unmap:" "" ip2mapio(2)
.xx "mapping operations." "ip2mapio," "ip2mapmem, ip2unmap: multibus" "" ip2mapio(2)
.xx "operations." "ip2mapio, ip2mapmem," "ip2unmap: multibus mapping" "" ip2mapio(2)
.xx "screen." "" "ipaste: display an image file on the" "" ipaste(1W)
.xx "semaphore set or shared memory id." "" "ipcrm: remove a message queue," "" ipcrm(1)
.xx "communication facilities status." "" "ipcs: report inter-process" "" ipcs(1)
.xx "controller." "" "iph: Interphase 2190 smd disk" "" iph(7)
.xx "" "gclear: clear" "IRIS graphics screen." "" gclear(1G)
.xx "" "mex: manage windows on the" "IRIS." "" mex(1G)
.xx "" "rootcopy:" "IRIS terminal root partition copy." "" rootcopy(1M)
.xx "" "interactive backup program for SGI" "IRIS workstation." "backup:" backup(1M)
.xx "" "worms: UNIX worms running on the" "IRIS." "" worms(1W)
.xx "" "/isupper, islower, isdigit, isxdigit," "isalnum, isspace, ispunct, isprint,/" "" ctype(3C)
.xx "isxdigit, isalnum, isspace,/" "" "isalpha, isupper, islower, isdigit," "" ctype(3C)
.xx "" "/ispunct, isprint, isgraph, iscntrl," "isascii: classify or translate/" "" ctype(3C)
.xx "" "ttyname," "isatty: find name of a terminal." "" ttyname(3C)
.xx "" "/isspace, ispunct, isprint, isgraph," "iscntrl, isascii: classify or/" "" ctype(3C)
.xx "ispunct,/" "isalpha, isupper, islower," "isdigit, isxdigit, isalnum, isspace," "" ctype(3C)
.xx "image file." "" "iset: change the type field of an" "" iset(1W)
.xx "" "/isalnum, isspace, ispunct, isprint," "isgraph, iscntrl, isascii: classify/" "" ctype(3C)
.xx "isspace, ispunct,/" "isalpha, isupper," "islower, isdigit, isxdigit, isalnum," "" ctype(3C)
.xx "" "/isxdigit, isalnum, isspace, ispunct," "isprint, isgraph, iscntrl, isascii:/" "" ctype(3C)
.xx "" "/isdigit, isxdigit, isalnum, isspace," "ispunct, isprint, isgraph, iscntrl,/" "" ctype(3C)
.xx "" "/islower, isdigit, isxdigit, isalnum," "isspace, ispunct, isprint, isgraph,/" "" ctype(3C)
.xx "" "system:" "issue a shell command." "" system(3S)
.xx "" "issue:" "issue identification file." "" issue(4)
.xx "" "" "issue: issue identification file." "" issue(4)
.xx "image file." "" "istat: provide information about an" "" istat(1W)
.xx "isalnum, isspace, ispunct,/" "isalpha," "isupper, islower, isdigit, isxdigit," "" ctype(3C)
.xx "" "isalpha, isupper, islower, isdigit," "isxdigit, isalnum, isspace, ispunct,/" "" ctype(3C)
.xx "" "news: print news" "items." "" news(1)
.xx "functions." "" "j0, j1, jn, y0, y1, yn: Bessel" "" bessel(3M)
.xx "functions." "j0," "j1, jn, y0, y1, yn: Bessel" "" bessel(3M)
.xx "" "bj: the game of black" "jack." "" bj(6)
.xx "jet fighter." "" "jet: depthcued wireframe model of a" "" jet(1d)
.xx "" "jet: depthcued wireframe model of a" "jet fighter." "" jet(1d)
.xx "" "j0, j1," "jn, y0, y1, yn: Bessel functions." "" bessel(3M)
.xx "" "uustat: uucp status inquiry and" "job control." "" uustat(1C)
.xx "" "kill: kill" "jobs and processes." "" csh(1)
.xx "" "" "join: relational database operator." "" join(1)
.xx "" "/erand48, lrand48, nrand48, mrand48," "jrand48, srand48, seed48, lcong48:/" "" drand48(3C)
.xx "filesystems." "mount:" "keep track of remotely mounted" "" mount(3X)
.xx "" "" "kernel: install a default kernel." "" kernel(1M)
.xx "" "kernel: install a default" "kernel." "" kernel(1M)
.xx "" "print the value of one or more" "keys from a yp map." "ypmatch:" ypmatch(1)
.xx "" "killall:" "kill all active processes." "" killall(1M)
.xx "" "kill:" "kill jobs and processes." "" csh(1)
.xx "" "" "kill: kill jobs and processes." "" csh(1)
.xx "a group of processes." "" "kill: send a signal to a process or" "" kill(2)
.xx "" "" "kill: terminate a process." "" kill(1)
.xx "" "" "killall: kill all active processes." "" killall(1M)
.xx "" "chase: try to escape the" "killer robots." "" chase(6)
.xx "" "mem," "kmem: main memory." "" mem(7)
.xx "integers and long integers." "" "l3tol, ltol3: convert between 3-byte" "" l3tol(3C)
.xx "and base-64 ASCII string." "a64l," "l64a: convert between long integer" "" a64l(3C)
.xx "" "labelit:" "label a file system." "" labelit(1M)
.xx "" "print or update the SGI disk drive" "label." "sgilabel:" sgilabel(1M)
.xx "" "" "labelit: label a file system." "" labelit(1M)
.xx "" "/tan (_ltan), asin (_lasin), acos" "(_lacos), atan (_latan), atan2/" "" trig(3M)
.xx "" "awk: pattern scanning and processing" "language." "" awk(1)
.xx "" "bc: arbitrary-precision arithmetic" "language." "" bc(1)
.xx "" "cpp: the C" "language preprocessor." "" cpp(1)
.xx "" "the standard command programming" "language." "sh: shell," sh(1)
.xx "" "text formatting and typesetting" "language." "troff:" troff(1)
.xx "" "troff: description of output" "language." "" troff(5)
.xx "" "mkps: register a" "LaserWriter printer with LP." "" mkps(1M)
.xx "" "/cos (_lcos), tan (_ltan), asin" "(_lasin), acos (_lacos), atan/" "" trig(3M)
.xx "" "chargefee, ckpacct, dodisk," "lastlogin, monacct, nulladm, prctmp,/" "" acctsh(1M)
.xx "" "asin (_lasin), acos (_lacos), atan" "(_latan), atan2 (_latan2):/" "/(_ltan)," trig(3M)
.xx "" "/acos (_lacos), atan (_latan), atan2" "(_latan2): trigonometric functions." "" trig(3M)
.xx "floating-point number." "atof" "(_latof): convert ASCII string to" "" atof(3C)
.xx "" "" "lav: show load average." "" lav(1)
.xx "" "Extent file system:" "layout of the Extent file system." "" efs(4)
.xx "(_lfabs):/" "floor (_lfloor), ceil" "(_lceil), fmod (_lfmod), fabs" "" floor(3M)
.xx "" "/mrand48, jrand48, srand48, seed48," "lcong48: generate uniformly/" "" drand48(3C)
.xx "acos (_lacos),/" "sin (_lsin), cos" "(_lcos), tan (_ltan), asin (_lasin)," "" trig(3M)
.xx "functions." "sinh (_lsinh), cosh" "(_lcosh), tanh (_ltanh): hyperbolic" "" sinh(3M)
.xx "" "" "ld: link editor." "" ld(1)
.xx "manipulate parts/" "frexp (_lfrexp)," "ldexp (_lldexp), modf (_lmodf):" "" frexp(3C)
.xx "" "exit:" "leave shell." "" csh(1)
.xx "" "exit:" "leave shell." "" sh(1)
.xx "" "truncate a file to a specified" "length." "truncate, ftruncate:" truncate(2)
.xx "" "getopt: get option" "letter from argument vector." "" getopt(3C)
.xx "lexical tasks." "" "lex: generate programs for simple" "" lex(1)
.xx "" "lex: generate programs for simple" "lexical tasks." "" lex(1)
.xx "(_llog10), pow (_lpow), sqrt/" "exp" "(_lexp), log (_llog), log10" "" exp(3M)
.xx "" "/ceil (_lceil), fmod (_lfmod), fabs" "(_lfabs): floor, ceiling, remainder,/" "" floor(3M)
.xx "(_lfmod), fabs (_lfabs):/" "floor" "(_lfloor), ceil (_lceil), fmod" "" floor(3M)
.xx "" "floor (_lfloor), ceil (_lceil), fmod" "(_lfmod), fabs (_lfabs): floor,/" "" floor(3M)
.xx "(_lmodf): manipulate parts of/" "frexp" "(_lfrexp), ldexp (_lldexp), modf" "" frexp(3C)
.xx "" "introduction to subroutines and" "libraries." "intro:" intro(3)
.xx "" "ranlib: convert archives to random" "libraries." "" ranlib(1)
.xx "" "ar: archive" "(library) file format." "" ar(4)
.xx "" "find ordering relation for an object" "library." "lorder:" lorder(1)
.xx "" "ar: archive and" "library maintainer." "" ar(1)
.xx "representation." "xdr:" "library routines for external data" "" xdr(3R)
.xx "procedure calls." "rpc:" "library routines for remote" "" rpc(3R)
.xx "" "life: play the game of" "life." "" life(6)
.xx "" "" "life: play the game of life." "" life(6)
.xx "lighting and shadows." "" "light: demonstrates real-time" "" light(1d)
.xx "" "light: demonstrates real-time" "lighting and shadows." "" light(1d)
.xx "" "ulimit: change or display size" "limits." "" sh(1)
.xx "" "ulimit: get and set user" "limits." "" ulimit(2)
.xx "" "and relinquish an out-going terminal" "line connection." "/undial: establish" dial(3C)
.xx "" "set terminal type, modes, speed, and" "line discipline." "getty:" getty(1M)
.xx "" "line: read one" "line." "" line(1)
.xx "object file." "linenum:" "line number entries in a common" "" linenum(4)
.xx "" "nl:" "line numbering filter." "" nl(1)
.xx "" "cut: cut out selected fields of each" "line of a file." "" cut(1)
.xx "" "send/cancel requests to an LP" "line printer." "lp, cancel:" lp(1)
.xx "" "lpr:" "line printer spooler." "" lpr(1)
.xx "" "" "line: read one line." "" line(1)
.xx "" "lsearch:" "linear search and update." "" lsearch(3C)
.xx "" "col: filter reverse" "line-feeds." "" col(1)
.xx "common object file." "" "linenum: line number entries in a" "" linenum(4)
.xx "" "comm: select or reject" "lines common to two sorted files." "" comm(1)
.xx "device." "fold: fold long" "lines for finite width output" "" fold(1)
.xx "" "head: give first few" "lines." "" head(1)
.xx "" "uniq: report repeated" "lines in a file." "" uniq(1)
.xx "" "lines of several files or subsequent" "lines of one file." "/merge same" paste(1)
.xx "lines of one/" "paste: merge same" "lines of several files or subsequent" "" paste(1)
.xx "" "link, unlink: exercise" "link and unlink system calls." "" link(1M)
.xx "" "ld:" "link editor." "" ld(1)
.xx "" "a.out: assembler and" "link editor output." "" a.out(4)
.xx "" "" "link: link to a file." "" link(2)
.xx "" "cp, ln, mv: copy," "link or move files." "" cp(1)
.xx "" "readlink: read value of a symbolic" "link." "" readlink(2)
.xx "" "link:" "link to a file." "" link(2)
.xx "" "symlink: make symbolic" "link to a file." "" symlink(2)
.xx "unlink system calls." "" "link, unlink: exercise link and" "" link(1M)
.xx "" "" "lint: a C program checker." "" lint(1)
.xx "Berkeley version)." "ls:" "list contents of directory (enhanced" "" ls(1)
.xx "" "glob: filename expand argument" "list." "" csh(1)
.xx "" "history: print history event" "list." "" csh(1)
.xx "" "shift: manipulate argument" "list." "" csh(1)
.xx "" "getgroups: get group access" "list." "" getgroups(3B)
.xx "" "dblist:" "list information about the database." "" dblist(1)
.xx "" "nlist: get entries from name" "list." "" nlist(3C)
.xx "" "nm: print name" "list." "" nm(1)
.xx "" "foreach: loop over" "list of names." "" csh(1)
.xx "" "netgroup:" "list of network groups." "" netgroup(4)
.xx "" "subj: generate a" "list of subjects from a document." "" subj(1)
.xx "" "rhosts:" "list of trusted hosts and users." "" rhosts(4)
.xx "" "hosts.equiv:" "list of trusted hosts." "" hosts.equiv(4)
.xx "" "do, for: loop over" "list of words." "" sh(1)
.xx "" "shift: manipulate argument" "list." "" sh(1)
.xx "" "varargs: variable argument" "list." "" varargs(5)
.xx "" "listen:" "listen for connections on a socket." "" listen(2)
.xx "socket." "" "listen: listen for connections on a" "" listen(2)
.xx "" "macref: produce cross-reference" "listing of macro files." "" macref(1)
.xx "" "xargs: construct argument" "list(s) and execute command." "" xargs(1)
.xx "" "refer: find and insert" "literature references in documents." "" refer(1)
.xx "parts of/" "frexp (_lfrexp), ldexp" "(_lldexp), modf (_lmodf): manipulate" "" frexp(3C)
.xx "(_lpow), sqrt/" "exp (_lexp), log" "(_llog), log10 (_llog10), pow" "" exp(3M)
.xx "" "exp (_lexp), log (_llog), log10" "(_llog10), pow (_lpow), sqrt/" "" exp(3M)
.xx "" "(_lfrexp), ldexp (_lldexp), modf" "(_lmodf): manipulate parts of/" "frexp" frexp(3C)
.xx "" "cp," "ln, mv: copy, link or move files." "" cp(1)
.xx "interface." "" "lo: software loopback network" "" lo(7)
.xx "file." "loadmap:" "load a part of the color map from a" "" loadmap(1W)
.xx "" "lav: show" "load average." "" lav(1)
.xx "" "graphically display the system" "load average." "loadav:" loadav(1W)
.xx "" "loadst: print current time and" "load statistics.." "" loadst(1)
.xx "system load average." "" "loadav: graphically display the" "" loadav(1W)
.xx "" "" "loadfont: replace the system font." "" loadfont(1G)
.xx "map from a file." "" "loadmap: load a part of the color" "" loadmap(1W)
.xx "programs." "demomakemap:" "loads colors for mex demonstration" "" demomakemap(1d)
.xx "statistics.." "" "loadst: print current time and load" "" loadst(1)
.xx "convert date and time to/" "ctime," "localtime, gmtime, asctime, tzset:" "" ctime(3C)
.xx "for program." "whereis:" "locate source, binary, and or manual" "" whereis(1)
.xx "" "end, etext, edata: last" "locations in program." "" end(3C)
.xx "memory." "plock:" "lock process, text, or data in" "" plock(2)
.xx "" "gamma:" "log gamma function." "" gamma(3M)
.xx "" "newgrp:" "log in to a new group." "" newgrp(1)
.xx "" "newgrp:" "log in to a new group." "" sh(1)
.xx "(_lpow), sqrt/" "exp (_lexp)," "log (_llog), log10 (_llog10), pow" "" exp(3M)
.xx "about RCS files." "rlog: print" "log messages and other information" "" rlog(1)
.xx "" "closelog, setlogmask: control system" "log." "syslog, openlog," syslog(3B)
.xx "" "syslogd:" "log systems messages." "" syslogd(1M)
.xx "(_lsqrt):/" "exp (_lexp), log (_llog)," "log10 (_llog10), pow (_lpow), sqrt" "" exp(3M)
.xx "" "(_lpow), sqrt (_lsqrt): exponential," "logarithm, power, square root/" "/pow" exp(3M)
.xx "" "rwho: who's" "logged in on local machines." "" rwho(1C)
.xx "environment." "" "login, cshrc: setting up a C Shell" "" login(4)
.xx "" "cshrc: csh system-wide ." "login file." "" cshrc(4)
.xx "" "" "login: login new user." "" csh(1)
.xx "" "getlogin: get" "login name." "" getlogin(3C)
.xx "" "logname: get" "login name." "" logname(1)
.xx "" "cuserid: get character" "login name of the user." "" cuserid(3S)
.xx "" "logname: return" "login name of user." "" logname(3X)
.xx "" "login:" "login new user." "" csh(1)
.xx "" "yppasswd: change" "login password in yellow pages." "" yppasswd(1)
.xx "" "passwd: change" "login password." "" passwd(1)
.xx "" "rlogin: remote" "login." "" rlogin(1C)
.xx "" "rlogind: remote" "login server." "" rlogind(1M)
.xx "" "" "login: sign on." "" login(1)
.xx "" "up a Bourne Shell environment at" "login time." "profile: setting" profile(4)
.xx "" "wsiris: remote" "login with graphics." "" wsiris(1C)
.xx "" "last: indicate last" "logins of users and teletypes." "" last(1)
.xx "" "" "logname: get login name." "" logname(1)
.xx "" "" "logname: return login name of user." "" logname(3X)
.xx "" "" "logout: end session." "" csh(1)
.xx "" "setjmp," "longjmp: non-local goto." "" setjmp(3C)
.xx "bibliography, find/" "indxbib," "lookbib: build inverted index for a" "" lookbib(1)
.xx "" "break: exit while/foreach" "loop." "" csh(1)
.xx "" "continue: cycle in" "loop." "" csh(1)
.xx "" "end: terminate" "loop." "" csh(1)
.xx "" "foreach:" "loop over list of names." "" csh(1)
.xx "" "do, for:" "loop over list of words." "" sh(1)
.xx "" "break: exit while/for" "loop." "" sh(1)
.xx "" "continue: cycle in" "loop." "" sh(1)
.xx "" "done: terminate" "loop." "" sh(1)
.xx "" "lo: software" "loopback network interface." "" lo(7)
.xx "an object library." "" "lorder: find ordering relation for" "" lorder(1)
.xx "" "/etc/mklost+found: make a" "lost+found directory for fsck." "" mklost+found(1M)
.xx "an LP line printer." "" "lp, cancel: send/cancel requests to" "" lp(1)
.xx "" "cancel: send/cancel requests to an" "LP line printer." "lp," lp(1)
.xx "" "a Centronics-interface printer with" "LP." "mkcentpr: register" mkcentpr(1M)
.xx "" "register a LaserWriter printer with" "LP." "mkps:" mkps(1M)
.xx "" "enable, disable: enable/disable" "LP printers." "" enable(1)
.xx "by deleting/" "preset: reset the" "lp queue system to a pristine state" "" preset(1M)
.xx "" "/lpshut, lpmove: start/stop the" "LP request scheduler and move/" "" lpsched(1M)
.xx "" "accept, reject: allow/prevent" "LP requests." "" accept(1M)
.xx "" "lpadmin: configure the" "LP spooling system." "" lpadmin(1M)
.xx "" "rmprinter: remove a printer from the" "LP spooling system." "" rmprinter(1M)
.xx "" "lpstat: print" "LP status information." "" lpstat(1)
.xx "system." "" "lpadmin: configure the LP spooling" "" lpadmin(1M)
.xx "scheduler and move/" "lpsched, lpshut," "lpmove: start/stop the LP request" "" lpsched(1M)
.xx "" "/log (_llog), log10 (_llog10), pow" "(_lpow), sqrt (_lsqrt): exponential,/" "" exp(3M)
.xx "" "" "lpr: line printer spooler." "" lpr(1)
.xx "the LP request scheduler and move/" "" "lpsched, lpshut, lpmove: start/stop" "" lpsched(1M)
.xx "request scheduler and move/" "lpsched," "lpshut, lpmove: start/stop the LP" "" lpsched(1M)
.xx "" "" "lpstat: print LP status information." "" lpstat(1)
.xx "srand48, seed48,/" "drand48, erand48," "lrand48, nrand48, mrand48, jrand48," "" drand48(3C)
.xx "(enhanced Berkeley version)." "" "ls: list contents of directory" "" ls(1)
.xx "" "" "lsearch: linear search and update." "" lsearch(3C)
.xx "" "" "lseek: move read/write file pointer." "" lseek(2)
.xx "asin (_lasin), acos (_lacos),/" "sin" "(_lsin), cos (_lcos), tan (_ltan)," "" trig(3M)
.xx "(_ltanh): hyperbolic/" "sinh" "(_lsinh), cosh (_lcosh), tanh" "" sinh(3M)
.xx "" "/log10 (_llog10), pow (_lpow), sqrt" "(_lsqrt): exponential, logarithm,/" "" exp(3M)
.xx "" "stat," "lstat, fstat: get file status." "" stat(2)
.xx "" "sin (_lsin), cos (_lcos), tan" "(_ltan), asin (_lasin), acos/" "" trig(3M)
.xx "" "sinh (_lsinh), cosh (_lcosh), tanh" "(_ltanh): hyperbolic functions." "" sinh(3M)
.xx "integers and long integers." "l3tol," "ltol3: convert between 3-byte" "" l3tol(3C)
.xx "" "" "m4: macro processor." "" m4(1)
.xx "" "/u3b15, u3b2, u3b5, vax, 4d60, mips," "m68000, m68k: get processor type/" "" machid(1)
.xx "" "/u3b2, u3b5, vax, 4d60, mips, m68000," "m68k: get processor type truth/" "" machid(1)
.xx "" "information about users on remote" "machines." "rnusers, rusers: return" rnusers(3X)
.xx "" "ruptime: show host status of local" "machines." "" ruptime(1C)
.xx "" "rwall: write to specified remote" "machines." "" rwall(3X)
.xx "" "rwho: who's logged in on local" "machines." "" rwho(1C)
.xx "listing of macro files." "" "macref: produce cross-reference" "" macref(1)
.xx "" "produce cross-reference listing of" "macro files." "macref:" macref(1)
.xx "permuted index." "mptx: the" "macro package for formatting a" "" mptx(5)
.xx "documents." "mm: the MM" "macro package for formatting" "" mm(5)
.xx "graphs and slides." "mv: a troff" "macro package for typesetting view" "" mv(5)
.xx "" "m4:" "macro processor." "" m4(1)
.xx "" "documents formatted with the mm" "macros." "checkmm: checks" checkmm(1)
.xx "" "alias: shell" "macros." "" csh(1)
.xx "this manual." "man:" "macros for formatting entries in" "" man(5)
.xx "" "me:" "macros for formatting papers." "" me(5)
.xx "" "documents formatted with the MM" "macros." "/osdd, checkmm: print/check" mm(1)
.xx "" "documents formatted with the mm" "macros." "mm: prints" mm(1)
.xx "" "ms: text formatting" "macros." "" ms(5)
.xx "" "" "mag: magnify pixels on the screen." "" mag(1W)
.xx "" "mtio:" "magnetic tape interface." "" mtio(7)
.xx "" "mt:" "magnetic tape manipulating program." "" mt(1)
.xx "" "mag:" "magnify pixels on the screen." "" mag(1W)
.xx "" "rebuild the data base for the" "mail aliases file." "newaliases:" newaliases(1)
.xx "" "collectmail: convert" "mail from unix to rmail format." "" collectmail(1)
.xx "" "rmail: send mail to users or read" "mail." "mail," mail(1)
.xx "" "Mail: send and receive" "mail." "" mail_bsd(1)
.xx "another." "mergemail: merge" "mail messages from one folder to" "" mergemail(1)
.xx "" "sendmail, newaliases, mailq: send" "mail over the Internet." "" sendmail(1M)
.xx "option/" "rc.tcp, rc.nfs, rc." "mail, rc.488, rc.xns: communication" "" rc.tcp(1M)
.xx "read mail." "" "mail, rmail: send mail to users or" "" mail(1)
.xx "" "" "Mail: send and receive mail." "" mail_bsd(1)
.xx "" "mail, rmail: send" "mail to users or read mail." "" mail(1)
.xx "" "a binary file for transmission via" "mail." "/uudecode: encode/decode" uuencode(1C)
.xx "" "sendmail, newaliases," "mailq: send mail over the Internet." "" sendmail(1M)
.xx "" "calloc, cfree, malloc_check:" "main memory allocator." "/realloc," malloc(3C)
.xx "" "mem, kmem:" "main memory." "" mem(7)
.xx "program." "ctags:" "maintain a tags file for a C" "" ctags(1)
.xx "groups of programs." "make:" "maintain, update, and regenerate" "" make(1)
.xx "" "ar: archive and library" "maintainer." "" ar(1)
.xx "" "intro: introduction to system" "maintenance commands and application/" "" intro(1M)
.xx "" "intro: introduction to system" "maintenance procedures." "" intro(8)
.xx "restoration." "mkboot:" "make a bootable tape for system" "" mkboot(1M)
.xx "file." "delta:" "make a delta (change) to an SCCS" "" delta(1)
.xx "" "mkdir:" "make a directory." "" mkdir(1)
.xx "" "mkdir:" "make a directory." "" mkdir(2)
.xx "ordinary file." "mknod:" "make a directory, or a special or" "" mknod(2)
.xx "fsck." "/etc/mklost+found:" "make a lost+found directory for" "" mklost+found(1M)
.xx "" "mktemp:" "make a unique file name." "" mktemp(3C)
.xx "" "makedbm:" "make a yellow pages dbm file." "" makedbm(1M)
.xx "" "mkutmp, rmutmp:" "make and delete /etc/utmp entry." "" utmp(3N)
.xx "regenerate groups of programs." "" "make: maintain, update, and" "" make(1)
.xx "" "ssp:" "make output single spaced." "" ssp(1)
.xx "" "ptx:" "make permuted index." "" ptx(1)
.xx "" "banner:" "make posters." "" banner(1)
.xx "" "readonly:" "make shell variables read-only." "" sh(1)
.xx "" "symlink:" "make symbolic link to a file." "" symlink(2)
.xx "" "makemap:" "make the default color map." "" makemap(1W)
.xx "" "script:" "make typescript of terminal session." "" script(1)
.xx "" "xnsconnect:" "make XNS connection." "" xnsconnect(3N)
.xx "file." "" "makedbm: make a yellow pages dbm" "" makedbm(1M)
.xx "" "" "makemap: make the default color map." "" makemap(1W)
.xx "cfree, malloc_check: main memory/" "" "malloc, free, realloc, calloc," "" malloc(3C)
.xx "" "/free, realloc, calloc, cfree," "malloc_check: main memory allocator." "" malloc(3C)
.xx "in this manual." "" "man: macros for formatting entries" "" man(5)
.xx "manual." "" "man, manprog: print entries in this" "" man(1)
.xx "" "tsearch, tdelete, twalk:" "manage binary search trees." "" tsearch(3C)
.xx "" "hsearch, hcreate, hdestroy:" "manage hash search tables." "" hsearch(3C)
.xx "" "mex:" "manage windows on the IRIS." "" mex(1G)
.xx "" "startup: start the window" "manager." "" startup(1W)
.xx "" "shift:" "manipulate argument list." "" csh(1)
.xx "" "shift:" "manipulate argument list." "" sh(1)
.xx "records." "fwtmp, wtmpfix:" "manipulate connect accounting" "" fwtmp(1M)
.xx "" "/ldexp (_lldexp), modf (_lmodf):" "manipulate parts of floating-point/" "" frexp(3C)
.xx "" "route: manually" "manipulate the routing tables." "" route(1M)
.xx "" "mt: magnetic tape" "manipulating program." "" mt(1)
.xx "" "inet_netof: Internet address" "manipulation routines." "/inet_lnaof," inet(3N)
.xx "manual." "man," "manprog: print entries in this" "" man(1)
.xx "" "locate source, binary, and or" "manual for program." "whereis:" whereis(1)
.xx "" "man, manprog: print entries in this" "manual." "" man(1)
.xx "" "for formatting entries in this" "manual." "man: macros" man(5)
.xx "tables." "route:" "manually manipulate the routing" "" route(1M)
.xx "" "showmap, cedit, interp: color" "map demonstration programs." "" colordemos(1d)
.xx "" "loadmap: load a part of the color" "map from a file." "" loadmap(1W)
.xx "" "ypxfr: transfer a YP" "map from some YP server to here." "" ypxfr(1M)
.xx "" "yppoll: what version of a YP" "map is at a YP server host." "" yppoll(1M)
.xx "" "makemap: make the default color" "map." "" makemap(1W)
.xx "" "which host is the YP server or" "map master?." "ypwhich:" ypwhich(1)
.xx "" "ascii:" "map of ASCII character set." "" ascii(5)
.xx "" "randomize a section of the color" "map." "randmap:" randmap(1W)
.xx "" "savemap: save a range of the color" "map." "" savemap(1W)
.xx "" "display the contents of the color" "map." "showmap:" showmap(1W)
.xx "" "value of one or more keys from a yp" "map." "ypmatch: print the" ypmatch(1)
.xx "" "force propagation of a changed YP" "map." "yppush:" yppush(1M)
.xx "" "DARPA port to RPC program number" "mapper." "portmap:" portmap(1M)
.xx "" "set the gamma correction value for" "mapping colors." "gamma:" gamma(1W)
.xx "" "ether_line: ethernet address" "mapping operations." "/ether_hostton," ethers(3R)
.xx "" "ip2mapmem, ip2unmap: multibus" "mapping operations." "ip2mapio," ip2mapio(2)
.xx "" "diffmk:" "mark differences between files." "" diffmk(1)
.xx "" "change or display file creation" "mask." "umask:" csh(1)
.xx "" "change or display file creation" "mask." "umask:" sh(1)
.xx "" "umask: set file-creation mode" "mask." "" umask(1)
.xx "" "umask: set and get file creation" "mask." "" umask(2)
.xx "" "create an error message file by" "massaging C source." "mkstr:" mkstr(1)
.xx "" "which host is the YP server or map" "master?." "ypwhich:" ypwhich(1)
.xx "" "" "mastermind: game of ""mastermind""." "" mastermind(6)
.xx "" "mastermind: game of" """mastermind""." "" mastermind(6)
.xx "" "regular expression compile and" "match routines." "regexp:" regexp(5)
.xx "" "neqn: format" "mathematical text for nroff." "" neqn(1)
.xx "" "eqn: format" "mathematical text for troff." "" eqn(1)
.xx "" "" "matherr: error-handling function." "" matherr(3M)
.xx "" "" "maze: generate a maze." "" maze(6)
.xx "" "maze: generate a" "maze." "" maze(6)
.xx "" "" "me: macros for formatting papers." "" me(5)
.xx "" "bcd: convert to antique" "media." "" bcd(6)
.xx "" "" "mem, kmem: main memory." "" mem(7)
.xx "memset: memory operations." "" "memccpy, memchr, memcmp, memcpy," "" memory(3C)
.xx "memory operations." "memccpy," "memchr, memcmp, memcpy, memset:" "" memory(3C)
.xx "operations." "memccpy, memchr," "memcmp, memcpy, memset: memory" "" memory(3C)
.xx "" "memccpy, memchr, memcmp," "memcpy, memset: memory operations." "" memory(3C)
.xx "" "calloc, cfree, malloc_check: main" "memory allocator." "/free, realloc," malloc(3C)
.xx "" "shmctl: shared" "memory control operations." "" shmctl(2)
.xx "" "queue, semaphore set or shared" "memory id." "ipcrm: remove a message" ipcrm(1)
.xx "" "mem, kmem: main" "memory." "" mem(7)
.xx "" "memchr, memcmp, memcpy, memset:" "memory operations." "memccpy," memory(3C)
.xx "" "shmat, shmdt: shared" "memory operations." "" shmop(2)
.xx "" "lock process, text, or data in" "memory." "plock:" plock(2)
.xx "" "shmget: get shared" "memory segment." "" shmget(2)
.xx "" "vmstat: report virtual" "memory statistics." "" vmstat(1M)
.xx "" "memccpy, memchr, memcmp, memcpy," "memset: memory operations." "" memory(3C)
.xx "" "sort: sort and/or" "merge files." "" sort(1)
.xx "to another." "mergemail:" "merge mail messages from one folder" "" mergemail(1)
.xx "" "merge: three-way file" "merge." "" merge(1)
.xx "" "acctmerg:" "merge or add total accounting files." "" acctmerg(1M)
.xx "" "rcsmerge:" "merge RCS revisions." "" rcsmerge(1)
.xx "subsequent lines of one/" "paste:" "merge same lines of several files or" "" paste(1)
.xx "" "" "merge: three-way file merge." "" merge(1)
.xx "one folder to another." "" "mergemail: merge mail messages from" "" mergemail(1)
.xx "" "" "mesg: permit or deny messages." "" mesg(1)
.xx "" "msgctl:" "message control operations." "" msgctl(2)
.xx "" "mkstr: create an error" "message file by massaging C source." "" mkstr(1)
.xx "" "recv, recvfrom, recvmsg: receive a" "message from a socket." "" recv(2)
.xx "" "send, sendto, sendmsg: send a" "message from a socket." "" send(2)
.xx "" "motd:" "message of the day." "" motd(4)
.xx "" "msgsnd, msgrcv:" "message operations." "" msgop(2)
.xx "" "icmp: Internet Control" "Message Protocol." "" icmp(7P)
.xx "" "msgget: get" "message queue." "" msgget(2)
.xx "shared memory id." "ipcrm: remove a" "message queue, semaphore set or" "" ipcrm(1)
.xx "RCS files." "rlog: print log" "messages and other information about" "" rlog(1)
.xx "" "analyze and disperse compiler error" "messages." "error:" error(1)
.xx "" "mergemail: merge mail" "messages from one folder to another." "" mergemail(1)
.xx "" "mesg: permit or deny" "messages." "" mesg(1)
.xx "" "sys_errlist, sys_nerr: system error" "messages." "perror, errno," perror(3C)
.xx "" "syslogd: log systems" "messages." "" syslogd(1M)
.xx "" "afm: Adobe POSTSCRIPT font" "metrics file format." "" afm(4)
.xx "" "demomakemap: loads colors for" "mex demonstration programs." "" demomakemap(1d)
.xx "" "" "mex: manage windows on the IRIS." "" mex(1G)
.xx "" "/u3b, u3b15, u3b2, u3b5, vax, 4d60," "mips, m68000, m68k: get processor/" "" machid(1)
.xx "" "/acctwtmp: overview of accounting and" "miscellaneous accounting commands." "" acct(1M)
.xx "" "intro: introduction to" "miscellany." "" intro(5)
.xx "system restoration." "" "mkboot: make a bootable tape for" "" mkboot(1M)
.xx "floppy disk." "" "mkbootflp: create a bootable unix" "" mkbootflp(1M)
.xx "routines." "mkf2c," "mkc2f: generate C-FORTRAN interface" "" mkf2c(1)
.xx "Centronics-interface printer with/" "" "mkcentpr: register a" "" mkcentpr(1M)
.xx "dependencies." "" "mkdepend: compute header file" "" mkdepend(1)
.xx "" "" "mkdir: make a directory." "" mkdir(1)
.xx "" "" "mkdir: make a directory." "" mkdir(2)
.xx "interface routines." "" "mkf2c, mkc2f: generate C-FORTRAN" "" mkf2c(1)
.xx "" "" "mkfs: construct a file system." "" mkfs(1M)
.xx "printer." "" "mknetpr: provide access to a remote" "" mknetpr(1M)
.xx "" "" "mknod: build special file." "" mknod(1M)
.xx "special or ordinary file." "" "mknod: make a directory, or a" "" mknod(2)
.xx "with LP." "" "mkps: register a LaserWriter printer" "" mkps(1M)
.xx "by massaging C source." "" "mkstr: create an error message file" "" mkstr(1)
.xx "" "" "mktemp: make a unique file name." "" mktemp(3C)
.xx "/etc/utmp entry." "" "mkutmp, rmutmp: make and delete" "" utmp(3N)
.xx "documents." "mm: the" "MM macro package for formatting" "" mm(5)
.xx "" "checks documents formatted with the" "mm macros." "checkmm:" checkmm(1)
.xx "" "documents formatted with the" "MM macros." "/checkmm: print/check" mm(1)
.xx "" "prints documents formatted with the" "mm macros." "mm:" mm(1)
.xx "documents formatted with the MM/" "" "mm, osdd, checkmm: print/check" "" mm(1)
.xx "the mm macros." "" "mm: prints documents formatted with" "" mm(1)
.xx "formatting documents." "" "mm: the MM macro package for" "" mm(5)
.xx "graphs, and slides." "" "mmt, mvt: typeset documents, view" "" mmt(1)
.xx "" "" "mmt: typeset documents." "" mmt(1)
.xx "about filesystems." "" "mntent, fstab: static information" "" mntent(4)
.xx "" "chmod: change" "mode." "" chmod(1)
.xx "" "umask: set file-creation" "mode mask." "" umask(1)
.xx "" "switch the system to multi-user" "mode." "multi:" multi(1M)
.xx "" "chmod: change" "mode of file." "" chmod(2)
.xx "" "switch the system to single-user" "mode." "single:" single(1M)
.xx "" "display a simulated architectural" "model." "arch:" arch(1d)
.xx "" "model:" "model identification." "" model(4)
.xx "" "" "model: model identification." "" model(4)
.xx "" "jet: depthcued wireframe" "model of a jet fighter." "" jet(1d)
.xx "" "shuttle: depthcued wireframe" "model of the space shuttle." "" shuttle(1d)
.xx "" "getty: set terminal type," "modes, speed, and line discipline." "" getty(1M)
.xx "" "bs: a compiler/interpreter for" "modest-sized programs." "" bs(1)
.xx "" "frexp (_lfrexp), ldexp (_lldexp)," "modf (_lmodf): manipulate parts of/" "" frexp(3C)
.xx "" "touch: update access and" "modification times of a file." "" touch(1)
.xx "" "utime: set file access and" "modification times." "" utime(2)
.xx "file." "rpc.passwd: server for" "modifying yellow pages password" "" rpc.passwd(1M)
.xx "" "of the Cytochrome P450 protein" "molecule." "heme: depthcued display" heme(1d)
.xx "" "/ckpacct, dodisk, lastlogin," "monacct, nulladm, prctmp, prdaily,/" "" acctsh(1M)
.xx "prepare execution profile." "" "monitor, resume_prof, suspend_prof:" "" monitor(3C)
.xx "" "ether:" "monitor traffic on the Ethernet." "" ether(3X)
.xx "" "uusub:" "monitor uucp network." "" uusub(1M)
.xx "" "" "moo: guessing game." "" moo(6)
.xx "" "ypmatch: print the value of one or" "more keys from a yp map." "" ypmatch(1)
.xx "crt viewing." "" "more, page: file perusal filter for" "" more(1)
.xx "" "" "motd: message of the day." "" motd(4)
.xx "" "functions with ``optimal'' cursor" "motion." "curses: screen" curses(3X)
.xx "" "mount:" "mount a file system." "" mount(2)
.xx "" "nfsmount:" "mount an NFS file system." "" nfsmount(2)
.xx "" "mount, umount:" "mount and dismount filesystems." "" mount(1M)
.xx "mounted filesystems." "" "mount: keep track of remotely" "" mount(3X)
.xx "" "" "mount: mount a file system." "" mount(2)
.xx "" "mountd: NFS" "mount request server." "" mountd(1M)
.xx "" "setmnt: establish" "mount table." "" setmnt(1M)
.xx "filesystems." "" "mount, umount: mount and dismount" "" mount(1M)
.xx "" "" "mountd: NFS mount request server." "" mountd(1M)
.xx "" "/etc/mtab:" "mounted file system table." "" mtab(4)
.xx "" "rmtab: remotely" "mounted file system table." "" rmtab(4)
.xx "" "mount: keep track of remotely" "mounted filesystems." "" mount(3X)
.xx "" "showmount: show all remote" "mounts." "" showmount(1M)
.xx "" "mvdir:" "move a directory." "" mvdir(1M)
.xx "" "cp, ln, mv: copy, link or" "move files." "" cp(1)
.xx "" "lseek:" "move read/write file pointer." "" lseek(2)
.xx "" "the LP request scheduler and" "move requests." "/lpmove: start/stop" lpsched(1M)
.xx "formatting a permuted index." "" "mptx: the macro package for" "" mptx(5)
.xx "" "drand48, erand48, lrand48, nrand48," "mrand48, jrand48, srand48, seed48,/" "" drand48(3C)
.xx "" "" "ms: text formatting macros." "" ms(5)
.xx "" "" "msgctl: message control operations." "" msgctl(2)
.xx "" "" "msgget: get message queue." "" msgget(2)
.xx "" "msgsnd," "msgrcv: message operations." "" msgop(2)
.xx "" "" "msgsnd, msgrcv: message operations." "" msgop(2)
.xx "program." "" "mt: magnetic tape manipulating" "" mt(1)
.xx "" "" "mtio: magnetic tape interface." "" mtio(7)
.xx "multi-user mode." "" "multi: switch the system to" "" multi(1M)
.xx "" "ip2mapio, ip2mapmem, ip2unmap:" "multibus mapping operations." "" ip2mapio(2)
.xx "" "select: synchronous I/O" "multiplexing - TCP." "" select(2)
.xx "" "multi: switch the system to" "multi-user mode." "" multi(1M)
.xx "" "switch:" "multi-way command branch." "" csh(1)
.xx "" "case:" "multi-way command branch." "" sh(1)
.xx "typesetting view graphs and slides." "" "mv: a troff macro package for" "" mv(5)
.xx "" "cp, ln," "mv: copy, link or move files." "" cp(1)
.xx "" "" "mvdir: move a directory." "" mvdir(1M)
.xx "and slides." "mmt," "mvt: typeset documents, view graphs," "" mmt(1)
.xx "" "" "mvt: typeset view graphs and slides." "" mvt(1)
.xx "" "uname: print system" "name and version information." "" uname(1)
.xx "" "hosts: host" "name data base." "" hosts(4)
.xx "" "networks: network" "name data base." "" networks(4)
.xx "" "protocols: protocol" "name data base." "" protocols(4)
.xx "" "services: service" "name data base." "" services(4)
.xx "" "devnm: device" "name." "" devnm(1M)
.xx "" "tmpnam, tempnam: create a" "name for a temporary file." "" tmpnam(3S)
.xx "" "ctermid: generate file" "name for terminal." "" ctermid(3S)
.xx "" "getpw: get" "name from UID." "" getpw(3C)
.xx "" "getenv: return value for environment" "name." "" getenv(3C)
.xx "" "getlogin: get login" "name." "" getlogin(3C)
.xx "" "getsockname: get socket" "name." "" getsockname(2)
.xx "" "nlist: get entries from" "name list." "" nlist(3C)
.xx "" "nm: print" "name list." "" nm(1)
.xx "" "logname: get login" "name." "" logname(1)
.xx "" "mktemp: make a unique file" "name." "" mktemp(3C)
.xx "" "rename: change the" "name of a file." "" rename(2)
.xx "" "ttyname, isatty: find" "name of a terminal." "" ttyname(3C)
.xx "" "getpeername: get" "name of connected peer." "" getpeername(2)
.xx "" "/setdomainname: get/set" "name of current domain." "" getdomainname(2)
.xx "" "domainname: set or display" "name of current domain system." "" domainname(1)
.xx "" "gethostname: get" "name of current host." "" gethostname(2)
.xx "" "hostname: set or print" "name of current host system." "" hostname(1)
.xx "" "uname: get" "name of current UNIX system." "" uname(2)
.xx "" "sethostname: set" "name of host cpu." "" sethostname(2)
.xx "" "cuserid: get character login" "name of the user." "" cuserid(3S)
.xx "" "logname: return login" "name of user." "" logname(3X)
.xx "" "pwd: working directory" "name." "" pwd(1)
.xx "" "sgbounce: provide network" "name service." "" sgbounce(1M)
.xx "" "bind: bind a" "name to a socket." "" bind(2)
.xx "" "tty: get the terminal's" "name." "" tty(1)
.xx "" "dirname: deliver portions of path" "names." "basename," basename(1)
.xx "" "foreach: loop over list of" "names." "" csh(1)
.xx "" "term: conventional" "names for terminals." "" term(5)
.xx "" "ncheck: generate" "names from i-numbers." "" ncheck(1M)
.xx "" "id: print user and group IDs and" "names." "" id(1)
.xx "i-numbers." "" "ncheck: generate names from" "" ncheck(1M)
.xx "a document." "" "ndx: create a subject-page index for" "" ndx(1)
.xx "" "character definitions for eqn and" "neqn." "eqnchar: special" eqnchar(5)
.xx "nroff." "" "neqn: format mathematical text for" "" neqn(1)
.xx "" "" "netgroup: list of network groups." "" netgroup(4)
.xx "" "" "netstat: show network status." "" netstat(1)
.xx "" "sgboot: provide" "network boot service." "" sgboot(1M)
.xx "" "convert values between host and" "network byte order." "/ntohl, ntohs:" byteorder(3N)
.xx "number." "/find an available" "network channel or return channel" "" xnsfile(3N)
.xx "" "setnetent, endnetent: get" "network entry." "/getnetbyname," getnetent(3N)
.xx "" "nfs:" "network file system." "" nfs(7)
.xx "" "nfsstat:" "Network File System statistics." "" nfsstat(1M)
.xx "" "endnetgrent, innetgr: get" "network group entry." "/setnetgrent," getnetgrent(3R)
.xx "" "netgroup: list of" "network groups." "" netgroup(4)
.xx "" "sethostent, endhostent: get" "network host entry." "/gethostent," gethostbyname(3N)
.xx "" "send ICMP ECHO_REQUEST packets to" "network hosts." "ping:" ping(1M)
.xx "" "lo: software loopback" "network interface." "" lo(7)
.xx "" "ifconfig: configure" "network interface parameters." "" ifconfig(1M)
.xx "" "networks:" "network name data base." "" networks(4)
.xx "" "sgbounce: provide" "network name service." "" sgbounce(1M)
.xx "" "routed:" "network routing daemon." "" routed(1M)
.xx "" "rwalld:" "network rwall server." "" rwalld(1M)
.xx "" "rwall: write to all users over a" "network." "" rwall(1M)
.xx "" "scatter data in order to check the" "network." "spray:" spray(3X)
.xx "" "netstat: show" "network status." "" netstat(1)
.xx "" "/xnsread, xnswrite, xsh: XNS" "network support routines." "" xnslib(3X)
.xx "" "xnslib: XNS" "network support subroutines." "" xnslib(3N)
.xx "" "xnsd:" "network utility daemon." "" xnsd(1M)
.xx "" "uusub: monitor uucp" "network." "" uusub(1M)
.xx "" "networking: introduction to" "networking facilities." "" intro(7P)
.xx "networking facilities." "" "networking: introduction to" "" intro(7P)
.xx "" "" "networks: network name data base." "" networks(4)
.xx "" "creat: create a" "new file or rewrite an existing one." "" creat(2)
.xx "" "newgrp: log in to a" "new group." "" newgrp(1)
.xx "" "newgrp: log in to a" "new group." "" sh(1)
.xx "" "fork: create a" "new process." "" fork(2)
.xx "" "login: login" "new user." "" csh(1)
.xx "the Internet." "sendmail," "newaliases, mailq: send mail over" "" sendmail(1M)
.xx "for the mail aliases file." "" "newaliases: rebuild the data base" "" newaliases(1)
.xx "file." "" "newform: change the format of a text" "" newform(1)
.xx "" "" "newgrp: log in to a new group." "" newgrp(1)
.xx "" "" "newgrp: log in to a new group." "" sh(1)
.xx "" "news: print" "news items." "" news(1)
.xx "" "" "news: print news items." "" news(1)
.xx "" "/fetch, store, delete, firstkey," "nextkey: data base subroutines." "" dbm(3X)
.xx "" "nfsd, biod:" "NFS daemons." "" nfsd(1M)
.xx "" "nfssvc, async_daemon:" "NFS daemons." "" nfssvc(2)
.xx "" "nfsmount: mount an" "NFS file system." "" nfsmount(2)
.xx "" "exports:" "NFS filesystems being exported." "" exports(4)
.xx "" "mountd:" "NFS mount request server." "" mountd(1M)
.xx "" "" "nfs: network file system." "" nfs(7)
.xx "communication option/" "rc.tcp, rc." "nfs, rc.mail, rc.488, rc.xns:" "" rc.tcp(1M)
.xx "" "" "nfsd, biod: NFS daemons." "" nfsd(1M)
.xx "" "" "nfsmount: mount an NFS file system." "" nfsmount(2)
.xx "statistics." "" "nfsstat: Network File System" "" nfsstat(1M)
.xx "" "" "nfssvc, async_daemon: NFS daemons." "" nfssvc(2)
.xx "" "" "nice: change priority of a process." "" nice(2)
.xx "" "" "nice: run a command at low priority." "" nice(1)
.xx "" "" "nice: run low priority process." "" csh(1)
.xx "" "" "nl: line numbering filter." "" nl(1)
.xx "" "" "nlist: get entries from name list." "" nlist(3C)
.xx "" "" "nm: print name list." "" nm(1)
.xx "hangups (sh only)." "" "nohup: run a command immune to" "" nohup(1)
.xx "hangups." "" "nohup: run command immune to" "" csh(1)
.xx "" "setjmp, longjmp:" "non-local goto." "" setjmp(3C)
.xx "seed48,/" "drand48, erand48, lrand48," "nrand48, mrand48, jrand48, srand48," "" drand48(3C)
.xx "" "" "nroff: format or typeset text." "" nroff(1)
.xx "" "" "nroff: format text." "" nroff(1)
.xx "" "neqn: format mathematical text for" "nroff." "" neqn(1)
.xx "" "nterm: terminal driving tables for" "nroff." "" nterm(5)
.xx "" "tbl: format tables for" "nroff or troff." "" tbl(1)
.xx "" "tbl: prepares tables for" "nroff or troff." "" tbl(1)
.xx "constructs." "deroff: remove" "nroff/troff, tbl, and eqn" "" deroff(1)
.xx "nroff." "" "nterm: terminal driving tables for" "" nterm(5)
.xx "host and network byte/" "htonl, htons," "ntohl, ntohs: convert values between" "" byteorder(3N)
.xx "and network/" "htonl, htons, ntohl," "ntohs: convert values between host" "" byteorder(3N)
.xx "" "::" "null command." "" sh(1)
.xx "" "" "null: data sink." "" null(7)
.xx "" "/ckpacct, dodisk, lastlogin, monacct," "nulladm, prctmp, prdaily, prtacct,/" "" acctsh(1M)
.xx "" "ASCII string to floating-point" "number." "atof (_latof): convert" atof(3C)
.xx "English." "" "number: convert Arabic numerals to" "" number(6)
.xx "" "rpc: rpc program" "number data base." "" rpc(4)
.xx "file." "linenum: line" "number entries in a common object" "" linenum(4)
.xx "" "factor: factor a" "number." "" factor(1)
.xx "" "arithmetic: provide drill in" "number facts." "" arithmetic(6)
.xx "" "/initstate, setstate: better random" "number generator; routines for/" "" random(3B)
.xx "" "getrpcport: get RPC port" "number." "" getrpcport(3R)
.xx "" "portmap: DARPA port to RPC program" "number mapper." "" portmap(1M)
.xx "" "df: report" "number of free disk blocks." "" df(1)
.xx "" "(_d_gcvt): convert floating-point" "number to string." "/(_d_fcvt), gcvt" ecvt(3C)
.xx "" "network channel or return channel" "number." "/find an available" xnsfile(3N)
.xx "" "nl: line" "numbering filter." "" nl(1)
.xx "" "uniformly distributed pseudo-random" "numbers." "/seed48, lcong48: generate" drand48(3C)
.xx "" "manipulate parts of floating-point" "numbers." "/(_lldexp), modf (_lmodf):" frexp(3C)
.xx "" "to system calls and error" "numbers." "intro: introduction" intro(2)
.xx "" "number: convert Arabic" "numerals to English." "" number(6)
.xx "" "" "nx: XNS Ethernet driver." "" nx(7)
.xx "" "line number entries in a common" "object file." "linenum:" linenum(4)
.xx "" "scnhdr: section header for a common" "object file." "" scnhdr(4)
.xx "" "size: size of an" "object file." "" size(1)
.xx "" "filehdr: file header for common" "object files." "" filehdr(4)
.xx "" "find ordering relation for an" "object library." "lorder:" lorder(1)
.xx "" "/find the printable strings in an" "object, or other binary file." "" strings(1)
.xx "" "od:" "octal dump." "" od(1)
.xx "" "" "od: octal dump." "" od(1)
.xx "" "a new file or rewrite an existing" "one." "creat: create" creat(2)
.xx "" "several files or subsequent lines of" "one file." "/merge same lines of" paste(1)
.xx "" "mergemail: merge mail messages from" "one folder to another." "" mergemail(1)
.xx "" "line: read" "one line." "" line(1)
.xx "" "ypmatch: print the value of" "one or more keys from a yp map." "" ypmatch(1)
.xx "command scripts." "" "onintr: process interrupts in" "" csh(1)
.xx "" "run a command immune to hangups (sh" "only)." "nohup:" nohup(1)
.xx "" "fopen, freopen, fdopen:" "open a stream." "" fopen(3S)
.xx "" "dup: duplicate an" "open file descriptor." "" dup(2)
.xx "" "open:" "open for reading or writing." "" open(2)
.xx "" "" "open: open for reading or writing." "" open(2)
.xx "rewinddir, closedir: directory/" "" "opendir, readdir, telldir, seekdir," "" directory(3B)
.xx "rewinddir, closedir: directory/" "" "opendir, readdir, telldir, seekdir," "" directory(3C)
.xx "control system log." "syslog," "openlog, closelog, setlogmask:" "" syslog(3B)
.xx "" "get version information from the" "operating system." "getversion:" getversion(2)
.xx "" "ffs: bit string" "operation." "" ffs(3B)
.xx "" "tgoto, tputs: terminal independent" "operation routines." "/tgetstr," termcap(3X)
.xx "" "bcmp, bzero, bswap: byte string" "operations." "bcopy," bstring(3C)
.xx "" "rewinddir, closedir: directory" "operations." "/telldir, seekdir," directory(3B)
.xx "" "rewinddir, closedir: directory" "operations." "/telldir, seekdir," directory(3C)
.xx "" "ether_line: ethernet address mapping" "operations." "/ether_hostton," ethers(3R)
.xx "" "ip2unmap: multibus mapping" "operations." "ip2mapio, ip2mapmem," ip2mapio(2)
.xx "" "memcmp, memcpy, memset: memory" "operations." "memccpy, memchr," memory(3C)
.xx "" "msgctl: message control" "operations." "" msgctl(2)
.xx "" "msgsnd, msgrcv: message" "operations." "" msgop(2)
.xx "" "semctl: semaphore control" "operations." "" semctl(2)
.xx "" "semop: semaphore" "operations." "" semop(2)
.xx "" "shmctl: shared memory control" "operations." "" shmctl(2)
.xx "" "shmat, shmdt: shared memory" "operations." "" shmop(2)
.xx "" "strtok, index, rindex: string" "operations." "/strspn, strcspn," string(3C)
.xx "" "join: relational database" "operator." "" join(1)
.xx "" "curses: screen functions with" "``optimal'' cursor motion." "" curses(3X)
.xx "" "rc.488, rc.xns: communication" "option initialization." "/rc.mail," rc.tcp(1M)
.xx "" "getopt: get" "option letter from argument vector." "" getopt(3C)
.xx "" "fcntl: file control" "options." "" fcntl(5)
.xx "" "stty: set the" "options for a terminal." "" stty(1)
.xx "" "getopt: parse command" "options." "" getopt(1)
.xx "" "getsockopt, setsockopt: get and set" "options on sockets." "" getsockopt(2)
.xx "" "values between host and network byte" "order." "/htons, ntohl, ntohs: convert" byteorder(3N)
.xx "" "psrev: select or reverse page" "order of a POSTSCRIPT file." "" psrev(1)
.xx "" "spray: scatter data in" "order to check the network." "" spray(3X)
.xx "library." "lorder: find" "ordering relation for an object" "" lorder(1)
.xx "" "make a directory, or a special or" "ordinary file." "mknod:" mknod(2)
.xx "based on ex." "vi, view: screen" "oriented (visual) display editor" "" vi(1)
.xx "formatted with the MM macros." "mm," "osdd, checkmm: print/check documents" "" mm(1)
.xx "" "/undial: establish and relinquish an" "out-going terminal line connection." "" dial(3C)
.xx "" "a.out: assembler and link editor" "output." "" a.out(4)
.xx "" "fold long lines for finite width" "output device." "fold:" fold(1)
.xx "" "tc: troff" "output interpreter." "" tc(1)
.xx "" "troff: description of" "output language." "" troff(5)
.xx "" "fprintf, sprintf: print formatted" "output." "printf," printf(3S)
.xx "" "ssp: make" "output single spaced." "" ssp(1)
.xx "" "set60, set30, setntsc: set video" "output type." "" set60(1d)
.xx "" "writev: write" "output." "" writev(3B)
.xx "" "rwall: write to all users" "over a network." "" rwall(1M)
.xx "" "foreach: loop" "over list of names." "" csh(1)
.xx "" "do, for: loop" "over list of words." "" sh(1)
.xx "" "newaliases, mailq: send mail" "over the Internet." "sendmail," sendmail(1M)
.xx "command." "exec:" "overlay shell with specified" "" csh(1)
.xx "command." "exec:" "overlay shell with specified" "" sh(1)
.xx "" "/acctdusg, accton, acctwtmp:" "overview of accounting and/" "" acct(1M)
.xx "" "chown: change" "owner and group of a file." "" chown(2)
.xx "" "chown, chgrp: change" "owner or group." "" chown(1)
.xx "" "depthcued display of the Cytochrome" "P450 protein molecule." "heme:" heme(1d)
.xx "expand files." "" "pack, pcat, unpack: compress and" "" pack(1)
.xx "" "/endibent, getibent, ibnflags:" "package for dealing with ibtab/" "" ibtab(3N)
.xx "index." "mptx: the macro" "package for formatting a permuted" "" mptx(5)
.xx "" "mm: the MM macro" "package for formatting documents." "" mm(5)
.xx "and slides." "mv: a troff macro" "package for typesetting view graphs" "" mv(5)
.xx "" "standard buffered input/output" "package." "stdio:" stdio(3S)
.xx "" "standard interprocess communication" "package." "ftok:" stdipc(3C)
.xx "" "xns: interface to XNS Sequenced" "Packet Protocol." "" xns(7)
.xx "" "spray: spray" "packets." "" spray(1M)
.xx "" "ping: send ICMP ECHO_REQUEST" "packets to network hosts." "" ping(1M)
.xx "viewing." "more," "page: file perusal filter for crt" "" more(1)
.xx "" "psrev: select or reverse" "page order of a POSTSCRIPT file." "" psrev(1)
.xx "" "getpagesize: get system" "page size." "" getpagesize(2)
.xx "" "pagesize: print system" "page size." "" pagesize(1)
.xx "" "yperr_string, ypprot_err: yellow" "pages client interface." "/yp_master," ypclnt(3R)
.xx "" "ypinit: build and install yellow" "pages database." "" ypinit(1M)
.xx "" "ypmake: rebuild yellow" "pages database." "" ypmake(1M)
.xx "" "makedbm: make a yellow" "pages dbm file." "" makedbm(1M)
.xx "" "server for modifying yellow" "pages password file." "rpc.passwd:" rpc.passwd(1M)
.xx "" "ypserv, ypbind: yellow" "pages server and binder processes." "" ypserv(1M)
.xx "" "yppasswd: update Yellow" "Pages user password." "" yppasswd(3X)
.xx "" "change login password in yellow" "pages." "yppasswd:" yppasswd(1)
.xx "" "" "pagesize: print system page size." "" pagesize(1)
.xx "terminal." "4014:" "paginator for the Tektronix 4014" "" 4014(1)
.xx "" "drum:" "paging device." "" drum(7)
.xx "" "socketpair: create a" "pair of connected sockets." "" socketpair(2)
.xx "" "me: macros for formatting" "papers." "" me(5)
.xx "" "configure network interface" "parameters." "ifconfig:" ifconfig(1M)
.xx "" "set: set shell flags or positional" "parameters." "" sh(1)
.xx "" "get process, process group, and" "parent process IDs." "/getppid:" getpid(2)
.xx "" "getopt:" "parse command options." "" getopt(1)
.xx "" "ypset: point ypbind at a" "particular server." "" ypset(1M)
.xx "" "rootcopy: IRIS terminal root" "partition copy." "" rootcopy(1M)
.xx "" "/(_lldexp), modf (_lmodf): manipulate" "parts of floating-point numbers." "" frexp(3C)
.xx "68010/68020." "cc, pc, f77: C," "Pascal and FORTRAN compilers for the" "" cc(1)
.xx "" "pc:" "Pascal compiler for the 68010/68020." "" pc(1)
.xx "" "setfpe, fpecleanup: FORTRAN and" "Pascal floating-point exception/" "" setfpe(3X)
.xx "" "" "passwd: change login password." "" passwd(1)
.xx "" "" "passwd: password file." "" passwd(4)
.xx "pages password file." "rpc." "passwd: server for modifying yellow" "" rpc.passwd(1M)
.xx "" "getpwnam, setpwent, endpwent: get" "password file entry." "/getpwuid," getpwent(3C)
.xx "" "putpwent: write" "password file entry." "" putpwent(3C)
.xx "" "passwd:" "password file." "" passwd(4)
.xx "" "server for modifying yellow pages" "password file." "rpc.passwd:" rpc.passwd(1M)
.xx "" "getpass: read a" "password." "" getpass(3C)
.xx "" "yppasswd: change login" "password in yellow pages." "" yppasswd(1)
.xx "" "passwd: change login" "password." "" passwd(1)
.xx "" "yppasswd: update Yellow Pages user" "password." "" yppasswd(3X)
.xx "" "pwck, grpck:" "password/group file checkers." "" pwck(1M)
.xx "files or subsequent lines of one/" "" "paste: merge same lines of several" "" paste(1)
.xx "" "dirname: deliver portions of" "path names." "basename," basename(1)
.xx "" "getwd: get current working directory" "pathname." "" getwd(3C)
.xx "directory." "getcwd: get" "pathname of current working" "" getcwd(3C)
.xx "" "egrep, fgrep: search a file for a" "pattern." "grep," grep(1)
.xx "language." "awk:" "pattern scanning and processing" "" awk(1)
.xx "" "" "pause: suspend process until signal." "" pause(2)
.xx "compilers for the 68010/68020." "cc," "pc, f77: C, Pascal and FORTRAN" "" cc(1)
.xx "68010/68020." "" "pc: Pascal compiler for the" "" pc(1)
.xx "files." "pack," "pcat, unpack: compress and expand" "" pack(1)
.xx "process." "popen," "pclose: initiate pipe to/from a" "" popen(3S)
.xx "4d60, mips, m68000, m68k: get/" "" "pdp11, u3b, u3b15, u3b2, u3b5, vax," "" machid(1)
.xx "" "getpeername: get name of connected" "peer." "" getpeername(2)
.xx "" "mesg:" "permit or deny messages." "" mesg(1)
.xx "" "the macro package for formatting a" "permuted index." "mptx:" mptx(5)
.xx "" "ptx:" "permuted index." "" ptx(1)
.xx "" "ptx: make" "permuted index." "" ptx(1)
.xx "" "acct:" "per-process accounting file format." "" acct(4)
.xx "" "acctcms: command summary from" "per-process accounting records." "" acctcms(1M)
.xx "sys_nerr: system error messages." "" "perror, errno, sys_errlist," "" perror(3C)
.xx "" "more, page: file" "perusal filter for crt viewing." "" more(1)
.xx "" "tc:" "phototypesetter simulator." "" tc(1)
.xx "physical addresses." "" "phys: allow a process to access" "" phys(2)
.xx "" "phys: allow a process to access" "physical addresses." "" phys(2)
.xx "" "grap:" "pic preprocessor for drawing graphs." "" grap(1)
.xx "simple pictures." "" "pic: troff preprocessor for drawing" "" pic(1)
.xx "" "preprocessor for drawing simple" "pictures." "pic: troff" pic(1)
.xx "" "shadow: full-screen armchair" "pilot's view of the dogfight." "" shadow(1d)
.xx "to network hosts." "" "ping: send ICMP ECHO_REQUEST packets" "" ping(1M)
.xx "channel." "" "pipe: create an interprocess" "" pipe(2)
.xx "" "tee:" "pipe fitting." "" tee(1)
.xx "" "popen, pclose: initiate" "pipe to/from a process." "" popen(3S)
.xx "" "text: dragging and scrolling of" "pixel text." "" text(1d)
.xx "" "mag: magnify" "pixels on the screen." "" mag(1W)
.xx "" "fish:" "play ``Go Fish''." "" fish(6)
.xx "" "life:" "play the game of life." "" life(6)
.xx "" "worm:" "play the growing worm game." "" worm(6)
.xx "in memory." "" "plock: lock process, text, or data" "" plock(2)
.xx "" "psplot: convert" "plot files to POSTSCRIPT format." "" psplot(1)
.xx "" "" "pnch: file format for card images." "" pnch(4)
.xx "" "fpsigset: C floating" "point exception handling system." "" fpsigset(3C)
.xx "" "ypset:" "point ypbind at a particular server." "" ypset(1M)
.xx "" "rewind, ftell: reposition a file" "pointer in a stream." "fseek," fseek(3S)
.xx "" "lseek: move read/write file" "pointer." "" lseek(2)
.xx "" "extract FORTRAN-callable entry" "points from a C file." "extcentry:" extcentry(1)
.xx "" "popd:" "pop shell directory stack." "" csh(1)
.xx "" "" "popd: pop shell directory stack." "" csh(1)
.xx "a process." "" "popen, pclose: initiate pipe to/from" "" popen(3S)
.xx "" "getrpcport: get RPC" "port number." "" getrpcport(3R)
.xx "" "devport: assign a serial" "port to an external graphics device." "" devport(1G)
.xx "" "portmap: DARPA" "port to RPC program number mapper." "" portmap(1M)
.xx "" "data base of terminal types by" "port." "ttytype:" ttytype(4)
.xx "" "basename, dirname: deliver" "portions of path names." "" basename(1)
.xx "number mapper." "" "portmap: DARPA port to RPC program" "" portmap(1M)
.xx "" "duart: on board serial" "ports." "" duart(7)
.xx "" "set: set shell flags or" "positional parameters." "" sh(1)
.xx "" "banner: make" "posters." "" banner(1)
.xx "" "select or reverse page order of a" "POSTSCRIPT file." "psrev:" psrev(1)
.xx "" "afm: Adobe" "POSTSCRIPT font metrics file format." "" afm(4)
.xx "" "enscript: convert text files to" "POSTSCRIPT format for printing." "" enscript(1)
.xx "" "convert a Tektronix 4014 files to" "POSTSCRIPT format." "ps4014:" ps4014(1)
.xx "" "convert Diablo 630 print files to" "POSTSCRIPT format." "ps630:" ps630(1)
.xx "" "pscat: convert C/A/T files to" "POSTSCRIPT format." "" pscat(1)
.xx "" "convert troff intermediate format to" "POSTSCRIPT format." "psdit:" psdit(1)
.xx "" "psplot: convert plot files to" "POSTSCRIPT format." "" psplot(1)
.xx "" "" "postscript: print file format." "" postscript(4)
.xx "" "psroff: troff to a" "POSTSCRIPT printer." "" psroff(1)
.xx "" "TRANSCRIPT spooler filters for" "POSTSCRIPT printers." "/psinterface:" transcript(5)
.xx "" "/log (_llog), log10 (_llog10)," "pow (_lpow), sqrt (_lsqrt):/" "" exp(3M)
.xx "" "(_lsqrt): exponential, logarithm," "power, square root functions." "/sqrt" exp(3M)
.xx "shell scripts." "brc, bcheckrc, rc," "powerfail: system initialization" "" brc(1M)
.xx "" "" "pr: print files." "" pr(1)
.xx "" "/dodisk, lastlogin, monacct, nulladm," "prctmp, prdaily, prtacct, runacct,/" "" acctsh(1M)
.xx "" "/lastlogin, monacct, nulladm, prctmp," "prdaily, prtacct, runacct, shutacct,/" "" acctsh(1M)
.xx "troff." "cw:" "prepare constant-width text for" "" cw(1)
.xx "" "monitor, resume_prof, suspend_prof:" "prepare execution profile." "" monitor(3C)
.xx "" "/verifies constant-width text" "prepared by cw(1) for troff." "" checkcw(1)
.xx "" "tbl:" "prepares tables for nroff or troff." "" tbl(1)
.xx "" "cpp: the C language" "preprocessor." "" cpp(1)
.xx "" "grap: pic" "preprocessor for drawing graphs." "" grap(1)
.xx "pictures." "pic: troff" "preprocessor for drawing simple" "" pic(1)
.xx "a pristine state by deleting/" "" "preset: reset the lp queue system to" "" preset(1M)
.xx "" "unget: undo a" "previous get of an SCCS file." "" unget(1)
.xx "" "types:" "primitive system data types." "" types(5)
.xx "" "dbprint:" "print a database entry." "" dbprint(1)
.xx "interesting, adage." "fortune:" "print a random, hopefully" "" fortune(6)
.xx "" "times:" "print accumulated times." "" sh(1)
.xx "" "prs:" "print an SCCS file." "" prs(1)
.xx "" "date:" "print and set the date." "" date(1)
.xx "" "bcat: catenate and" "print (Berkeley cat)." "" bcat(1)
.xx "" "cal:" "print calendar." "" cal(1)
.xx "file." "sum:" "print checksum and block count of a" "" sum(1)
.xx "activity." "sact:" "print current SCCS file editing" "" sact(1)
.xx "statistics.." "loadst:" "print current time and load" "" loadst(1)
.xx "" "whoami:" "print effective current user id." "" whoami(1)
.xx "" "man, manprog:" "print entries in this manual." "" man(1)
.xx "" "postscript:" "print file format." "" postscript(4)
.xx "" "cat: concatenate and" "print files." "" cat(1)
.xx "" "pr:" "print files." "" pr(1)
.xx "" "ps630: convert Diablo 630" "print files to POSTSCRIPT format." "" ps630(1)
.xx "" "printf, fprintf, sprintf:" "print formatted output." "" printf(3S)
.xx "" "history:" "print history event list." "" csh(1)
.xx "" "gethostident:" "print hostident value." "" gethostident(1M)
.xx "system." "hostid: set or" "print identifier of current host" "" hostid(1)
.xx "" "banner7:" "print large banner on printer." "" banner7(1)
.xx "information about RCS files." "rlog:" "print log messages and other" "" rlog(1)
.xx "" "lpstat:" "print LP status information." "" lpstat(1)
.xx "" "nm:" "print name list." "" nm(1)
.xx "" "hostname: set or" "print name of current host system." "" hostname(1)
.xx "" "news:" "print news items." "" news(1)
.xx "label." "sgilabel:" "print or update the SGI disk drive" "" sgilabel(1M)
.xx "" "printenv:" "print out the environment." "" printenv(1)
.xx "" "acctcom: search and" "print process accounting file(s)." "" acctcom(1)
.xx "information." "uname:" "print system name and version" "" uname(1)
.xx "" "pagesize:" "print system page size." "" pagesize(1)
.xx "from a yp map." "ypmatch:" "print the value of one or more keys" "" ypmatch(1)
.xx "" "id:" "print user and group IDs and names." "" id(1)
.xx "" "ypcat:" "print values in a YP data base." "" ypcat(1)
.xx "diction." "diction, explain:" "print wordy sentences; thesaurus for" "" diction(1)
.xx "other binary/" "strings: find the" "printable strings in an object, or" "" strings(1)
.xx "the MM macros." "mm, osdd, checkmm:" "print/check documents formatted with" "" mm(1)
.xx "" "" "printenv: print out the environment." "" printenv(1)
.xx "" "banner7: print large banner on" "printer." "" banner7(1)
.xx "" "rmprinter: remove a" "printer from the LP spooling system." "" rmprinter(1M)
.xx "" "send/cancel requests to an LP line" "printer." "lp, cancel:" lp(1)
.xx "" "mknetpr: provide access to a remote" "printer." "" mknetpr(1M)
.xx "" "psroff: troff to a POSTSCRIPT" "printer." "" psroff(1)
.xx "" "lpr: line" "printer spooler." "" lpr(1)
.xx "" "register a Centronics-interface" "printer with LP." "mkcentpr:" mkcentpr(1M)
.xx "" "mkps: register a LaserWriter" "printer with LP." "" mkps(1M)
.xx "" "enable, disable: enable/disable LP" "printers." "" enable(1)
.xx "" "to a pristine state by deleting" "printers." "/reset the lp queue system" preset(1M)
.xx "" "spooler filters for POSTSCRIPT" "printers." "/psinterface: TRANSCRIPT" transcript(5)
.xx "formatted output." "" "printf, fprintf, sprintf: print" "" printf(3S)
.xx "" "addclient: allow remote" "printing clients to connect." "" addclient(1M)
.xx "" "text files to POSTSCRIPT format for" "printing." "enscript: convert" enscript(1)
.xx "mm macros." "mm:" "prints documents formatted with the" "" mm(1)
.xx "" "nice: run a command at low" "priority." "" nice(1)
.xx "" "nice: change" "priority of a process." "" nice(2)
.xx "" "nice: run low" "priority process." "" csh(1)
.xx "" "/reset the lp queue system to a" "pristine state by deleting printers." "" preset(1M)
.xx "" "rpc: library routines for remote" "procedure calls." "" rpc(3R)
.xx "" "boot: startup" "procedures." "" boot(8)
.xx "" "shutacct, startup, turnacct: shell" "procedures for accounting." "/runacct," acctsh(1M)
.xx "" "introduction to system maintenance" "procedures." "intro:" intro(8)
.xx "" "acct: enable or disable" "process accounting." "" acct(2)
.xx "" "acctprc1, acctprc2:" "process accounting." "" acctprc(1M)
.xx "" "acctcom: search and print" "process accounting file(s)." "" acctcom(1)
.xx "" "times: get" "process and child process times." "" times(2)
.xx "" "init, telinit:" "process control initialization." "" init(1M)
.xx "" "nice: run low priority" "process." "" csh(1)
.xx "" "exit, _exit: terminate" "process." "" exit(2)
.xx "" "fork: create a new" "process." "" fork(2)
.xx "IDs." "/getpgrp, getppid: get process," "process group, and parent process" "" getpid(2)
.xx "" "setpgrp: set" "process group ID." "" setpgrp(2)
.xx "" "process, process group, and parent" "process IDs." "/getpgrp, getppid: get" getpid(2)
.xx "" "inittab: script for the init" "process." "" inittab(4)
.xx "scripts." "onintr:" "process interrupts in command" "" csh(1)
.xx "scripts." "trap:" "process interrupts in command" "" sh(1)
.xx "" "kill: terminate a" "process." "" kill(1)
.xx "" "nice: change priority of a" "process." "" nice(2)
.xx "" "kill: send a signal to a" "process or a group of processes." "" kill(2)
.xx "" "pclose: initiate pipe to/from a" "process." "popen," popen(3S)
.xx "" "getpid, getpgrp, getppid: get" "process, process group, and parent/" "" getpid(2)
.xx "" "ps:" "process status." "" ps(1)
.xx "" "plock: lock" "process, text, or data in memory." "" plock(2)
.xx "" "times: get process and child" "process times." "" times(2)
.xx "addresses." "phys: allow a" "process to access physical" "" phys(2)
.xx "" "wait: wait for child" "process to stop or terminate." "" wait(2)
.xx "" "ptrace:" "process trace." "" ptrace(2)
.xx "" "pause: suspend" "process until signal." "" pause(2)
.xx "" "kill: kill jobs and" "processes." "" csh(1)
.xx "" "a signal to a process or a group of" "processes." "kill: send" kill(2)
.xx "" "killall: kill all active" "processes." "" killall(1M)
.xx "" "wait: wait for background" "processes to complete." "" csh(1)
.xx "" "wait: wait for background" "processes to complete." "" sh(1)
.xx "" "wait: wait for background" "processes to complete." "" wait(1)
.xx "" "yellow pages server and binder" "processes." "ypserv, ypbind:" ypserv(1M)
.xx "" "awk: pattern scanning and" "processing language." "" awk(1)
.xx "" "shutdown: terminate all" "processing." "" shutdown(1M)
.xx "" "m4: macro" "processor." "" m4(1)
.xx "" "vax, 4d60, mips, m68000, m68k: get" "processor type truth value." "/u3b5," machid(1)
.xx "" "sginap: timed sleep and" "processor yield function." "" sginap(2)
.xx "" "alarm: set a" "process's alarm clock." "" alarm(2)
.xx "macro files." "macref:" "produce cross-reference listing of" "" macref(1)
.xx "" "" "prof: display profile data." "" prof(1)
.xx "" "" "profil: execution time profile." "" profil(2)
.xx "" "prof: display" "profile data." "" prof(1)
.xx "" "suspend_prof: prepare execution" "profile." "monitor, resume_prof," monitor(3C)
.xx "" "profil: execution time" "profile." "" profil(2)
.xx "environment at login time." "" "profile: setting up a Bourne Shell" "" profile(4)
.xx "" "assert: verify" "program assertion." "" assert(3X)
.xx "" "cb: C" "program beautifier." "" cb(1)
.xx "" "lint: a C" "program checker." "" lint(1)
.xx "" "cxref: generate C" "program cross reference." "" cxref(1)
.xx "" "ctags: maintain a tags file for a C" "program." "" ctags(1)
.xx "" "end, etext, edata: last locations in" "program." "" end(3C)
.xx "" "backup: interactive backup" "program for SGI IRIS workstation." "" backup(1M)
.xx "" "ftp: ARPANET file transfer" "program." "" ftp(1C)
.xx "" "mt: magnetic tape manipulating" "program." "" mt(1)
.xx "" "rpc: rpc" "program number data base." "" rpc(4)
.xx "" "portmap: DARPA port to RPC" "program number mapper." "" portmap(1M)
.xx "" "sdiff: side-by-side difference" "program." "" sdiff(1)
.xx "" "indent: indent and format C" "program source." "" indent(1)
.xx "" "tftp: trivial file transfer" "program." "" tftp(1C)
.xx "" "timedc: timed control" "program." "" timedc(1M)
.xx "" "units: conversion" "program." "" units(1)
.xx "" "source, binary, and or manual for" "program." "whereis: locate" whereis(1)
.xx "" "sh: shell, the standard command" "programming language." "" sh(1)
.xx "" "for modest-sized" "programs." "/a compiler/interpreter" bs(1)
.xx "" "interp: color map demonstration" "programs." "showmap, cedit," colordemos(1d)
.xx "" "loads colors for mex demonstration" "programs." "demomakemap:" demomakemap(1d)
.xx "" "lex: generate" "programs for simple lexical tasks." "" lex(1)
.xx "" "to commands and application" "programs." "intro: introduction" intro(1)
.xx "" "maintenance commands and application" "programs." "/introduction to system" intro(1M)
.xx "" "update, and regenerate groups of" "programs." "make: maintain," make(1)
.xx "" "xstr: extract strings from C" "programs to implement shared/" "" xstr(1)
.xx "" "yppush: force" "propagation of a changed YP map." "" yppush(1M)
.xx "" "display of the Cytochrome P450" "protein molecule." "heme: depthcued" heme(1d)
.xx "" "ip: Internet" "Protocol - TCP." "" ip(7P)
.xx "" "bootp: server for DARPA Bootstrap" "Protocol (BOOTP)." "" bootp(1M)
.xx "" "setprotoent, endprotoent: get" "protocol entry." "/getprotobyname," getprotoent(3N)
.xx "" "inet: Internet" "protocol family." "" inet(7P)
.xx "" "icmp: Internet Control Message" "Protocol." "" icmp(7P)
.xx "" "protocols:" "protocol name data base." "" protocols(4)
.xx "" "ftpd: DARPA Internet File Transfer" "Protocol server." "" ftpd(1M)
.xx "" "telnetd: DARPA TELNET" "protocol server." "" telnetd(1M)
.xx "" "tftpd: DARPA Trivial File Transfer" "Protocol server." "" tftpd(1M)
.xx "" "tcp: Internet Transmission Control" "Protocol." "" tcp(7P)
.xx "" "telnet: user interface to the TELNET" "protocol." "" telnet(1C)
.xx "" "udp: Internet User Datagram" "Protocol." "" udp(7P)
.xx "" "interface to XNS Sequenced Packet" "Protocol." "xns:" xns(7)
.xx "" "" "protocols: protocol name data base." "" protocols(4)
.xx "" "mknetpr:" "provide access to a remote printer." "" mknetpr(1M)
.xx "" "arithmetic:" "provide drill in number facts." "" arithmetic(6)
.xx "file." "istat:" "provide information about an image" "" istat(1W)
.xx "" "sgboot:" "provide network boot service." "" sgboot(1M)
.xx "" "sgbounce:" "provide network name service." "" sgbounce(1M)
.xx "" "true, false:" "provide truth values." "" true(1)
.xx "" "" "prs: print an SCCS file." "" prs(1)
.xx "" "/monacct, nulladm, prctmp, prdaily," "prtacct, runacct, shutacct, startup,/" "" acctsh(1M)
.xx "" "" "ps: process status." "" ps(1)
.xx "files to POSTSCRIPT format." "" "ps4014: convert a Tektronix 4014" "" ps4014(1)
.xx "files to POSTSCRIPT format." "" "ps630: convert Diablo 630 print" "" ps630(1)
.xx "spooler/" "pscomm, psrv, pstext," "psbanner, psinterface: TRANSCRIPT" "" transcript(5)
.xx "POSTSCRIPT format." "" "pscat: convert C/A/T files to" "" pscat(1)
.xx "psinterface: TRANSCRIPT spooler/" "" "pscomm, psrv, pstext, psbanner," "" transcript(5)
.xx "format to POSTSCRIPT format." "" "psdit: convert troff intermediate" "" psdit(1)
.xx "" "pty:" "pseudo terminal driver." "" pty(7)
.xx "" "generate uniformly distributed" "pseudo-random numbers." "/lcong48:" drand48(3C)
.xx "" "pscomm, psrv, pstext, psbanner," "psinterface: TRANSCRIPT spooler/" "" transcript(5)
.xx "POSTSCRIPT format." "" "psplot: convert plot files to" "" psplot(1)
.xx "of a POSTSCRIPT file." "" "psrev: select or reverse page order" "" psrev(1)
.xx "printer." "" "psroff: troff to a POSTSCRIPT" "" psroff(1)
.xx "TRANSCRIPT spooler filters/" "pscomm," "psrv, pstext, psbanner, psinterface:" "" transcript(5)
.xx "TRANSCRIPT spooler/" "pscomm, psrv," "pstext, psbanner, psinterface:" "" transcript(5)
.xx "" "" "ptrace: process trace." "" ptrace(2)
.xx "" "" "ptx: make permuted index." "" ptx(1)
.xx "" "" "ptx: permuted index." "" ptx(1)
.xx "" "" "pty: pseudo terminal driver." "" pty(7)
.xx "file copy." "uuto, uupick:" "public unix system-to-unix system" "" uuto(1C)
.xx "stream." "ungetc:" "push character back into input" "" ungetc(3S)
.xx "" "pushd:" "push shell directory stack." "" csh(1)
.xx "" "" "pushd: push shell directory stack." "" csh(1)
.xx "" "puts, fputs:" "put a string on a stream." "" puts(3S)
.xx "" "putc, putchar, fputc, putw:" "put character or word on a stream." "" putc(3S)
.xx "" "getdents: read directory entries and" "put in a file system independent/" "" getdents(2)
.xx "character or word on a stream." "" "putc, putchar, fputc, putw: put" "" putc(3S)
.xx "or word on a stream." "putc," "putchar, fputc, putw: put character" "" putc(3S)
.xx "" "" "putpwent: write password file entry." "" putpwent(3C)
.xx "stream." "" "puts, fputs: put a string on a" "" puts(3S)
.xx "" "getutent, getutid, getutline," "pututline, setutent, endutent,/" "" getut(3C)
.xx "stream." "putc, putchar, fputc," "putw: put character or word on a" "" putc(3S)
.xx "" "real-time display of famous cube" "puzzle." "cube:" cube(1d)
.xx "checkers." "" "pwck, grpck: password/group file" "" pwck(1M)
.xx "" "" "pwd: working directory name." "" pwd(1)
.xx "" "" "qic: st-506 disk/tape controller." "" qic(7)
.xx "" "siq: Interphase Storager 2" "qic-02 tape controller." "" siq(7)
.xx "" "" "qsort: quicker sort." "" qsort(3C)
.xx "" "remque: insert/remove element from a" "queue." "insque," insque(3B)
.xx "" "msgget: get message" "queue." "" msgget(2)
.xx "memory id." "ipcrm: remove a message" "queue, semaphore set or shared" "" ipcrm(1)
.xx "deleting/" "preset: reset the lp" "queue system to a pristine state by" "" preset(1M)
.xx "" "qsort:" "quicker sort." "" qsort(3C)
.xx "" "" "quiz: test your knowledge." "" quiz(6)
.xx "the Ethernet dogfight." "" "radar: flight controller's view of" "" radar(1d)
.xx "" "" "rain: animated raindrops display." "" rain(6)
.xx "" "rain: animated" "raindrops display." "" rain(6)
.xx "" "showramp: interactive color" "ramp." "" showramp(1d)
.xx "generator." "" "rand, srand: simple random-number" "" rand(3C)
.xx "color map." "" "randmap: randomize a section of the" "" randmap(1W)
.xx "adage." "fortune: print a" "random, hopefully interesting," "" fortune(6)
.xx "" "ranlib: convert archives to" "random libraries." "" ranlib(1)
.xx "" "/srandom, initstate, setstate: better" "random number generator; routines/" "" random(3B)
.xx "setstate: better random number/" "" "random, srandom, initstate," "" random(3B)
.xx "map." "randmap:" "randomize a section of the color" "" randmap(1W)
.xx "" "rand, srand: simple" "random-number generator." "" rand(3C)
.xx "" "savemap: save a" "range of the color map." "" savemap(1W)
.xx "libraries." "" "ranlib: convert archives to random" "" ranlib(1)
.xx "" "fsplit: split fortran or" "ratfor files." "" fsplit(1)
.xx "" "" "ratfor: rational Fortran dialect." "" ratfor(1)
.xx "" "ratfor:" "rational Fortran dialect." "" ratfor(1)
.xx "shell scripts." "brc, bcheckrc," "rc, powerfail: system initialization" "" brc(1M)
.xx "" "rc.tcp, rc.nfs, rc.mail," "rc.488, rc.xns: communication option/" "" rc.tcp(1M)
.xx "date initialization." "" "rc.getdate: user-configurable system" "" rc.getdate(1M)
.xx "communication/" "rc.tcp, rc.nfs," "rc.mail, rc.488, rc.xns:" "" rc.tcp(1M)
.xx "for returning a stream to a remote/" "" "rcmd, rresvport, ruserok: routines" "" rcmd(3N)
.xx "communication option/" "rc.tcp," "rc.nfs, rc.mail, rc.488, rc.xns:" "" rc.tcp(1M)
.xx "" "" "rcp: remote file copy." "" rcp(1C)
.xx "" "" "rcs: change RCS file attributes." "" rcs(1)
.xx "" "rcsintro: introduction to" "RCS commands." "" rcsintro(1)
.xx "" "rcs: change" "RCS file attributes." "" rcs(1)
.xx "" "rcsfile: format of" "RCS file." "" rcsfile(4)
.xx "" "messages and other information about" "RCS files." "rlog: print log" rlog(1)
.xx "" "ci: check in" "RCS revisions." "" ci(1)
.xx "" "co: check out" "RCS revisions." "" co(1)
.xx "" "rcsdiff: compare" "RCS revisions." "" rcsdiff(1)
.xx "" "rcsmerge: merge" "RCS revisions." "" rcsmerge(1)
.xx "" "check: check" "RCS status of a file." "" check(1)
.xx "" "" "rcsdiff: compare RCS revisions." "" rcsdiff(1)
.xx "" "" "rcsfile: format of RCS file." "" rcsfile(4)
.xx "commands." "" "rcsintro: introduction to RCS" "" rcsintro(1)
.xx "" "" "rcsmerge: merge RCS revisions." "" rcsmerge(1)
.xx "rc.xns: communication option/" "" "rc.tcp, rc.nfs, rc.mail, rc.488," "" rc.tcp(1M)
.xx "" "rc.tcp, rc.nfs, rc.mail, rc.488," "rc.xns: communication option/" "" rc.tcp(1M)
.xx "" "getpass:" "read a password." "" getpass(3C)
.xx "input." "" "read: accept input from the standard" "" sh(1)
.xx "" "source:" "read commands from file." "" csh(1)
.xx "" ".:" "read commands from file." "" sh(1)
.xx "file system independent/" "getdents:" "read directory entries and put in a" "" getdents(2)
.xx "" "read:" "read from file." "" read(2)
.xx "" "mail, rmail: send mail to users or" "read mail." "" mail(1)
.xx "" "line:" "read one line." "" line(1)
.xx "" "" "read: read from file." "" read(2)
.xx "" "readlink:" "read value of a symbolic link." "" readlink(2)
.xx "rewinddir, closedir:/" "opendir," "readdir, telldir, seekdir," "" directory(3B)
.xx "rewinddir, closedir:/" "opendir," "readdir, telldir, seekdir," "" directory(3C)
.xx "" "open: open for" "reading or writing." "" open(2)
.xx "link." "" "readlink: read value of a symbolic" "" readlink(2)
.xx "read-only." "" "readonly: make shell variables" "" sh(1)
.xx "" "readonly: make shell variables" "read-only." "" sh(1)
.xx "" "lseek: move" "read/write file pointer." "" lseek(2)
.xx "" "/get real user, effective user," "real group, and effective group IDs." "" getuid(2)
.xx "" "/geteuid, getgid, getegid: get" "real user, effective user, real/" "" getuid(2)
.xx "malloc_check: main/" "malloc, free," "realloc, calloc, cfree," "" malloc(3C)
.xx "puzzle." "cube:" "real-time display of famous cube" "" cube(1d)
.xx "" "light: demonstrates" "real-time lighting and shadows." "" light(1d)
.xx "" "" "reboot: reboot the system." "" reboot(1M)
.xx "" "" "reboot: reboot the system." "" reboot(2)
.xx "" "reboot:" "reboot the system." "" reboot(1M)
.xx "" "reboot:" "reboot the system." "" reboot(2)
.xx "aliases file." "newaliases:" "rebuild the data base for the mail" "" newaliases(1)
.xx "" "ypmake:" "rebuild yellow pages database." "" ypmake(1M)
.xx "" "signal: specify what to do upon" "receipt of a signal." "" signal(2)
.xx "" "recv, recvfrom, recvmsg:" "receive a message from a socket." "" recv(2)
.xx "" "Mail: send and" "receive mail." "" mail_bsd(1)
.xx "" "rehash:" "recompute command hash table." "" csh(1)
.xx "" "summary from per-process accounting" "records." "acctcms: command" acctcms(1M)
.xx "" "manipulate connect accounting" "records." "fwtmp, wtmpfix:" fwtmp(1M)
.xx "" "show the division of a window into" "rectangles." "showpie:" showpie(1W)
.xx "message from a socket." "" "recv, recvfrom, recvmsg: receive a" "" recv(2)
.xx "from a socket." "recv," "recvfrom, recvmsg: receive a message" "" recv(2)
.xx "socket." "recv, recvfrom," "recvmsg: receive a message from a" "" recv(2)
.xx "" "eval:" "re-evaluate shell data." "" csh(1)
.xx "" "eval:" "re-evaluate shell data." "" sh(1)
.xx "references in documents." "" "refer: find and insert literature" "" refer(1)
.xx "" "cxref: generate C program cross" "reference." "" cxref(1)
.xx "" "/index for a bibliography, find" "references in a bibliography." "" lookbib(1)
.xx "" "refer: find and insert literature" "references in documents." "" refer(1)
.xx "regular expression." "" "regcmp, regex: compile and execute" "" regcmp(3X)
.xx "" "" "regcmp: regular expression compile." "" regcmp(1)
.xx "" "make: maintain, update, and" "regenerate groups of programs." "" make(1)
.xx "expression." "regcmp," "regex: compile and execute regular" "" regcmp(3X)
.xx "and match routines." "" "regexp: regular expression compile" "" regexp(5)
.xx "printer with LP." "mkcentpr:" "register a Centronics-interface" "" mkcentpr(1M)
.xx "LP." "mkps:" "register a LaserWriter printer with" "" mkps(1M)
.xx "routines." "regexp:" "regular expression compile and match" "" regexp(5)
.xx "" "regcmp:" "regular expression compile." "" regcmp(1)
.xx "" "regcmp, regex: compile and execute" "regular expression." "" regcmp(3X)
.xx "table." "" "rehash: recompute command hash" "" csh(1)
.xx "" "accept," "reject: allow/prevent LP requests." "" accept(1M)
.xx "files." "comm: select or" "reject lines common to two sorted" "" comm(1)
.xx "" "lorder: find ordering" "relation for an object library." "" lorder(1)
.xx "" "join:" "relational database operator." "" join(1)
.xx "line/" "dial, undial: establish and" "relinquish an out-going terminal" "" dial(3C)
.xx "" "strip: remove symbols and" "relocation bits." "" strip(1)
.xx "" "/fabs (_lfabs): floor, ceiling," "remainder, absolute value functions." "" floor(3M)
.xx "" "calendar:" "reminder service." "" calendar(1)
.xx "" "routines for returning a stream to a" "remote command." "/rresvport, ruserok:" rcmd(3N)
.xx "" "rexec: return stream to a" "remote command." "" rexec(3N)
.xx "" "rexecd:" "remote execution server." "" rexecd(1M)
.xx "" "xcmd, xsh:" "remote execution via XNS." "" xcmd(3N)
.xx "" "xx, xlogin:" "remote execution via XNS." "" xx(1C)
.xx "" "rcp:" "remote file copy." "" rcp(1C)
.xx "" "xcp:" "remote file copy." "" xcp(1C)
.xx "" "rlogin:" "remote login." "" rlogin(1C)
.xx "" "rlogind:" "remote login server." "" rlogind(1M)
.xx "" "wsiris:" "remote login with graphics." "" wsiris(1C)
.xx "" "return information about users on" "remote machines." "rnusers, rusers:" rnusers(3X)
.xx "" "rwall: write to specified" "remote machines." "" rwall(3X)
.xx "" "showmount: show all" "remote mounts." "" showmount(1M)
.xx "" "mknetpr: provide access to a" "remote printer." "" mknetpr(1M)
.xx "" "addclient: allow" "remote printing clients to connect." "" addclient(1M)
.xx "" "rpc: library routines for" "remote procedure calls." "" rpc(3R)
.xx "" "rsh:" "remote shell." "" rsh(1C)
.xx "" "rshd:" "remote shell server." "" rshd(1M)
.xx "" "ct: spawn getty to a" "remote terminal." "" ct(1C)
.xx "" "rmtab:" "remotely mounted file system table." "" rmtab(4)
.xx "" "mount: keep track of" "remotely mounted filesystems." "" mount(3X)
.xx "" "rmdel:" "remove a delta from an SCCS file." "" rmdel(1)
.xx "" "rmdir:" "remove a directory." "" rmdir(2)
.xx "set or shared memory id." "ipcrm:" "remove a message queue, semaphore" "" ipcrm(1)
.xx "spooling system." "rmprinter:" "remove a printer from the LP" "" rmprinter(1M)
.xx "" "unalias:" "remove aliases." "" csh(1)
.xx "" "unlink:" "remove directory entry." "" unlink(2)
.xx "" "unsetenv:" "remove environment variables." "" csh(1)
.xx "" "rm, rmdir:" "remove files or directories." "" rm(1)
.xx "constructs." "deroff:" "remove nroff/troff, tbl, and eqn" "" deroff(1)
.xx "" "strip:" "remove symbols and relocation bits." "" strip(1)
.xx "queue." "insque," "remque: insert/remove element from a" "" insque(3B)
.xx "" "" "rename: change the name of a file." "" rename(2)
.xx "" "surfcar, surfegg: surface editor and" "rendering driver." "" surfcar(1d)
.xx "" "consistency check and interactive" "repair." "fsck, dfsck: file system" fsck(1M)
.xx "" "while:" "repeat commands conditionally." "" csh(1)
.xx "" "until, while:" "repeat commands conditionally." "" sh(1)
.xx "" "" "repeat: execute command repeatedly." "" csh(1)
.xx "" "uniq: report" "repeated lines in a file." "" uniq(1)
.xx "" "repeat: execute command" "repeatedly." "" csh(1)
.xx "" "loadfont:" "replace the system font." "" loadfont(1G)
.xx "" "clock:" "report CPU time used." "" clock(3C)
.xx "facilities status." "ipcs:" "report inter-process communication" "" ipcs(1)
.xx "" "iostat:" "report I/O statistics." "" iostat(1)
.xx "" "df:" "report number of free disk blocks." "" df(1)
.xx "file." "freq:" "report on character frequencies in a" "" freq(1)
.xx "" "uniq:" "report repeated lines in a file." "" uniq(1)
.xx "" "rpcinfo:" "report RPC information." "" rpcinfo(1M)
.xx "" "vmstat:" "report virtual memory statistics." "" vmstat(1M)
.xx "stream." "fseek, rewind, ftell:" "reposition a file pointer in a" "" fseek(3S)
.xx "" "library routines for external data" "representation." "xdr:" xdr(3R)
.xx "" "/lpshut, lpmove: start/stop the LP" "request scheduler and move requests." "" lpsched(1M)
.xx "" "mountd: NFS mount" "request server." "" mountd(1M)
.xx "" "accept, reject: allow/prevent LP" "requests." "" accept(1M)
.xx "" "the LP request scheduler and move" "requests." "/lpmove: start/stop" lpsched(1M)
.xx "" "lp, cancel: send/cancel" "requests to an LP line printer." "" lp(1)
.xx "sensible state." "" "reset: reset the teletype bits to a" "" reset(1)
.xx "pristine state by deleting/" "preset:" "reset the lp queue system to a" "" preset(1M)
.xx "sensible state." "reset:" "reset the teletype bits to a" "" reset(1)
.xx "" "arp: address" "resolution display and control." "" arp(1M)
.xx "" "make a bootable tape for system" "restoration." "mkboot:" mkboot(1M)
.xx "execution profile." "monitor," "resume_prof, suspend_prof: prepare" "" monitor(3C)
.xx "" "/find an available network channel or" "return channel number." "" xnsfile(3N)
.xx "remote machines." "rnusers, rusers:" "return information about users on" "" rnusers(3X)
.xx "" "abs:" "return integer absolute value." "" abs(3C)
.xx "" "logname:" "return login name of user." "" logname(3X)
.xx "" "rexec:" "return stream to a remote command." "" rexec(3N)
.xx "" "getenv:" "return value for environment name." "" getenv(3C)
.xx "" "stat: data" "returned by stat system call." "" stat(5)
.xx "" "/rresvport, ruserok: routines for" "returning a stream to a remote/" "" rcmd(3N)
.xx "" "col: filter" "reverse line-feeds." "" col(1)
.xx "file." "psrev: select or" "reverse page order of a POSTSCRIPT" "" psrev(1)
.xx "" "ci: check in RCS" "revisions." "" ci(1)
.xx "" "co: check out RCS" "revisions." "" co(1)
.xx "" "rcsdiff: compare RCS" "revisions." "" rcsdiff(1)
.xx "" "rcsmerge: merge RCS" "revisions." "" rcsmerge(1)
.xx "pointer in a stream." "fseek," "rewind, ftell: reposition a file" "" fseek(3S)
.xx "" "opendir, readdir, telldir, seekdir," "rewinddir, closedir: directory/" "" directory(3B)
.xx "" "opendir, readdir, telldir, seekdir," "rewinddir, closedir: directory/" "" directory(3C)
.xx "" "creat: create a new file or" "rewrite an existing one." "" creat(2)
.xx "command." "" "rexec: return stream to a remote" "" rexec(3N)
.xx "" "" "rexecd: remote execution server." "" rexecd(1M)
.xx "users." "" "rhosts: list of trusted hosts and" "" rhosts(4)
.xx "" "strspn, strcspn, strtok, index," "rindex: string operations." "/strpbrk," string(3C)
.xx "information about RCS files." "" "rlog: print log messages and other" "" rlog(1)
.xx "" "" "rlogin: remote login." "" rlogin(1C)
.xx "" "" "rlogind: remote login server." "" rlogind(1M)
.xx "directories." "" "rm, rmdir: remove files or" "" rm(1)
.xx "" "convert mail from unix to" "rmail format." "collectmail:" collectmail(1)
.xx "mail." "mail," "rmail: send mail to users or read" "" mail(1)
.xx "file." "" "rmdel: remove a delta from an SCCS" "" rmdel(1)
.xx "" "" "rmdir: remove a directory." "" rmdir(2)
.xx "" "rm," "rmdir: remove files or directories." "" rm(1)
.xx "LP spooling system." "" "rmprinter: remove a printer from the" "" rmprinter(1M)
.xx "table." "" "rmtab: remotely mounted file system" "" rmtab(4)
.xx "entry." "mkutmp," "rmutmp: make and delete /etc/utmp" "" utmp(3N)
.xx "about users on remote machines." "" "rnusers, rusers: return information" "" rnusers(3X)
.xx "" "robot: control a" "robot arm." "" robot(1d)
.xx "" "" "robot: control a robot arm." "" robot(1d)
.xx "" "escape from the automatic" "robots." "autorobots:" autorobots(6)
.xx "" "chase: try to escape the killer" "robots." "" chase(6)
.xx "" "" "robots: escape from the robots." "" robots(6)
.xx "" "robots: escape from the" "robots." "" robots(6)
.xx "database." "" "roffbib: run off bibliographic" "" roffbib(1)
.xx "Doom." "" "rogue: exploring the Dungeons of" "" rogue(6)
.xx "" "chroot: change" "root directory." "" chroot(2)
.xx "" "chroot: change" "root directory for a command." "" chroot(1M)
.xx "" "logarithm, power, square" "root functions." "/exponential," exp(3M)
.xx "" "rootcopy: IRIS terminal" "root partition copy." "" rootcopy(1M)
.xx "partition copy." "" "rootcopy: IRIS terminal root" "" rootcopy(1M)
.xx "routing tables." "" "route: manually manipulate the" "" route(1M)
.xx "" "" "routed: network routing daemon." "" routed(1M)
.xx "runtime errors.." "userexit: user" "routine for intercepting FORTRAN" "" userexit(3X)
.xx "" "/better random number generator;" "routines for changing generators." "" random(3B)
.xx "representation." "xdr: library" "routines for external data" "" xdr(3R)
.xx "" "rpc: library" "routines for remote procedure calls." "" rpc(3R)
.xx "remote/" "rcmd, rresvport, ruserok:" "routines for returning a stream to a" "" rcmd(3N)
.xx "" "Internet address manipulation" "routines." "/inet_lnaof, inet_netof:" inet(3N)
.xx "" "mkc2f: generate C-FORTRAN interface" "routines." "mkf2c," mkf2c(1)
.xx "" "regular expression compile and match" "routines." "regexp:" regexp(5)
.xx "" "terminal independent operation" "routines." "/tgetstr, tgoto, tputs:" termcap(3X)
.xx "" "xnswrite, xsh: XNS network support" "routines." "/xnslisten, xnsread," xnslib(3X)
.xx "" "routed: network" "routing daemon." "" routed(1M)
.xx "" "hyroute: set the hyperchannel" "routing tables." "" hyroute(1M)
.xx "" "route: manually manipulate the" "routing tables." "" route(1M)
.xx "" "setrpcent, endrpcent: get" "rpc entry." "/getrpcbynumber," getrpcent(3R)
.xx "" "rpcinfo: report" "RPC information." "" rpcinfo(1M)
.xx "procedure calls." "" "rpc: library routines for remote" "" rpc(3R)
.xx "" "getrpcport: get" "RPC port number." "" getrpcport(3R)
.xx "" "rpc:" "rpc program number data base." "" rpc(4)
.xx "" "portmap: DARPA port to" "RPC program number mapper." "" portmap(1M)
.xx "" "" "rpc: rpc program number data base." "" rpc(4)
.xx "" "" "rpcinfo: report RPC information." "" rpcinfo(1M)
.xx "yellow pages password file." "" "rpc.passwd: server for modifying" "" rpc.passwd(1M)
.xx "returning a stream to a/" "rcmd," "rresvport, ruserok: routines for" "" rcmd(3N)
.xx "" "" "rsh: remote shell." "" rsh(1C)
.xx "" "" "rshd: remote shell server." "" rshd(1M)
.xx "" "nice:" "run a command at low priority." "" nice(1)
.xx "only)." "nohup:" "run a command immune to hangups (sh" "" nohup(1)
.xx "" "nohup:" "run command immune to hangups." "" csh(1)
.xx "" "runacct:" "run daily accounting." "" runacct(1M)
.xx "" "nice:" "run low priority process." "" csh(1)
.xx "" "roffbib:" "run off bibliographic database." "" roffbib(1)
.xx "" "" "runacct: run daily accounting." "" runacct(1M)
.xx "" "/nulladm, prctmp, prdaily, prtacct," "runacct, shutacct, startup,/" "" acctsh(1M)
.xx "" "worms: UNIX worms" "running on the IRIS." "" worms(1W)
.xx "" "routine for intercepting FORTRAN" "runtime errors.." "userexit: user" userexit(3X)
.xx "machines." "" "ruptime: show host status of local" "" ruptime(1C)
.xx "stream to a remote/" "rcmd, rresvport," "ruserok: routines for returning a" "" rcmd(3N)
.xx "users on remote machines." "rnusers," "rusers: return information about" "" rnusers(3X)
.xx "" "rwalld: network" "rwall server." "" rwalld(1M)
.xx "network." "" "rwall: write to all users over a" "" rwall(1M)
.xx "machines." "" "rwall: write to specified remote" "" rwall(3X)
.xx "" "" "rwalld: network rwall server." "" rwalld(1M)
.xx "machines." "" "rwho: who's logged in on local" "" rwho(1C)
.xx "" "" "rwhod: system status server." "" rwhod(1M)
.xx "editing activity." "" "sact: print current SCCS file" "" sact(1)
.xx "subsequent lines of/" "paste: merge" "same lines of several files or" "" paste(1)
.xx "" "savemap:" "save a range of the color map." "" savemap(1W)
.xx "~/.desktop." "" "savedesktop: saves colors in" "" savedesktop(1W)
.xx "map." "" "savemap: save a range of the color" "" savemap(1W)
.xx "" "savedesktop:" "saves colors in ~/.desktop." "" savedesktop(1W)
.xx "allocation." "brk," "sbrk: change data segment space" "" brk(2)
.xx "" "scandir, alphasort:" "scan a directory." "" scandir(3B)
.xx "" "scandir, alphasort:" "scan a directory." "" scandir(3C)
.xx "directory." "" "scandir, alphasort: scan a" "" scandir(3B)
.xx "directory." "" "scandir, alphasort: scan a" "" scandir(3C)
.xx "formatted input." "" "scanf, fscanf, sscanf: convert" "" scanf(3S)
.xx "" "bfs: big file" "scanner." "" bfs(1)
.xx "" "awk: pattern" "scanning and processing language." "" awk(1)
.xx "network." "spray:" "scatter data in order to check the" "" spray(3X)
.xx "" "change the delta commentary of an" "SCCS delta." "cdc:" cdc(1)
.xx "" "comb: combine" "SCCS deltas." "" comb(1)
.xx "" "delta: make a delta (change) to an" "SCCS file." "" delta(1)
.xx "" "sact: print current" "SCCS file editing activity." "" sact(1)
.xx "" "get: get a version of an" "SCCS file." "" get(1)
.xx "" "prs: print an" "SCCS file." "" prs(1)
.xx "" "rmdel: remove a delta from an" "SCCS file." "" rmdel(1)
.xx "" "sccsdiff: compare two versions of an" "SCCS file." "" sccsdiff(1)
.xx "" "sccsfile: format of" "SCCS file." "" sccsfile(4)
.xx "" "unget: undo a previous get of an" "SCCS file." "" unget(1)
.xx "" "val: validate" "SCCS file." "" val(1)
.xx "" "admin: create and administer" "SCCS files." "" admin(1)
.xx "" "what: identify" "SCCS files." "" what(1)
.xx "SCCS file." "" "sccsdiff: compare two versions of an" "" sccsdiff(1)
.xx "" "" "sccsfile: format of SCCS file." "" sccsfile(4)
.xx "" "/lpmove: start/stop the LP request" "scheduler and move requests." "" lpsched(1M)
.xx "" "flow: display of complex" "scientific data base." "" flow(1d)
.xx "object file." "" "scnhdr: section header for a common" "" scnhdr(4)
.xx "" "dogscore: displays the dogfight" "score board." "" dogscore(1d)
.xx "" "blanktime: set the" "screen blanking timeout." "" blanktime(1G)
.xx "" "cedit: edit colors on the" "screen." "" cedit(1W)
.xx "" "clear: clear terminal" "screen." "" clear(1)
.xx "cursor motion." "curses:" "screen functions with ``optimal''" "" curses(3X)
.xx "" "gclear: clear IRIS graphics" "screen." "" gclear(1G)
.xx "" "capture: dump" "screen image to file." "" capture(1W)
.xx "" "ipaste: display an image file on the" "screen." "" ipaste(1W)
.xx "" "mag: magnify pixels on the" "screen." "" mag(1W)
.xx "editor based on ex." "vi, view:" "screen oriented (visual) display" "" vi(1)
.xx "" "twinkle: twinkle stars on the" "screen." "" twinkle(6)
.xx "" "vis: copy a file to the" "screen." "" vis(1W)
.xx "" "dbbuild: build a database from a" "script." "" dbbuild(1)
.xx "" "inittab:" "script for the init process." "" inittab(4)
.xx "session." "" "script: make typescript of terminal" "" script(1)
.xx "" "system initialization shell" "scripts." "/bcheckrc, rc, powerfail:" brc(1M)
.xx "" "process interrupts in command" "scripts." "onintr:" csh(1)
.xx "" "trap: process interrupts in command" "scripts." "" sh(1)
.xx "" "text: dragging and" "scrolling of pixel text." "" text(1d)
.xx "program." "" "sdiff: side-by-side difference" "" sdiff(1)
.xx "" "grep, egrep, fgrep:" "search a file for a pattern." "" grep(1)
.xx "file(s)." "acctcom:" "search and print process accounting" "" acctcom(1)
.xx "" "lsearch: linear" "search and update." "" lsearch(3C)
.xx "" "bsearch: binary" "search." "" bsearch(3C)
.xx "" "hcreate, hdestroy: manage hash" "search tables." "hsearch," hsearch(3C)
.xx "" "tdelete, twalk: manage binary" "search trees." "tsearch," tsearch(3C)
.xx "file." "scnhdr:" "section header for a common object" "" scnhdr(4)
.xx "" "randmap: randomize a" "section of the color map." "" randmap(1W)
.xx "" "" "sed: stream editor." "" sed(1)
.xx "" "" "see: see what a file has in it." "" see(1)
.xx "" "see:" "see what a file has in it." "" see(1)
.xx "" "/nrand48, mrand48, jrand48, srand48," "seed48, lcong48: generate uniformly/" "" drand48(3C)
.xx "" "opendir, readdir, telldir," "seekdir, rewinddir, closedir:/" "" directory(3B)
.xx "" "opendir, readdir, telldir," "seekdir, rewinddir, closedir:/" "" directory(3C)
.xx "" "shmget: get shared memory" "segment." "" shmget(2)
.xx "" "brk, sbrk: change data" "segment space allocation." "" brk(2)
.xx "sorted files." "comm:" "select or reject lines common to two" "" comm(1)
.xx "POSTSCRIPT file." "psrev:" "select or reverse page order of a" "" psrev(1)
.xx "- TCP." "" "select: synchronous I/O multiplexing" "" select(2)
.xx "" "greek:" "select terminal filter." "" greek(1)
.xx "file." "cut: cut out" "selected fields of each line of a" "" cut(1)
.xx "" "case:" "selector in switch." "" csh(1)
.xx "" "semctl:" "semaphore control operations." "" semctl(2)
.xx "" "semop:" "semaphore operations." "" semop(2)
.xx "" "ipcrm: remove a message queue," "semaphore set or shared memory id." "" ipcrm(1)
.xx "" "semget: get set of" "semaphores." "" semget(2)
.xx "operations." "" "semctl: semaphore control" "" semctl(2)
.xx "" "" "semget: get set of semaphores." "" semget(2)
.xx "" "" "semop: semaphore operations." "" semop(2)
.xx "" "send, sendto, sendmsg:" "send a message from a socket." "" send(2)
.xx "group of processes." "kill:" "send a signal to a process or a" "" kill(2)
.xx "" "Mail:" "send and receive mail." "" mail_bsd(1)
.xx "network hosts." "ping:" "send ICMP ECHO_REQUEST packets to" "" ping(1M)
.xx "" "sendmail, newaliases, mailq:" "send mail over the Internet." "" sendmail(1M)
.xx "" "mail, rmail:" "send mail to users or read mail." "" mail(1)
.xx "message from a socket." "" "send, sendto, sendmsg: send a" "" send(2)
.xx "printer." "lp, cancel:" "send/cancel requests to an LP line" "" lp(1)
.xx "" "aliases: aliases file for" "sendmail." "" aliases(4)
.xx "mail over the Internet." "" "sendmail, newaliases, mailq: send" "" sendmail(1M)
.xx "socket." "send, sendto," "sendmsg: send a message from a" "" send(2)
.xx "a socket." "send," "sendto, sendmsg: send a message from" "" send(2)
.xx "" "reset: reset the teletype bits to a" "sensible state." "" reset(1)
.xx "" "diction, explain: print wordy" "sentences; thesaurus for diction." "" diction(1)
.xx "" "xns: interface to XNS" "Sequenced Packet Protocol." "" xns(7)
.xx "device." "devport: assign a" "serial port to an external graphics" "" devport(1G)
.xx "" "duart: on board" "serial ports." "" duart(7)
.xx "" "ypserv, ypbind: yellow pages" "server and binder processes." "" ypserv(1M)
.xx "" "timed: time" "server daemon." "" timed(1M)
.xx "(BOOTP)." "bootp:" "server for DARPA Bootstrap Protocol" "" bootp(1M)
.xx "password file." "rpc.passwd:" "server for modifying yellow pages" "" rpc.passwd(1M)
.xx "" "Internet File Transfer Protocol" "server." "ftpd: DARPA" ftpd(1M)
.xx "" "what version of a YP map is at a YP" "server host." "yppoll:" yppoll(1M)
.xx "" "mountd: NFS mount request" "server." "" mountd(1M)
.xx "" "ypwhich: which host is the YP" "server or map master?." "" ypwhich(1)
.xx "" "rexecd: remote execution" "server." "" rexecd(1M)
.xx "" "rlogind: remote login" "server." "" rlogind(1M)
.xx "" "rshd: remote shell" "server." "" rshd(1M)
.xx "" "rwalld: network rwall" "server." "" rwalld(1M)
.xx "" "rwhod: system status" "server." "" rwhod(1M)
.xx "" "sprayd: spray" "server." "" sprayd(1M)
.xx "" "telnetd: DARPA TELNET protocol" "server." "" telnetd(1M)
.xx "" "DARPA Trivial File Transfer Protocol" "server." "tftpd:" tftpd(1M)
.xx "" "transfer a YP map from some YP" "server to here." "ypxfr:" ypxfr(1M)
.xx "" "ypset: point ypbind at a particular" "server." "" ypset(1M)
.xx "" "" "services: service name data base." "" services(4)
.xx "" "logout: end" "session." "" csh(1)
.xx "" "script: make typescript of terminal" "session." "" script(1)
.xx "" "alarm:" "set a process's alarm clock." "" alarm(2)
.xx "" "umask:" "set and get file creation mask." "" umask(2)
.xx "" "ascii: map of ASCII character" "set." "" ascii(5)
.xx "" "" "set: change value of shell variable." "" csh(1)
.xx "execution." "env:" "set environment for command" "" env(1)
.xx "times." "utime:" "set file access and modification" "" utime(2)
.xx "" "umask:" "set file-creation mode mask." "" umask(1)
.xx "" "sethostname:" "set name of host cpu." "" sethostname(2)
.xx "" "apply: apply a command to a" "set of arguments." "" apply(1)
.xx "" "semget: get" "set of semaphores." "" semget(2)
.xx "" "getsockopt, setsockopt: get and" "set options on sockets." "" getsockopt(2)
.xx "domain system." "domainname:" "set or display name of current" "" domainname(1)
.xx "host system." "hostid:" "set or print identifier of current" "" hostid(1)
.xx "system." "hostname:" "set or print name of current host" "" hostname(1)
.xx "" "remove a message queue, semaphore" "set or shared memory id." "ipcrm:" ipcrm(1)
.xx "" "setpgrp:" "set process group ID." "" setpgrp(2)
.xx "parameters." "" "set: set shell flags or positional" "" sh(1)
.xx "parameters." "set:" "set shell flags or positional" "" sh(1)
.xx "" "tabs:" "set tabs on a terminal." "" tabs(1)
.xx "line discipline." "getty:" "set terminal type, modes, speed, and" "" getty(1M)
.xx "window." "textcolors:" "set the colors used by a text" "" textcolors(1G)
.xx "" "date: print and" "set the date." "" date(1)
.xx "mapping colors." "gamma:" "set the gamma correction value for" "" gamma(1W)
.xx "" "hyroute:" "set the hyperchannel routing tables." "" hyroute(1M)
.xx "" "stty:" "set the options for a terminal." "" stty(1)
.xx "" "blanktime:" "set the screen blanking timeout." "" blanktime(1G)
.xx "" "stime:" "set time." "" stime(2)
.xx "" "setuid, setgid:" "set user and group IDs." "" setuid(2)
.xx "" "ulimit: get and" "set user limits." "" ulimit(2)
.xx "" "setenv:" "set variable in environment." "" csh(1)
.xx "" "set60, set30, setntsc:" "set video output type." "" set60(1d)
.xx "type." "set60," "set30, setntsc: set video output" "" set60(1d)
.xx "output type." "" "set60, set30, setntsc: set video" "" set60(1d)
.xx "stream." "" "setbuf: assign buffering to a" "" setbuf(3S)
.xx "current domain." "getdomainname," "setdomainname: get/set name of" "" getdomainname(2)
.xx "" "" "setenv: set variable in environment." "" csh(1)
.xx "Pascal floating-point exception/" "" "setfpe, fpecleanup: FORTRAN and" "" setfpe(3X)
.xx "" "setuid," "setgid: set user and group IDs." "" setuid(2)
.xx "" "getgrent, getgrgid, getgrnam," "setgrent, endgrent: get group file/" "" getgrent(3C)
.xx "host/" "/gethostbyaddr, gethostent," "sethostent, endhostent: get network" "" gethostbyname(3N)
.xx "of current host." "gethostid," "sethostid: get/set unique identifier" "" gethostid(2)
.xx "" "" "sethostname: set name of host cpu." "" sethostname(2)
.xx "ibnflags: package for/" "setibfile," "setibent, endibent, getibent," "" ibtab(3N)
.xx "getibent, ibnflags: package for/" "" "setibfile, setibent, endibent," "" ibtab(3N)
.xx "" "" "setjmp, longjmp: non-local goto." "" setjmp(3C)
.xx "" "syslog, openlog, closelog," "setlogmask: control system log." "" syslog(3B)
.xx "" "" "setmnt: establish mount table." "" setmnt(1M)
.xx "endmntent, hasmntopt: get file/" "" "setmntent, getmntent, addmntent," "" getmntent(3C)
.xx "entry." "/getnetbyaddr, getnetbyname," "setnetent, endnetent: get network" "" getnetent(3N)
.xx "get network group/" "getnetgrent," "setnetgrent, endnetgrent, innetgr:" "" getnetgrent(3R)
.xx "" "set60, set30," "setntsc: set video output type." "" set60(1d)
.xx "" "" "setpgrp: set process group ID." "" setpgrp(2)
.xx "" "/getprotobynumber, getprotobyname," "setprotoent, endprotoent: get/" "" getprotoent(3N)
.xx "file/" "getpwent, getpwuid, getpwnam," "setpwent, endpwent: get password" "" getpwent(3C)
.xx "" "/getrpcbyname, getrpcbynumber," "setrpcent, endrpcent: get rpc entry." "" getrpcent(3R)
.xx "" "/getservbyport, getservbyname," "setservent, endservent: get service/" "" getservent(3N)
.xx "sockets." "getsockopt," "setsockopt: get and set options on" "" getsockopt(2)
.xx "" "random, srandom, initstate," "setstate: better random number/" "" random(3B)
.xx "environment at login time." "profile:" "setting up a Bourne Shell" "" profile(4)
.xx "" "login, cshrc:" "setting up a C Shell environment." "" login(4)
.xx "" "gettydefs: speed and terminal" "settings used by getty." "" gettydefs(4)
.xx "IDs." "" "setuid, setgid: set user and group" "" setuid(2)
.xx "utmp/" "/getutid, getutline, pututline," "setutent, endutent, utmpname: access" "" getut(3C)
.xx "" "simulate the flight of any of" "several aircraft." "flight:" flight(1d)
.xx "one/" "paste: merge same lines of" "several files or subsequent lines of" "" paste(1)
.xx "service." "" "sgboot: provide network boot" "" sgboot(1M)
.xx "service." "" "sgbounce: provide network name" "" sgbounce(1M)
.xx "" "sgilabel: print or update the" "SGI disk drive label." "" sgilabel(1M)
.xx "" "interactive backup program for" "SGI IRIS workstation." "backup:" backup(1M)
.xx "disk drive label." "" "sgilabel: print or update the SGI" "" sgilabel(1M)
.xx "yield function." "" "sginap: timed sleep and processor" "" sginap(2)
.xx "" "run a command immune to hangups" "(sh only)." "nohup:" nohup(1)
.xx "programming language." "" "sh: shell, the standard command" "" sh(1)
.xx "" "/zshadeegg, zshadejet:" "shading and z-buffering demo." "" zshadecar(1d)
.xx "view of the dogfight." "" "shadow: full-screen armchair pilot's" "" shadow(1d)
.xx "" "demonstrates real-time lighting and" "shadows." "light:" light(1d)
.xx "" "shmctl:" "shared memory control operations." "" shmctl(2)
.xx "" "a message queue, semaphore set or" "shared memory id." "ipcrm: remove" ipcrm(1)
.xx "" "shmat, shmdt:" "shared memory operations." "" shmop(2)
.xx "" "shmget: get" "shared memory segment." "" shmget(2)
.xx "" "strings from C programs to implement" "shared strings." "xstr: extract" xstr(1)
.xx "C-like syntax." "csh: a" "shell (command interpreter) with" "" csh(1)
.xx "" "system: issue a" "shell command." "" system(3S)
.xx "" "exit: leave" "shell." "" csh(1)
.xx "" "eval: re-evaluate" "shell data." "" csh(1)
.xx "" "eval: re-evaluate" "shell data." "" sh(1)
.xx "" "popd: pop" "shell directory stack." "" csh(1)
.xx "" "pushd: push" "shell directory stack." "" csh(1)
.xx "" "profile: setting up a Bourne" "Shell environment at login time." "" profile(4)
.xx "" "login, cshrc: setting up a C" "Shell environment." "" login(4)
.xx "parameters." "set: set" "shell flags or positional" "" sh(1)
.xx "" "alias:" "shell macros." "" csh(1)
.xx "" "/shutacct, startup, turnacct:" "shell procedures for accounting." "" acctsh(1M)
.xx "" "rsh: remote" "shell." "" rsh(1C)
.xx "" "rc, powerfail: system initialization" "shell scripts." "brc, bcheckrc," brc(1M)
.xx "" "rshd: remote" "shell server." "" rshd(1M)
.xx "" "exit: leave" "shell." "" sh(1)
.xx "programming language." "sh:" "shell, the standard command" "" sh(1)
.xx "" "set: change value of" "shell variable." "" csh(1)
.xx "" "@: arithmetic on" "shell variables." "" csh(1)
.xx "" "unset: discard" "shell variables." "" csh(1)
.xx "" "readonly: make" "shell variables read-only." "" sh(1)
.xx "" "export: add" "shell variables to the environment." "" sh(1)
.xx "" "an editor for use in Emacs" "shell windows." "emacsedit:" emacsedit(1)
.xx "" "exec: overlay" "shell with specified command." "" csh(1)
.xx "" "exec: overlay" "shell with specified command." "" sh(1)
.xx "" "" "shift: manipulate argument list." "" csh(1)
.xx "" "" "shift: manipulate argument list." "" sh(1)
.xx "operations." "" "shmat, shmdt: shared memory" "" shmop(2)
.xx "operations." "" "shmctl: shared memory control" "" shmctl(2)
.xx "" "shmat," "shmdt: shared memory operations." "" shmop(2)
.xx "" "" "shmget: get shared memory segment." "" shmget(2)
.xx "" "showmount:" "show all remote mounts." "" showmount(1M)
.xx "" "ruptime:" "show host status of local machines." "" ruptime(1C)
.xx "" "uptime:" "show how long system has been up." "" uptime(1)
.xx "" "lav:" "show load average." "" lav(1)
.xx "" "netstat:" "show network status." "" netstat(1)
.xx "rectangles." "showpie:" "show the division of a window into" "" showpie(1W)
.xx "demonstration programs." "" "showmap, cedit, interp: color map" "" colordemos(1d)
.xx "color map." "" "showmap: display the contents of the" "" showmap(1W)
.xx "" "" "showmount: show all remote mounts." "" showmount(1M)
.xx "window into rectangles." "" "showpie: show the division of a" "" showpie(1W)
.xx "" "" "showramp: interactive color ramp." "" showramp(1d)
.xx "" "shrink:" "shrink an image." "" shrink(1W)
.xx "" "" "shrink: shrink an image." "" shrink(1W)
.xx "connection." "shutdown:" "shut down part of a full-duplex" "" shutdown(2)
.xx "" "/prctmp, prdaily, prtacct, runacct," "shutacct, startup, turnacct: shell/" "" acctsh(1M)
.xx "full-duplex connection." "" "shutdown: shut down part of a" "" shutdown(2)
.xx "" "" "shutdown: terminate all processing." "" shutdown(1M)
.xx "of the space shuttle." "" "shuttle: depthcued wireframe model" "" shuttle(1d)
.xx "" "wireframe model of the space" "shuttle." "shuttle: depthcued" shuttle(1d)
.xx "" "sdiff:" "side-by-side difference program." "" sdiff(1)
.xx "controller." "" "sif: Interphase Storager 2 floppy" "" sif(7)
.xx "" "login:" "sign on." "" login(1)
.xx "" "pause: suspend process until" "signal." "" pause(2)
.xx "" "specify what to do upon receipt of a" "signal." "signal:" signal(2)
.xx "receipt of a signal." "" "signal: specify what to do upon" "" signal(2)
.xx "processes." "kill: send a" "signal to a process or a group of" "" kill(2)
.xx "" "ssignal, gsignal: software" "signals." "" ssignal(3C)
.xx "esdi/st-506 disk/tape/floppy/" "" "sii: Interphase Storager 2" "" sii(7)
.xx "several aircraft." "flight:" "simulate the flight of any of" "" flight(1d)
.xx "" "arch: display a" "simulated architectural model." "" arch(1d)
.xx "" "/cooperative or competitive flight" "simulator and airshow generator." "" dog(1d)
.xx "" "tc: phototypesetter" "simulator." "" tc(1)
.xx "(_ltan), asin (_lasin), acos/" "" "sin (_lsin), cos (_lcos), tan" "" trig(3M)
.xx "" "ssp: make output" "single spaced." "" ssp(1)
.xx "single-user mode." "" "single: switch the system to" "" single(1M)
.xx "" "single: switch the system to" "single-user mode." "" single(1M)
.xx "(_ltanh): hyperbolic functions." "" "sinh (_lsinh), cosh (_lcosh), tanh" "" sinh(3M)
.xx "" "null: data" "sink." "" null(7)
.xx "tape controller." "" "siq: Interphase Storager 2 qic-02" "" siq(7)
.xx "" "getdtablesize: get descriptor table" "size." "" getdtablesize(2)
.xx "" "getpagesize: get system page" "size." "" getpagesize(2)
.xx "" "ulimit: change or display" "size limits." "" sh(1)
.xx "" "size:" "size of an object file." "" size(1)
.xx "" "pagesize: print system page" "size." "" pagesize(1)
.xx "" "" "size: size of an object file." "" size(1)
.xx "" "sginap: timed" "sleep and processor yield function." "" sginap(2)
.xx "interval." "" "sleep: suspend execution for an" "" sleep(1)
.xx "interval." "" "sleep: suspend execution for" "" sleep(3C)
.xx "" "typeset documents, view graphs, and" "slides." "mmt, mvt:" mmt(1)
.xx "" "for typesetting view graphs and" "slides." "mv: a troff macro package" mv(5)
.xx "" "mvt: typeset view graphs and" "slides." "" mvt(1)
.xx "user." "ttyslot: find the" "slot in the utmp file of the current" "" ttyslot(3C)
.xx "" "iph: Interphase 2190" "smd disk controller." "" iph(7)
.xx "" "spline: interpolate" "smooth curve." "" spline(1)
.xx "" "" "sno: SNOBOL interpreter." "" sno(1)
.xx "" "sno:" "SNOBOL interpreter." "" sno(1)
.xx "" "accept: accept a connection on a" "socket." "" accept(2)
.xx "" "bind: bind a name to a" "socket." "" bind(2)
.xx "" "connect: initiate a connection on a" "socket." "" connect(2)
.xx "communication - TCP." "" "socket: create an endpoint for" "" socket(2)
.xx "" "listen: listen for connections on a" "socket." "" listen(2)
.xx "" "getsockname: get" "socket name." "" getsockname(2)
.xx "" "recvmsg: receive a message from a" "socket." "recv, recvfrom," recv(2)
.xx "" "sendmsg: send a message from a" "socket." "send, sendto," send(2)
.xx "connected sockets." "" "socketpair: create a pair of" "" socketpair(2)
.xx "" "setsockopt: get and set options on" "sockets." "getsockopt," getsockopt(2)
.xx "" "create a pair of connected" "sockets." "socketpair:" socketpair(2)
.xx "" "lo:" "software loopback network interface." "" lo(7)
.xx "" "ssignal, gsignal:" "software signals." "" ssignal(3C)
.xx "" "ypxfr: transfer a YP map from" "some YP server to here." "" ypxfr(1M)
.xx "" "sort:" "sort and/or merge files." "" sort(1)
.xx "" "sortbib:" "sort bibliographic database." "" sortbib(1)
.xx "" "qsort: quicker" "sort." "" qsort(3C)
.xx "" "" "sort: sort and/or merge files." "" sort(1)
.xx "" "tsort: topological" "sort." "" tsort(1)
.xx "database." "" "sortbib: sort bibliographic" "" sortbib(1)
.xx "" "select or reject lines common to two" "sorted files." "comm:" comm(1)
.xx "program." "whereis: locate" "source, binary, and or manual for" "" whereis(1)
.xx "" "indent: indent and format C program" "source." "" indent(1)
.xx "" "an error message file by massaging C" "source." "mkstr: create" mkstr(1)
.xx "" "" "source: read commands from file." "" csh(1)
.xx "" "brk, sbrk: change data segment" "space allocation." "" brk(2)
.xx "" "depthcued wireframe model of the" "space shuttle." "shuttle:" shuttle(1d)
.xx "" "ssp: make output single" "spaced." "" ssp(1)
.xx "" "ct:" "spawn getty to a remote terminal." "" ct(1C)
.xx "eqn and neqn." "eqnchar:" "special character definitions for" "" eqnchar(5)
.xx "" "mknod: build" "special file." "" mknod(1M)
.xx "" "intro: introduction to" "special files." "" intro(7)
.xx "300s terminals." "300, 300s: handle" "special functions of DASI 300 and" "" 300(1)
.xx "2621-series terminals." "hp: handle" "special functions of HP 2640 and" "" hp(1)
.xx "terminal." "450: handle" "special functions of the DASI 450" "" 450(1)
.xx "" "mknod: make a directory, or a" "special or ordinary file." "" mknod(2)
.xx "" "fspec: format" "specification in text files." "" fspec(4)
.xx "" "exec: overlay shell with" "specified command." "" csh(1)
.xx "" "exec: overlay shell with" "specified command." "" sh(1)
.xx "" "ftruncate: truncate a file to a" "specified length." "truncate," truncate(2)
.xx "" "rwall: write to" "specified remote machines." "" rwall(3X)
.xx "signal." "signal:" "specify what to do upon receipt of a" "" signal(2)
.xx "" "getty: set terminal type, modes," "speed, and line discipline." "" getty(1M)
.xx "getty." "gettydefs:" "speed and terminal settings used by" "" gettydefs(4)
.xx "find spelling errors." "" "spell, hashmake, spellin, hashcheck:" "" spell(1)
.xx "errors." "spell, hashmake," "spellin, hashcheck: find spelling" "" spell(1)
.xx "" "hashmake, spellin, hashcheck: find" "spelling errors." "spell," spell(1)
.xx "" "" "spline: interpolate smooth curve." "" spline(1)
.xx "" "split:" "split a file into pieces." "" split(1)
.xx "" "csplit: context" "split." "" csplit(1)
.xx "" "fsplit:" "split fortran or ratfor files." "" fsplit(1)
.xx "" "" "split: split a file into pieces." "" split(1)
.xx "" "uuclean: uucp" "spool directory clean-up." "" uuclean(1M)
.xx "" "/psbanner, psinterface: TRANSCRIPT" "spooler filters for POSTSCRIPT/" "" transcript(5)
.xx "" "lpr: line printer" "spooler." "" lpr(1)
.xx "" "lpadmin: configure the LP" "spooling system." "" lpadmin(1M)
.xx "" "remove a printer from the LP" "spooling system." "rmprinter:" rmprinter(1M)
.xx "" "spray:" "spray packets." "" spray(1M)
.xx "check the network." "" "spray: scatter data in order to" "" spray(3X)
.xx "" "sprayd:" "spray server." "" sprayd(1M)
.xx "" "" "spray: spray packets." "" spray(1M)
.xx "" "" "sprayd: spray server." "" sprayd(1M)
.xx "" "printf, fprintf," "sprintf: print formatted output." "" printf(3S)
.xx "" "/log10 (_llog10), pow (_lpow)," "sqrt (_lsqrt): exponential,/" "" exp(3M)
.xx "" "exponential, logarithm, power," "square root functions." "/(_lsqrt):" exp(3M)
.xx "generator." "rand," "srand: simple random-number" "" rand(3C)
.xx "" "/lrand48, nrand48, mrand48, jrand48," "srand48, seed48, lcong48: generate/" "" drand48(3C)
.xx "random number generator;/" "random," "srandom, initstate, setstate: better" "" random(3B)
.xx "" "scanf, fscanf," "sscanf: convert formatted input." "" scanf(3S)
.xx "" "" "ssignal, gsignal: software signals." "" ssignal(3C)
.xx "" "" "ssp: make output single spaced." "" ssp(1)
.xx "" "qic:" "st-506 disk/tape controller." "" qic(7)
.xx "" "dsd:" "st-506 disk/tape/floppy controller." "" dsd(7)
.xx "" "floppy:" "st-506 disk/tape/floppy controller." "" floppy(7)
.xx "" "" "stab: symbol table types." "" stab(4)
.xx "" "popd: pop shell directory" "stack." "" csh(1)
.xx "" "pushd: push shell directory" "stack." "" csh(1)
.xx "package." "stdio:" "standard buffered input/output" "" stdio(3S)
.xx "language." "sh: shell, the" "standard command programming" "" sh(1)
.xx "" "read: accept input from the" "standard input." "" sh(1)
.xx "package." "ftok:" "standard interprocess communication" "" stdipc(3C)
.xx "" "twinkle: twinkle" "stars on the screen." "" twinkle(6)
.xx "" "startup:" "start the window manager." "" startup(1W)
.xx "and move/" "lpsched, lpshut, lpmove:" "start/stop the LP request scheduler" "" lpsched(1M)
.xx "" "boot:" "startup procedures." "" boot(8)
.xx "" "" "startup: start the window manager." "" startup(1W)
.xx "" "/prdaily, prtacct, runacct, shutacct," "startup, turnacct: shell procedures/" "" acctsh(1M)
.xx "call." "" "stat: data returned by stat system" "" stat(5)
.xx "" "" "stat, lstat, fstat: get file status." "" stat(2)
.xx "" "stat: data returned by" "stat system call." "" stat(5)
.xx "" "the lp queue system to a pristine" "state by deleting printers." "/reset" preset(1M)
.xx "" "the teletype bits to a sensible" "state." "reset: reset" reset(1)
.xx "" "if: conditional" "statement." "" csh(1)
.xx "" "if, then: conditional" "statement." "" sh(1)
.xx "information - TCP." "" "statfs, fstatfs: get file system" "" statfs(2)
.xx "filesystems." "mntent, fstab:" "static information about" "" mntent(4)
.xx "" "iostat: report I/O" "statistics." "" iostat(1)
.xx "" "loadst: print current time and load" "statistics.." "" loadst(1)
.xx "" "nfsstat: Network File System" "statistics." "" nfsstat(1M)
.xx "" "ustat: get file system" "statistics." "" ustat(2)
.xx "" "vmstat: report virtual memory" "statistics." "" vmstat(1M)
.xx "" "lpstat: print LP" "status information." "" lpstat(1)
.xx "" "feof, clearerr, fileno: stream" "status inquiries." "ferror," ferror(3S)
.xx "" "uustat: uucp" "status inquiry and job control." "" uustat(1C)
.xx "" "communication facilities" "status." "ipcs: report inter-process" ipcs(1)
.xx "" "netstat: show network" "status." "" netstat(1)
.xx "" "check: check RCS" "status of a file." "" check(1)
.xx "" "ruptime: show host" "status of local machines." "" ruptime(1C)
.xx "" "ps: process" "status." "" ps(1)
.xx "" "rwhod: system" "status server." "" rwhod(1M)
.xx "" "stat, lstat, fstat: get file" "status." "" stat(2)
.xx "input/output package." "" "stdio: standard buffered" "" stdio(3S)
.xx "" "" "stime: set time." "" stime(2)
.xx "" "wait: wait for child process to" "stop or terminate." "" wait(2)
.xx "disk/tape/floppy/" "sii: Interphase" "Storager 2 esdi/st-506" "" sii(7)
.xx "" "sif: Interphase" "Storager 2 floppy controller." "" sif(7)
.xx "" "siq: Interphase" "Storager 2 qic-02 tape controller." "" siq(7)
.xx "data base/" "dbminit, fetch," "store, delete, firstkey, nextkey:" "" dbm(3X)
.xx "strcpy, strncpy, strlen, strchr,/" "" "strcat, strncat, strcmp, strncmp," "" string(3C)
.xx "" "/strncmp, strcpy, strncpy, strlen," "strchr, strrchr, strpbrk, strspn,/" "" string(3C)
.xx "strlen, strchr,/" "strcat, strncat," "strcmp, strncmp, strcpy, strncpy," "" string(3C)
.xx "" "strcat, strncat, strcmp, strncmp," "strcpy, strncpy, strlen, strchr,/" "" string(3C)
.xx "" "/strchr, strrchr, strpbrk, strspn," "strcspn, strtok, index, rindex:/" "" string(3C)
.xx "" "sed:" "stream editor." "" sed(1)
.xx "" "fclose, fflush: close or flush a" "stream." "" fclose(3S)
.xx "" "fopen, freopen, fdopen: open a" "stream." "" fopen(3S)
.xx "" "reposition a file pointer in a" "stream." "fseek, rewind, ftell:" fseek(3S)
.xx "" "getw: get character or word from" "stream." "getc, getchar, fgetc," getc(3S)
.xx "" "gets, fgets: get a string from a" "stream." "" gets(3S)
.xx "" "putw: put character or word on a" "stream." "putc, putchar, fputc," putc(3S)
.xx "" "puts, fputs: put a string on a" "stream." "" puts(3S)
.xx "" "setbuf: assign buffering to a" "stream." "" setbuf(3S)
.xx "" "ferror, feof, clearerr, fileno:" "stream status inquiries." "" ferror(3S)
.xx "" "/ruserok: routines for returning a" "stream to a remote command." "" rcmd(3N)
.xx "" "rexec: return" "stream to a remote command." "" rexec(3N)
.xx "" "push character back into input" "stream." "ungetc:" ungetc(3S)
.xx "" "long integer and base-64 ASCII" "string." "a64l, l64a: convert between" a64l(3C)
.xx "" "tzset: convert date and time to" "string." "/localtime, gmtime, asctime," ctime(3C)
.xx "" "convert floating-point number to" "string." "/(_d_fcvt), gcvt (_d_gcvt):" ecvt(3C)
.xx "" "gets, fgets: get a" "string from a stream." "" gets(3S)
.xx "" "puts, fputs: put a" "string on a stream." "" puts(3S)
.xx "" "ffs: bit" "string operation." "" ffs(3B)
.xx "" "bcopy, bcmp, bzero, bswap: byte" "string operations." "" bstring(3C)
.xx "" "strcspn, strtok, index, rindex:" "string operations." "/strpbrk, strspn," string(3C)
.xx "" "atof (_latof): convert ASCII" "string to floating-point number." "" atof(3C)
.xx "" "strtol, atol, atoi: convert" "string to integer." "" strtol(3C)
.xx "in an object, or other binary file." "" "strings: find the printable strings" "" strings(1)
.xx "shared strings." "xstr: extract" "strings from C programs to implement" "" xstr(1)
.xx "binary/" "strings: find the printable" "strings in an object, or other" "" strings(1)
.xx "" "from C programs to implement shared" "strings." "xstr: extract strings" xstr(1)
.xx "bits." "" "strip: remove symbols and relocation" "" strip(1)
.xx "" "/strcmp, strncmp, strcpy, strncpy," "strlen, strchr, strrchr, strpbrk,/" "" string(3C)
.xx "strncpy, strlen, strchr,/" "strcat," "strncat, strcmp, strncmp, strcpy," "" string(3C)
.xx "strchr,/" "strcat, strncat, strcmp," "strncmp, strcpy, strncpy, strlen," "" string(3C)
.xx "" "/strncat, strcmp, strncmp, strcpy," "strncpy, strlen, strchr, strrchr,/" "" string(3C)
.xx "" "/strncpy, strlen, strchr, strrchr," "strpbrk, strspn, strcspn, strtok,/" "" string(3C)
.xx "" "/strcpy, strncpy, strlen, strchr," "strrchr, strpbrk, strspn, strcspn,/" "" string(3C)
.xx "" "/strlen, strchr, strrchr, strpbrk," "strspn, strcspn, strtok, index,/" "" string(3C)
.xx "" "/strrchr, strpbrk, strspn, strcspn," "strtok, index, rindex: string/" "" string(3C)
.xx "to integer." "" "strtol, atol, atoi: convert string" "" strtol(3C)
.xx "" "yellowpages database and directory" "structure." "ypfiles: the" ypfiles(4)
.xx "terminal." "" "stty: set the options for a" "" stty(1)
.xx "characteristics of a document." "" "style: analyze surface" "" style(1)
.xx "user." "" "su: become super-user or another" "" su(1)
.xx "from a document." "" "subj: generate a list of subjects" "" subj(1)
.xx "" "ndx: create a" "subject-page index for a document." "" ndx(1)
.xx "" "subj: generate a list of" "subjects from a document." "" subj(1)
.xx "" "intro: introduction to" "subroutines and libraries." "" intro(3)
.xx "" "delete, firstkey, nextkey: data base" "subroutines." "dbminit, fetch, store," dbm(3X)
.xx "" "dbm_error, dbm_clearerr: data base" "subroutines." "/dbm_nextkey," ndbm(3X)
.xx "" "xnslib: XNS network support" "subroutines." "" xnslib(3N)
.xx "" "/merge same lines of several files or" "subsequent lines of one file." "" paste(1)
.xx "of a file." "" "sum: print checksum and block count" "" sum(1)
.xx "" "du:" "summarize disk usage." "" du(1)
.xx "records." "acctcms: command" "summary from per-process accounting" "" acctcms(1M)
.xx "" "sync: update the" "super block." "" sync(1)
.xx "" "update: periodically update the" "super block." "" update(1M)
.xx "" "sync: update" "super-block." "" sync(2)
.xx """breakout""." "" "superbreak: 3-D version of the game" "" superbreak(1d)
.xx "" "inetd: internet" "``super-server''." "" inetd(1M)
.xx "" "su: become" "super-user or another user." "" su(1)
.xx "" "xnsread, xnswrite, xsh: XNS network" "support routines." "/xnslisten," xnslib(3X)
.xx "" "xnslib: XNS network" "support subroutines." "" xnslib(3N)
.xx "document." "style: analyze" "surface characteristics of a" "" style(1)
.xx "" "surfcar, surfegg:" "surface editor and rendering driver." "" surfcar(1d)
.xx "rendering driver." "" "surfcar, surfegg: surface editor and" "" surfcar(1d)
.xx "rendering driver." "surfcar," "surfegg: surface editor and" "" surfcar(1d)
.xx "" "sleep:" "suspend execution for an interval." "" sleep(1)
.xx "" "sleep:" "suspend execution for interval." "" sleep(3C)
.xx "" "pause:" "suspend process until signal." "" pause(2)
.xx "profile." "monitor, resume_prof," "suspend_prof: prepare execution" "" monitor(3C)
.xx "" "" "swab: swap bytes." "" swab(3C)
.xx "" "swab:" "swap bytes." "" swab(3C)
.xx "" "breaksw: exit from" "switch." "" csh(1)
.xx "" "case: selector in" "switch." "" csh(1)
.xx "" "default: catchall clause in" "switch." "" csh(1)
.xx "" "endsw: terminate" "switch." "" csh(1)
.xx "" "" "switch: multi-way command branch." "" csh(1)
.xx "mode." "multi:" "switch the system to multi-user" "" multi(1M)
.xx "mode." "single:" "switch the system to single-user" "" single(1M)
.xx "" "stab:" "symbol table types." "" stab(4)
.xx "" "readlink: read value of a" "symbolic link." "" readlink(2)
.xx "" "symlink: make" "symbolic link to a file." "" symlink(2)
.xx "" "strip: remove" "symbols and relocation bits." "" strip(1)
.xx "file." "" "symlink: make symbolic link to a" "" symlink(2)
.xx "" "" "sync: update super-block." "" sync(2)
.xx "" "" "sync: update the super block." "" sync(1)
.xx "" "select:" "synchronous I/O multiplexing - TCP." "" select(2)
.xx "" "(command interpreter) with C-like" "syntax." "csh: a shell" csh(1)
.xx "messages." "perror, errno," "sys_errlist, sys_nerr: system error" "" perror(3C)
.xx "information." "" "sysfs: get file system type" "" sysfs(2)
.xx "" "" "sys_id: system identification." "" sys_id(4)
.xx "setlogmask: control system log." "" "syslog, openlog, closelog," "" syslog(3B)
.xx "" "" "syslogd: log systems messages." "" syslogd(1M)
.xx "" "perror, errno, sys_errlist," "sys_nerr: system error messages." "" perror(3C)
.xx "" "stat: data returned by stat" "system call." "" stat(5)
.xx "" "intro: introduction to" "system calls and error numbers." "" intro(2)
.xx "" "unlink: exercise link and unlink" "system calls." "link," link(1M)
.xx "interactive/" "fsck, dfsck: file" "system consistency check and" "" fsck(1M)
.xx "" "crash: what to do when the" "system crashes." "" crash(8)
.xx "" "cu: call another UNIX" "System." "" cu(1C)
.xx "" "types: primitive" "system data types." "" types(5)
.xx "" "rc.getdate: user-configurable" "system date initialization." "" rc.getdate(1M)
.xx "" "fsdb: Bell file" "system debugger." "" fsdb(1M)
.xx "" "/endmntent, hasmntopt: get file" "system descriptor file entry." "" getmntent(3C)
.xx "" "or display name of current domain" "system." "domainname: set" domainname(1)
.xx "" "system: layout of the Extent file" "system." "Extent file" efs(4)
.xx "" "errno, sys_errlist, sys_nerr:" "system error messages." "perror," perror(3C)
.xx "" "uupick: public unix system-to-unix" "system file copy." "uuto," uuto(1C)
.xx "" "loadfont: replace the" "system font." "" loadfont(1G)
.xx "volume." "Bell file" "system: format of Bell file system" "" bellfs(4)
.xx "" "file" "system: format of system volumes." "" fs(4)
.xx "" "C floating point exception handling" "system." "fpsigset:" fpsigset(3C)
.xx "" "information from the operating" "system." "getversion: get version" getversion(2)
.xx "" "uptime: show how long" "system has been up." "" uptime(1)
.xx "" "or print identifier of current host" "system." "hostid: set" hostid(1)
.xx "" "set or print name of current host" "system." "hostname:" hostname(1)
.xx "" "sys_id:" "system identification." "" sys_id(4)
.xx "" "dirent: file" "system independent directory entry." "" dirent(4)
.xx "" "directory entries and put in a file" "system independent format." "/read" getdents(2)
.xx "" "statfs, fstatfs: get file" "system information - TCP." "" statfs(2)
.xx "" "brc, bcheckrc, rc, powerfail:" "system initialization shell scripts." "" brc(1M)
.xx "" "bellinode: format of a Bell file" "system inode." "" bellinode(4)
.xx "" "efsinode: format of an Extent file" "system inode." "" efsinode(4)
.xx "" "" "system: issue a shell command." "" system(3S)
.xx "" "labelit: label a file" "system." "" labelit(1M)
.xx "system." "Extent file" "system: layout of the Extent file" "" efs(4)
.xx "" "loadav: graphically display the" "system load average." "" loadav(1W)
.xx "" "closelog, setlogmask: control" "system log." "syslog, openlog," syslog(3B)
.xx "" "lpadmin: configure the LP spooling" "system." "" lpadmin(1M)
.xx "application/" "intro: introduction to" "system maintenance commands and" "" intro(1M)
.xx "" "intro: introduction to" "system maintenance procedures." "" intro(8)
.xx "" "mkfs: construct a file" "system." "" mkfs(1M)
.xx "" "mount: mount a file" "system." "" mount(2)
.xx "" "uname: print" "system name and version information." "" uname(1)
.xx "" "nfs: network file" "system." "" nfs(7)
.xx "" "nfsmount: mount an NFS file" "system." "" nfsmount(2)
.xx "" "getpagesize: get" "system page size." "" getpagesize(2)
.xx "" "pagesize: print" "system page size." "" pagesize(1)
.xx "" "reboot: reboot the" "system." "" reboot(1M)
.xx "" "reboot: reboot the" "system." "" reboot(2)
.xx "" "mkboot: make a bootable tape for" "system restoration." "" mkboot(1M)
.xx "" "a printer from the LP spooling" "system." "rmprinter: remove" rmprinter(1M)
.xx "" "floating-point exception handling" "system." "/FORTRAN and Pascal" setfpe(3X)
.xx "" "nfsstat: Network File" "System statistics." "" nfsstat(1M)
.xx "" "ustat: get file" "system statistics." "" ustat(2)
.xx "" "rwhod:" "system status server." "" rwhod(1M)
.xx "" "/etc/mtab: mounted file" "system table." "" mtab(4)
.xx "" "rmtab: remotely mounted file" "system table." "" rmtab(4)
.xx "deleting/" "preset: reset the lp queue" "system to a pristine state by" "" preset(1M)
.xx "" "multi: switch the" "system to multi-user mode." "" multi(1M)
.xx "" "single: switch the" "system to single-user mode." "" single(1M)
.xx "" "sysfs: get file" "system type information." "" sysfs(2)
.xx "" "umount: unmount a file" "system." "" umount(2)
.xx "" "uname: get name of current UNIX" "system." "" uname(2)
.xx "" "file system: format of Bell file" "system volume." "Bell" bellfs(4)
.xx "" "file system: format of" "system volumes." "" fs(4)
.xx "" "who: who is on the" "system." "" who(1)
.xx "" "syslogd: log" "systems messages." "" syslogd(1M)
.xx "" "uuto, uupick: public unix" "system-to-unix system file copy." "" uuto(1C)
.xx "" "cshrc: csh" "system-wide .login file." "" cshrc(4)
.xx "" "" "t3279: IBM 3270 terminal emulator." "" t3279(1C)
.xx "" "rehash: recompute command hash" "table." "" csh(1)
.xx "" "unhash: discard command hash" "table." "" csh(1)
.xx "" "/etc/mtab: mounted file system" "table." "" mtab(4)
.xx "" "rmtab: remotely mounted file system" "table." "" rmtab(4)
.xx "" "setmnt: establish mount" "table." "" setmnt(1M)
.xx "" "getdtablesize: get descriptor" "table size." "" getdtablesize(2)
.xx "" "hyp: hyperchannel" "table translation." "" hyp(1M)
.xx "" "stab: symbol" "table types." "" stab(4)
.xx "" "nterm: terminal driving" "tables for nroff." "" nterm(5)
.xx "" "tbl: format" "tables for nroff or troff." "" tbl(1)
.xx "" "tbl: prepares" "tables for nroff or troff." "" tbl(1)
.xx "" "hdestroy: manage hash search" "tables." "hsearch, hcreate," hsearch(3C)
.xx "" "set the hyperchannel routing" "tables." "hyroute:" hyroute(1M)
.xx "" "manually manipulate the routing" "tables." "route:" route(1M)
.xx "" "tabs: set" "tabs on a terminal." "" tabs(1)
.xx "" "" "tabs: set tabs on a terminal." "" tabs(1)
.xx "" "ctags: maintain a" "tags file for a C program." "" ctags(1)
.xx "file." "" "tail: deliver the last part of a" "" tail(1)
.xx "(_lacos),/" "sin (_lsin), cos (_lcos)," "tan (_ltan), asin (_lasin), acos" "" trig(3M)
.xx "" "sinh (_lsinh), cosh (_lcosh)," "tanh (_ltanh): hyperbolic functions." "" sinh(3M)
.xx "" "tar:" "tape archiver." "" tar(1)
.xx "" "siq: Interphase Storager 2 qic-02" "tape controller." "" siq(7)
.xx "" "mkboot: make a bootable" "tape for system restoration." "" mkboot(1M)
.xx "" "mtio: magnetic" "tape interface." "" mtio(7)
.xx "" "mt: magnetic" "tape manipulating program." "" mt(1)
.xx "" "" "tar: tape archiver." "" tar(1)
.xx "" "generate programs for simple lexical" "tasks." "lex:" lex(1)
.xx "" "deroff: remove nroff/troff," "tbl, and eqn constructs." "" deroff(1)
.xx "troff." "" "tbl: format tables for nroff or" "" tbl(1)
.xx "troff." "" "tbl: prepares tables for nroff or" "" tbl(1)
.xx "" "" "tc: phototypesetter simulator." "" tc(1)
.xx "" "" "tc: troff output interpreter." "" tc(1)
.xx "Protocol." "" "tcp: Internet Transmission Control" "" tcp(7P)
.xx "" "ip: Internet Protocol -" "TCP." "" ip(7P)
.xx "rc.xns: communication option/" "rc." "tcp, rc.nfs, rc.mail, rc.488," "" rc.tcp(1M)
.xx "" "synchronous I/O multiplexing -" "TCP." "select:" select(2)
.xx "" "an endpoint for communication -" "TCP." "socket: create" socket(2)
.xx "" "get file system information -" "TCP." "statfs, fstatfs:" statfs(2)
.xx "trees." "tsearch," "tdelete, twalk: manage binary search" "" tsearch(3C)
.xx "" "" "tee: pipe fitting." "" tee(1)
.xx "format." "ps4014: convert a" "Tektronix 4014 files to POSTSCRIPT" "" ps4014(1)
.xx "" "4014: paginator for the" "Tektronix 4014 terminal." "" 4014(1)
.xx "" "reset: reset the" "teletype bits to a sensible state." "" reset(1)
.xx "" "indicate last logins of users and" "teletypes." "last:" last(1)
.xx "initialization." "init," "telinit: process control" "" init(1M)
.xx "closedir:/" "opendir, readdir," "telldir, seekdir, rewinddir," "" directory(3B)
.xx "closedir:/" "opendir, readdir," "telldir, seekdir, rewinddir," "" directory(3C)
.xx "" "telnetd: DARPA" "TELNET protocol server." "" telnetd(1M)
.xx "" "telnet: user interface to the" "TELNET protocol." "" telnet(1C)
.xx "protocol." "" "telnet: user interface to the TELNET" "" telnet(1C)
.xx "server." "" "telnetd: DARPA TELNET protocol" "" telnetd(1M)
.xx "temporary file." "tmpnam," "tempnam: create a name for a" "" tmpnam(3S)
.xx "" "tmpfile: create a" "temporary file." "" tmpfile(3S)
.xx "" "tmpnam, tempnam: create a name for a" "temporary file." "" tmpnam(3S)
.xx "terminals." "" "term: conventional names for" "" term(5)
.xx "base." "" "termcap: terminal capability data" "" termcap(4)
.xx "" "paginator for the Tektronix 4014" "terminal." "4014:" 4014(1)
.xx "" "special functions of the DASI 450" "terminal." "450: handle" 450(1)
.xx "" "termcap:" "terminal capability data base." "" termcap(4)
.xx "" "ct: spawn getty to a remote" "terminal." "" ct(1C)
.xx "" "ctermid: generate file name for" "terminal." "" ctermid(3S)
.xx "" "tset:" "terminal dependent initialization." "" tset(1)
.xx "" "pty: pseudo" "terminal driver." "" pty(7)
.xx "" "nterm:" "terminal driving tables for nroff." "" nterm(5)
.xx "" "t3279: IBM 3270" "terminal emulator." "" t3279(1C)
.xx "" "greek: select" "terminal filter." "" greek(1)
.xx "" "/tgetflag, tgetstr, tgoto, tputs:" "terminal independent operation/" "" termcap(3X)
.xx "" "termio: general" "terminal interface." "" termio(7)
.xx "" "tty: controlling" "terminal interface." "" tty(7)
.xx "" "and relinquish an out-going" "terminal line connection." "/establish" dial(3C)
.xx "" "rootcopy: IRIS" "terminal root partition copy." "" rootcopy(1M)
.xx "" "clear: clear" "terminal screen." "" clear(1)
.xx "" "script: make typescript of" "terminal session." "" script(1)
.xx "" "gettydefs: speed and" "terminal settings used by getty." "" gettydefs(4)
.xx "" "stty: set the options for a" "terminal." "" stty(1)
.xx "" "tabs: set tabs on a" "terminal." "" tabs(1)
.xx "" "ttyname, isatty: find name of a" "terminal." "" ttyname(3C)
.xx "line discipline." "getty: set" "terminal type, modes, speed, and" "" getty(1M)
.xx "" "ttytype: data base of" "terminal types by port." "" ttytype(4)
.xx "" "worms: animate worms on a display" "terminal." "" worms(6)
.xx "" "functions of DASI 300 and 300s" "terminals." "/300s: handle special" 300(1)
.xx "" "functions of HP 2640 and 2621-series" "terminals." "hp: handle special" hp(1)
.xx "" "tty: get the" "terminal's name." "" tty(1)
.xx "" "term: conventional names for" "terminals." "" term(5)
.xx "" "kill:" "terminate a process." "" kill(1)
.xx "" "shutdown:" "terminate all processing." "" shutdown(1M)
.xx "" "esac:" "terminate case." "" sh(1)
.xx "" "endif:" "terminate conditional." "" csh(1)
.xx "" "fi:" "terminate conditional." "" sh(1)
.xx "" "end:" "terminate loop." "" csh(1)
.xx "" "done:" "terminate loop." "" sh(1)
.xx "" "exit, _exit:" "terminate process." "" exit(2)
.xx "" "endsw:" "terminate switch." "" csh(1)
.xx "" "wait for child process to stop or" "terminate." "wait:" wait(2)
.xx "" "" "termio: general terminal interface." "" termio(7)
.xx "" "" "test: condition evaluation command." "" sh(1)
.xx "" "" "test: condition evaluation command." "" test(1)
.xx "" "quiz:" "test your knowledge." "" quiz(6)
.xx "background texture." "" "texback: generate a textured" "" texback(1W)
.xx "pixel text." "" "text: dragging and scrolling of" "" text(1d)
.xx "" "ed:" "text editor." "" ed(1)
.xx "" "ex, edit:" "text editor." "" ex(1)
.xx "" "newform: change the format of a" "text file." "" newform(1)
.xx "" "fspec: format specification in" "text files." "" fspec(4)
.xx "printing." "enscript: convert" "text files to POSTSCRIPT format for" "" enscript(1)
.xx "" "neqn: format mathematical" "text for nroff." "" neqn(1)
.xx "" "cw: prepare constant-width" "text for troff." "" cw(1)
.xx "" "eqn: format mathematical" "text for troff." "" eqn(1)
.xx "" "fmt: simple" "text formatter." "" fmt(1)
.xx "language." "troff:" "text formatting and typesetting" "" troff(1)
.xx "" "ms:" "text formatting macros." "" ms(5)
.xx "" "nroff: format" "text." "" nroff(1)
.xx "" "nroff: format or typeset" "text." "" nroff(1)
.xx "" "plock: lock process," "text, or data in memory." "" plock(2)
.xx "" "checkcw: verifies constant-width" "text prepared by cw(1) for troff." "" checkcw(1)
.xx "" "dragging and scrolling of pixel" "text." "text:" text(1d)
.xx "" "troff: typeset" "text." "" troff(1)
.xx "" "textcolors: set the colors used by a" "text window." "" textcolors(1G)
.xx "text window." "" "textcolors: set the colors used by a" "" textcolors(1G)
.xx "" "generate a textured background" "texture." "bckgrnd:" bckgrnd(1d)
.xx "" "generate a textured background" "texture." "texback:" texback(1W)
.xx "" "bckgrnd: generate a" "textured background texture." "" bckgrnd(1d)
.xx "" "texback: generate a" "textured background texture." "" texback(1W)
.xx "" "" "tftp: trivial file transfer program." "" tftp(1C)
.xx "Protocol server." "" "tftpd: DARPA Trivial File Transfer" "" tftpd(1M)
.xx "tgoto, tputs: terminal independent/" "" "tgetent, tgetnum, tgetflag, tgetstr," "" termcap(3X)
.xx "terminal/" "tgetent, tgetnum," "tgetflag, tgetstr, tgoto, tputs:" "" termcap(3X)
.xx "tputs: terminal/" "tgetent," "tgetnum, tgetflag, tgetstr, tgoto," "" termcap(3X)
.xx "" "tgetent, tgetnum, tgetflag," "tgetstr, tgoto, tputs: terminal/" "" termcap(3X)
.xx "" "tgetent, tgetnum, tgetflag, tgetstr," "tgoto, tputs: terminal independent/" "" termcap(3X)
.xx "" "if," "then: conditional statement." "" sh(1)
.xx "" "explain: print wordy sentences;" "thesaurus for diction." "diction," diction(1)
.xx "" "merge:" "three-way file merge." "" merge(1)
.xx "" "ttt, cubic:" "tic-tac-toe." "" ttt(6)
.xx "" "time:" "time a command." "" time(1)
.xx "" "loadst: print current" "time and load statistics.." "" loadst(1)
.xx "" "at: execute commands at a later" "time." "" at(1)
.xx "" "time:" "time command." "" csh(1)
.xx "" "" "time: get time." "" time(2)
.xx "" "gettimeofday: get date and" "time." "" gettimeofday(3B)
.xx "" "clock: display the current" "time of day." "" clock(1W)
.xx "" "profil: execution" "time profile." "" profil(2)
.xx "" "a Bourne Shell environment at login" "time." "profile: setting up" profile(4)
.xx "" "timed:" "time server daemon." "" timed(1M)
.xx "" "stime: set" "time." "" stime(2)
.xx "" "" "time: time a command." "" time(1)
.xx "" "" "time: time command." "" csh(1)
.xx "" "time: get" "time." "" time(2)
.xx "" "asctime, tzset: convert date and" "time to string." "/localtime, gmtime," ctime(3C)
.xx "" "clock: report CPU" "time used." "" clock(3C)
.xx "" "TZ: local" "time zone." "" tz(4)
.xx "" "timedc:" "timed control program." "" timedc(1M)
.xx "function." "sginap:" "timed sleep and processor yield" "" sginap(2)
.xx "" "" "timed: time server daemon." "" timed(1M)
.xx "" "" "timedc: timed control program." "" timedc(1M)
.xx "" "blanktime: set the screen blanking" "timeout." "" blanktime(1G)
.xx "times." "" "times: get process and child process" "" times(2)
.xx "" "update access and modification" "times of a file." "touch:" touch(1)
.xx "" "" "times: print accumulated times." "" sh(1)
.xx "" "times: print accumulated" "times." "" sh(1)
.xx "" "times: get process and child process" "times." "" times(2)
.xx "" "set file access and modification" "times." "utime:" utime(2)
.xx "" "" "tmpfile: create a temporary file." "" tmpfile(3S)
.xx "temporary file." "" "tmpnam, tempnam: create a name for a" "" tmpnam(3S)
.xx "" "/tolower, _toupper, _tolower," "toascii: translate characters." "" conv(3C)
.xx "" "popen, pclose: initiate pipe" "to/from a process." "" popen(3S)
.xx "" "toupper, tolower, _toupper," "_tolower, toascii: translate/" "" conv(3C)
.xx "toascii: translate/" "toupper," "tolower, _toupper, _tolower," "" conv(3C)
.xx "" "tsort:" "topological sort." "" tsort(1)
.xx "" "acctmerg: merge or add" "total accounting files." "" acctmerg(1M)
.xx "modification times of a file." "" "touch: update access and" "" touch(1)
.xx "translate/" "toupper, tolower," "_toupper, _tolower, toascii:" "" conv(3C)
.xx "_tolower, toascii: translate/" "" "toupper, tolower, _toupper," "" conv(3C)
.xx "" "/tgetnum, tgetflag, tgetstr, tgoto," "tputs: terminal independent/" "" termcap(3X)
.xx "" "" "tr: translate characters." "" tr(1)
.xx "" "ptrace: process" "trace." "" ptrace(2)
.xx "filesystems." "mount: keep" "track of remotely mounted" "" mount(3X)
.xx "" "ether: monitor" "traffic on the Ethernet." "" ether(3X)
.xx "" "/psrv, pstext, psbanner, psinterface:" "TRANSCRIPT spooler filters for/" "" transcript(5)
.xx "server to here." "ypxfr:" "transfer a YP map from some YP" "" ypxfr(1M)
.xx "" "goto: command" "transfer." "" csh(1)
.xx "" "blt: block" "transfer data." "" blt(3C)
.xx "" "ftp: ARPANET file" "transfer program." "" ftp(1C)
.xx "" "tftp: trivial file" "transfer program." "" tftp(1C)
.xx "" "ftpd: DARPA Internet File" "Transfer Protocol server." "" ftpd(1M)
.xx "" "tftpd: DARPA Trivial File" "Transfer Protocol server." "" tftpd(1M)
.xx "" "flpuxfer:" "transfer the bootable floppy." "" flpuxfer(1M)
.xx "" "_toupper, _tolower, toascii:" "translate characters." "/tolower," conv(3C)
.xx "" "iscntrl, isascii: classify or" "translate characters." "/isgraph," ctype(3C)
.xx "" "tr:" "translate characters." "" tr(1)
.xx "" "hyp: hyperchannel table" "translation." "" hyp(1M)
.xx "" "tcp: Internet" "Transmission Control Protocol." "" tcp(7P)
.xx "" "encode/decode a binary file for" "transmission via mail." "/uudecode:" uuencode(1C)
.xx "scripts." "" "trap: process interrupts in command" "" sh(1)
.xx "" "ftw: walk a file" "tree." "" ftw(3C)
.xx "" "tdelete, twalk: manage binary search" "trees." "tsearch," tsearch(3C)
.xx "" "" "trek: trekkie game." "" trek(6)
.xx "" "trek:" "trekkie game." "" trek(6)
.xx "" "atan (_latan), atan2 (_latan2):" "trigonometric functions." "/(_lacos)," trig(3M)
.xx "" "tftp:" "trivial file transfer program." "" tftp(1C)
.xx "server." "tftpd: DARPA" "Trivial File Transfer Protocol" "" tftpd(1M)
.xx "" "text prepared by cw(1) for" "troff." "/verifies constant-width" checkcw(1)
.xx "" "cw: prepare constant-width text for" "troff." "" cw(1)
.xx "language." "" "troff: description of output" "" troff(5)
.xx "" "eqn: format mathematical text for" "troff." "" eqn(1)
.xx "" "font: description files for" "troff." "" font(4)
.xx "POSTSCRIPT format." "psdit: convert" "troff intermediate format to" "" psdit(1)
.xx "view graphs and slides." "mv: a" "troff macro package for typesetting" "" mv(5)
.xx "" "tc:" "troff output interpreter." "" tc(1)
.xx "simple pictures." "pic:" "troff preprocessor for drawing" "" pic(1)
.xx "" "tbl: format tables for nroff or" "troff." "" tbl(1)
.xx "" "tbl: prepares tables for nroff or" "troff." "" tbl(1)
.xx "typesetting language." "" "troff: text formatting and" "" troff(1)
.xx "" "psroff:" "troff to a POSTSCRIPT printer." "" psroff(1)
.xx "" "" "troff: typeset text." "" troff(1)
.xx "" "" "true, false: provide truth values." "" true(1)
.xx "length." "truncate, ftruncate:" "truncate a file to a specified" "" truncate(2)
.xx "to a specified length." "" "truncate, ftruncate: truncate a file" "" truncate(2)
.xx "" "rhosts: list of" "trusted hosts and users." "" rhosts(4)
.xx "" "hosts.equiv: list of" "trusted hosts." "" hosts.equiv(4)
.xx "" "m68000, m68k: get processor type" "truth value." "/u3b5, vax, 4d60, mips," machid(1)
.xx "" "true, false: provide" "truth values." "" true(1)
.xx "" "chase:" "try to escape the killer robots." "" chase(6)
.xx "binary search trees." "" "tsearch, tdelete, twalk: manage" "" tsearch(3C)
.xx "initialization." "" "tset: terminal dependent" "" tset(1)
.xx "" "" "tsort: topological sort." "" tsort(1)
.xx "" "" "ttt, cubic: tic-tac-toe." "" ttt(6)
.xx "" "" "tty: controlling terminal interface." "" tty(7)
.xx "" "" "tty: get the terminal's name." "" tty(1)
.xx "" "greek: graphics for the extended" "TTY-37 type-box." "" greek(5)
.xx "terminal." "" "ttyname, isatty: find name of a" "" ttyname(3C)
.xx "file of the current user." "" "ttyslot: find the slot in the utmp" "" ttyslot(3C)
.xx "by port." "" "ttytype: data base of terminal types" "" ttytype(4)
.xx "" "/prtacct, runacct, shutacct, startup," "turnacct: shell procedures for/" "" acctsh(1M)
.xx "" "tsearch, tdelete," "twalk: manage binary search trees." "" tsearch(3C)
.xx "" "twinkle:" "twinkle stars on the screen." "" twinkle(6)
.xx "screen." "" "twinkle: twinkle stars on the" "" twinkle(6)
.xx "" "iset: change the" "type field of an image file." "" iset(1W)
.xx "" "file: determine file" "type." "" file(1)
.xx "" "sysfs: get file system" "type information." "" sysfs(2)
.xx "discipline." "getty: set terminal" "type, modes, speed, and line" "" getty(1M)
.xx "" "set30, setntsc: set video output" "type." "set60," set60(1d)
.xx "" "mips, m68000, m68k: get processor" "type truth value." "/u3b5, vax, 4d60," machid(1)
.xx "" "graphics for the extended TTY-37" "type-box." "greek:" greek(5)
.xx "" "ttytype: data base of terminal" "types by port." "" ttytype(4)
.xx "" "" "types: primitive system data types." "" types(5)
.xx "" "stab: symbol table" "types." "" stab(4)
.xx "" "types: primitive system data" "types." "" types(5)
.xx "" "script: make" "typescript of terminal session." "" script(1)
.xx "" "mmt:" "typeset documents." "" mmt(1)
.xx "slides." "mmt, mvt:" "typeset documents, view graphs, and" "" mmt(1)
.xx "" "nroff: format or" "typeset text." "" nroff(1)
.xx "" "troff:" "typeset text." "" troff(1)
.xx "" "mvt:" "typeset view graphs and slides." "" mvt(1)
.xx "" "troff: text formatting and" "typesetting language." "" troff(1)
.xx "" "mv: a troff macro package for" "typesetting view graphs and slides." "" mv(5)
.xx "" "" "TZ: local time zone." "" tz(4)
.xx "" "ctime, localtime, gmtime, asctime," "tzset: convert date and time to/" "" ctime(3C)
.xx "mips, m68000, m68k: get/" "pdp11," "u3b, u3b15, u3b2, u3b5, vax, 4d60," "" machid(1)
.xx "m68000, m68k: get/" "pdp11, u3b," "u3b15, u3b2, u3b5, vax, 4d60, mips," "" machid(1)
.xx "m68k: get/" "pdp11, u3b, u3b15," "u3b2, u3b5, vax, 4d60, mips, m68000," "" machid(1)
.xx "get/" "pdp11, u3b, u3b15, u3b2," "u3b5, vax, 4d60, mips, m68000, m68k:" "" machid(1)
.xx "Protocol." "" "udp: Internet User Datagram" "" udp(7P)
.xx "" "getpw: get name from" "UID." "" getpw(3C)
.xx "" "" "ul: do underlining." "" ul(1)
.xx "limits." "" "ulimit: change or display size" "" sh(1)
.xx "" "" "ulimit: get and set user limits." "" ulimit(2)
.xx "creation mask." "" "umask: change or display file" "" csh(1)
.xx "creation mask." "" "umask: change or display file" "" sh(1)
.xx "mask." "" "umask: set and get file creation" "" umask(2)
.xx "" "" "umask: set file-creation mode mask." "" umask(1)
.xx "filesystems." "mount," "umount: mount and dismount" "" mount(1M)
.xx "" "" "umount: unmount a file system." "" umount(2)
.xx "" "" "unalias: remove aliases." "" csh(1)
.xx "system." "" "uname: get name of current UNIX" "" uname(2)
.xx "information." "" "uname: print system name and version" "" uname(1)
.xx "" "ul: do" "underlining." "" ul(1)
.xx "out-going terminal line/" "dial," "undial: establish and relinquish an" "" dial(3C)
.xx "" "unget:" "undo a previous get of an SCCS file." "" unget(1)
.xx "SCCS file." "" "unget: undo a previous get of an" "" unget(1)
.xx "input stream." "" "ungetc: push character back into" "" ungetc(3S)
.xx "" "" "unhash: discard command hash table." "" csh(1)
.xx "" "/srand48, seed48, lcong48: generate" "uniformly distributed pseudo-random/" "" drand48(3C)
.xx "file." "" "uniq: report repeated lines in a" "" uniq(1)
.xx "" "mktemp: make a" "unique file name." "" mktemp(3C)
.xx "" "gethostident: get the host's" "unique identification." "" gethostident(3C)
.xx "" "gethostid, sethostid: get/set" "unique identifier of current host." "" gethostid(2)
.xx "" "" "units: conversion program." "" units(1)
.xx "" "uux: unix to" "unix command execution." "" uux(1C)
.xx "" "uucp, uulog, uuname: unix to" "unix copy." "" uucp(1C)
.xx "" "mkbootflp: create a bootable" "unix floppy disk." "" mkbootflp(1M)
.xx "" "cu: call another" "UNIX System." "" cu(1C)
.xx "" "uname: get name of current" "UNIX system." "" uname(2)
.xx "copy." "uuto, uupick: public" "unix system-to-unix system file" "" uuto(1C)
.xx "" "collectmail: convert mail from" "unix to rmail format." "" collectmail(1)
.xx "" "uux:" "unix to unix command execution." "" uux(1C)
.xx "" "uucp, uulog, uuname:" "unix to unix copy." "" uucp(1C)
.xx "" "worms:" "UNIX worms running on the IRIS." "" worms(1W)
.xx "system calls." "link," "unlink: exercise link and unlink" "" link(1M)
.xx "" "" "unlink: remove directory entry." "" unlink(2)
.xx "" "link, unlink: exercise link and" "unlink system calls." "" link(1M)
.xx "" "umount:" "unmount a file system." "" umount(2)
.xx "" "pack, pcat," "unpack: compress and expand files." "" pack(1)
.xx "" "" "unset: discard shell variables." "" csh(1)
.xx "variables." "" "unsetenv: remove environment" "" csh(1)
.xx "login time." "profile: setting" "up a Bourne Shell environment at" "" profile(4)
.xx "" "login, cshrc: setting" "up a C Shell environment." "" login(4)
.xx "" "show how long system has been" "up." "uptime:" uptime(1)
.xx "of a file." "touch:" "update access and modification times" "" touch(1)
.xx "programs." "make: maintain," "update, and regenerate groups of" "" make(1)
.xx "" "lsearch: linear search and" "update." "" lsearch(3C)
.xx "super block." "" "update: periodically update the" "" update(1M)
.xx "" "sync:" "update super-block." "" sync(2)
.xx "" "sgilabel: print or" "update the SGI disk drive label." "" sgilabel(1M)
.xx "" "sync:" "update the super block." "" sync(1)
.xx "" "update: periodically" "update the super block." "" update(1M)
.xx "" "yppasswd:" "update Yellow Pages user password." "" yppasswd(3X)
.xx "" "signal: specify what to do" "upon receipt of a signal." "" signal(2)
.xx "been up." "" "uptime: show how long system has" "" uptime(1)
.xx "" "du: summarize disk" "usage." "" du(1)
.xx "" "emacsedit: an editor for" "use in Emacs shell windows." "" emacsedit(1)
.xx "" "textcolors: set the colors" "used by a text window." "" textcolors(1G)
.xx "" "speed and terminal settings" "used by getty." "gettydefs:" gettydefs(4)
.xx "" "clock: report CPU time" "used." "" clock(3C)
.xx "" "id: print" "user and group IDs and names." "" id(1)
.xx "" "setuid, setgid: set" "user and group IDs." "" setuid(2)
.xx "" "login: login new" "user." "" csh(1)
.xx "" "get character login name of the" "user." "cuserid:" cuserid(3S)
.xx "" "udp: Internet" "User Datagram Protocol." "" udp(7P)
.xx "" "/geteuid, getgid, getegid: get real" "user, effective user, real group,/" "" getuid(2)
.xx "" "environ:" "user environment." "" environ(5)
.xx "" "whoami: print effective current" "user id." "" whoami(1)
.xx "protocol." "telnet:" "user interface to the TELNET" "" telnet(1C)
.xx "" "ulimit: get and set" "user limits." "" ulimit(2)
.xx "" "logname: return login name of" "user." "" logname(3X)
.xx "" "yppasswd: update Yellow Pages" "user password." "" yppasswd(3X)
.xx "" "/getegid: get real user, effective" "user, real group, and effective/" "" getuid(2)
.xx "FORTRAN runtime errors.." "userexit:" "user routine for intercepting" "" userexit(3X)
.xx "" "su: become super-user or another" "user." "" su(1)
.xx "" "slot in the utmp file of the current" "user." "ttyslot: find the" ttyslot(3C)
.xx "" "write: write to another" "user." "" write(1)
.xx "initialization." "rc.getdate:" "user-configurable system date" "" rc.getdate(1M)
.xx "intercepting FORTRAN runtime/" "" "userexit: user routine for" "" userexit(3X)
.xx "" "last: indicate last logins of" "users and teletypes." "" last(1)
.xx "" "rusers: return information about" "users on remote machines." "rnusers," rnusers(3X)
.xx "" "mail, rmail: send mail to" "users or read mail." "" mail(1)
.xx "" "rwall: write to all" "users over a network." "" rwall(1M)
.xx "" "rhosts: list of trusted hosts and" "users." "" rhosts(4)
.xx "" "wall: write to all" "users." "" wall(1M)
.xx "" "" "ustat: get file system statistics." "" ustat(2)
.xx "" "xnsd: network" "utility daemon." "" xnsd(1M)
.xx "modification times." "" "utime: set file access and" "" utime(2)
.xx "" "utmp, wtmp:" "utmp and wtmp entry formats." "" utmp(4)
.xx "" "setutent, endutent, utmpname: access" "utmp file entry." "/pututline," getut(3C)
.xx "" "ttyslot: find the slot in the" "utmp file of the current user." "" ttyslot(3C)
.xx "formats." "" "utmp, wtmp: utmp and wtmp entry" "" utmp(4)
.xx "" "/pututline, setutent, endutent," "utmpname: access utmp file entry." "" getut(3C)
.xx "clean-up." "" "uuclean: uucp spool directory" "" uuclean(1M)
.xx "" "uusub: monitor" "uucp network." "" uusub(1M)
.xx "" "uuclean:" "uucp spool directory clean-up." "" uuclean(1M)
.xx "" "uustat:" "uucp status inquiry and job control." "" uustat(1C)
.xx "copy." "" "uucp, uulog, uuname: unix to unix" "" uucp(1C)
.xx "file for transmission via/" "uuencode," "uudecode: encode/decode a binary" "" uuencode(1C)
.xx "binary file for transmission via/" "" "uuencode, uudecode: encode/decode a" "" uuencode(1C)
.xx "" "uucp," "uulog, uuname: unix to unix copy." "" uucp(1C)
.xx "" "uucp, uulog," "uuname: unix to unix copy." "" uucp(1C)
.xx "system file copy." "uuto," "uupick: public unix system-to-unix" "" uuto(1C)
.xx "control." "" "uustat: uucp status inquiry and job" "" uustat(1C)
.xx "" "" "uusub: monitor uucp network." "" uusub(1M)
.xx "system-to-unix system file copy." "" "uuto, uupick: public unix" "" uuto(1C)
.xx "" "" "uux: unix to unix command execution." "" uux(1C)
.xx "" "" "val: validate SCCS file." "" val(1)
.xx "" "val:" "validate SCCS file." "" val(1)
.xx "" "abs: return integer absolute" "value." "" abs(3C)
.xx "" "getenv: return" "value for environment name." "" getenv(3C)
.xx "" "gamma: set the gamma correction" "value for mapping colors." "" gamma(1W)
.xx "" "floor, ceiling, remainder, absolute" "value functions." "/fabs (_lfabs):" floor(3M)
.xx "" "gethostident: print hostident" "value." "" gethostident(1M)
.xx "" "m68k: get processor type truth" "value." "/vax, 4d60, mips, m68000," machid(1)
.xx "" "readlink: read" "value of a symbolic link." "" readlink(2)
.xx "map." "ypmatch: print the" "value of one or more keys from a yp" "" ypmatch(1)
.xx "" "set: change" "value of shell variable." "" csh(1)
.xx "" "htonl, htons, ntohl, ntohs: convert" "values between host and network byte/" "" byteorder(3N)
.xx "" "ypcat: print" "values in a YP data base." "" ypcat(1)
.xx "" "true, false: provide truth" "values." "" true(1)
.xx "" "" "varargs: variable argument list." "" varargs(5)
.xx "" "varargs:" "variable argument list." "" varargs(5)
.xx "" "set: change value of shell" "variable." "" csh(1)
.xx "" "setenv: set" "variable in environment." "" csh(1)
.xx "" "@: arithmetic on shell" "variables." "" csh(1)
.xx "" "unset: discard shell" "variables." "" csh(1)
.xx "" "unsetenv: remove environment" "variables." "" csh(1)
.xx "" "readonly: make shell" "variables read-only." "" sh(1)
.xx "" "export: add shell" "variables to the environment." "" sh(1)
.xx "" "pdp11, u3b, u3b15, u3b2, u3b5," "vax, 4d60, mips, m68000, m68k: get/" "" machid(1)
.xx "" "" "vc: version control." "" vc(1)
.xx "" "get option letter from argument" "vector." "getopt:" getopt(3C)
.xx "prepared by cw(1) for/" "checkcw:" "verifies constant-width text" "" checkcw(1)
.xx "" "assert:" "verify program assertion." "" assert(3X)
.xx "" "vc:" "version control." "" vc(1)
.xx "operating system." "getversion: get" "version information from the" "" getversion(2)
.xx "" "uname: print system name and" "version information." "" uname(1)
.xx "" "of directory (enhanced Berkeley" "version)." "ls: list contents" ls(1)
.xx "server host." "yppoll: what" "version of a YP map is at a YP" "" yppoll(1M)
.xx "" "get: get a" "version of an SCCS file." "" get(1)
.xx "" "superbreak: 3-D" "version of the game ""breakout""." "" superbreak(1d)
.xx "" "sccsdiff: compare two" "versions of an SCCS file." "" sccsdiff(1)
.xx "display editor based on ex." "" "vi, view: screen oriented (visual)" "" vi(1)
.xx "" "a binary file for transmission" "via mail." "/uudecode: encode/decode" uuencode(1C)
.xx "" "xcmd, xsh: remote execution" "via XNS." "" xcmd(3N)
.xx "" "xx, xlogin: remote execution" "via XNS." "" xx(1C)
.xx "" "set60, set30, setntsc: set" "video output type." "" set60(1d)
.xx "" "mmt, mvt: typeset documents," "view graphs, and slides." "" mmt(1)
.xx "" "troff macro package for typesetting" "view graphs and slides." "mv: a" mv(5)
.xx "" "mvt: typeset" "view graphs and slides." "" mvt(1)
.xx "" "shadow: full-screen armchair pilot's" "view of the dogfight." "" shadow(1d)
.xx "" "radar: flight controller's" "view of the Ethernet dogfight." "" radar(1d)
.xx "display editor based on ex." "vi," "view: screen oriented (visual)" "" vi(1)
.xx "" "page: file perusal filter for crt" "viewing." "more," more(1)
.xx "" "vmstat: report" "virtual memory statistics." "" vmstat(1M)
.xx "" "" "vis: copy a file to the screen." "" vis(1W)
.xx "" "vi, view: screen oriented" "(visual) display editor based on ex." "" vi(1)
.xx "statistics." "" "vmstat: report virtual memory" "" vmstat(1M)
.xx "" "system: format of Bell file system" "volume." "Bell file" bellfs(4)
.xx "" "file system: format of system" "volumes." "" fs(4)
.xx "doing." "" "w: who is on and what they are" "" w(1)
.xx "complete." "wait:" "wait for background processes to" "" csh(1)
.xx "complete." "wait:" "wait for background processes to" "" sh(1)
.xx "complete." "wait:" "wait for background processes to" "" wait(1)
.xx "terminate." "wait:" "wait for child process to stop or" "" wait(2)
.xx "to complete." "" "wait: wait for background processes" "" csh(1)
.xx "to complete." "" "wait: wait for background processes" "" sh(1)
.xx "to complete." "" "wait: wait for background processes" "" wait(1)
.xx "or terminate." "" "wait: wait for child process to stop" "" wait(2)
.xx "" "ftw:" "walk a file tree." "" ftw(3C)
.xx "" "" "wall: write to all users." "" wall(1M)
.xx "" "" "wc: word count." "" wc(1)
.xx "" "see: see" "what a file has in it." "" see(1)
.xx "" "" "what: identify SCCS files." "" what(1)
.xx "" "w: who is on and" "what they are doing." "" w(1)
.xx "" "signal: specify" "what to do upon receipt of a signal." "" signal(2)
.xx "" "crash:" "what to do when the system crashes." "" crash(8)
.xx "server host." "yppoll:" "what version of a YP map is at a YP" "" yppoll(1M)
.xx "" "whodo: who is doing" "what." "" whodo(1M)
.xx "" "crash: what to do" "when the system crashes." "" crash(8)
.xx "or manual for program." "" "whereis: locate source, binary, and" "" whereis(1)
.xx "master?." "ypwhich:" "which host is the YP server or map" "" ypwhich(1)
.xx "conditionally." "" "while: repeat commands" "" csh(1)
.xx "conditionally." "until," "while: repeat commands" "" sh(1)
.xx "" "break: exit" "while/for loop." "" sh(1)
.xx "" "break: exit" "while/foreach loop." "" csh(1)
.xx "" "whodo:" "who is doing what." "" whodo(1M)
.xx "" "w:" "who is on and what they are doing." "" w(1)
.xx "" "who:" "who is on the system." "" who(1)
.xx "" "" "who: who is on the system." "" who(1)
.xx "id." "" "whoami: print effective current user" "" whoami(1)
.xx "" "" "whodo: who is doing what." "" whodo(1M)
.xx "" "rwho:" "who's logged in on local machines." "" rwho(1C)
.xx "" "fold: fold long lines for finite" "width output device." "" fold(1)
.xx "" "showpie: show the division of a" "window into rectangles." "" showpie(1W)
.xx "" "startup: start the" "window manager." "" startup(1W)
.xx "" "set the colors used by a text" "window." "textcolors:" textcolors(1G)
.xx "" "edge:" "window-based debugger." "" edge(1G)
.xx "" "an editor for use in Emacs shell" "windows." "emacsedit:" emacsedit(1)
.xx "" "mex: manage" "windows on the IRIS." "" mex(1G)
.xx "" "jet: depthcued" "wireframe model of a jet fighter." "" jet(1d)
.xx "shuttle." "shuttle: depthcued" "wireframe model of the space" "" shuttle(1d)
.xx "" "wc:" "word count." "" wc(1)
.xx "" "fgetc, getw: get character or" "word from stream." "getc, getchar," getc(3S)
.xx "" "hangman: guess the" "word." "" hangman(6)
.xx "" "fputc, putw: put character or" "word on a stream." "putc, putchar," putc(3S)
.xx "" "hyphen: find hyphenated" "words." "" hyphen(1)
.xx "" "do, for: loop over list of" "words." "" sh(1)
.xx "diction." "diction, explain: print" "wordy sentences; thesaurus for" "" diction(1)
.xx "" "cd: change" "working directory." "" cd(1)
.xx "" "chdir: change" "working directory." "" chdir(2)
.xx "" "getcwd: get pathname of current" "working directory." "" getcwd(3C)
.xx "" "pwd:" "working directory name." "" pwd(1)
.xx "" "getwd: get current" "working directory pathname." "" getwd(3C)
.xx "" "backup program for SGI IRIS" "workstation." "backup: interactive" backup(1M)
.xx "" "worm: play the growing" "worm game." "" worm(6)
.xx "" "" "worm: play the growing worm game." "" worm(6)
.xx "terminal." "" "worms: animate worms on a display" "" worms(6)
.xx "" "worms: animate" "worms on a display terminal." "" worms(6)
.xx "" "worms: UNIX" "worms running on the IRIS." "" worms(1W)
.xx "IRIS." "" "worms: UNIX worms running on the" "" worms(1W)
.xx "" "write:" "write on a file." "" write(2)
.xx "" "writev:" "write output." "" writev(3B)
.xx "" "putpwent:" "write password file entry." "" putpwent(3C)
.xx "" "rwall:" "write to all users over a network." "" rwall(1M)
.xx "" "wall:" "write to all users." "" wall(1M)
.xx "" "write:" "write to another user." "" write(1)
.xx "" "rwall:" "write to specified remote machines." "" rwall(3X)
.xx "" "xnswrite:" "write to XNS connection." "" xnswrite(3N)
.xx "" "" "write: write on a file." "" write(2)
.xx "" "" "write: write to another user." "" write(1)
.xx "" "" "writev: write output." "" writev(3B)
.xx "" "open: open for reading or" "writing." "" open(2)
.xx "" "" "wsiris: remote login with graphics." "" wsiris(1C)
.xx "" "utmp, wtmp: utmp and" "wtmp entry formats." "" utmp(4)
.xx "" "utmp," "wtmp: utmp and wtmp entry formats." "" utmp(4)
.xx "accounting records." "fwtmp," "wtmpfix: manipulate connect" "" fwtmp(1M)
.xx "" "" "wump: the game of hunt-the-wumpus." "" wump(6)
.xx "and execute command." "" "xargs: construct argument list(s)" "" xargs(1)
.xx "xnslisten, xnsread, xnswrite, xsh:/" "" "xcmd, xnsconnect, xnseof, xnsfile," "" xnslib(3X)
.xx "" "" "xcmd, xsh: remote execution via XNS." "" xcmd(3N)
.xx "" "" "xcp: remote file copy." "" xcp(1C)
.xx "data representation." "" "xdr: library routines for external" "" xdr(3R)
.xx "" "xx," "xlogin: remote execution via XNS." "" xx(1C)
.xx "" "xnsioctl: ioctls for" "XNS and Ethernet." "" xnsioctl(3N)
.xx "" "rc.tcp, rc.nfs, rc.mail, rc.488, rc." "xns: communication option/" "" rc.tcp(1M)
.xx "" "xnsconnect: make" "XNS connection." "" xnsconnect(3N)
.xx "" "xnswrite: write to" "XNS connection." "" xnswrite(3N)
.xx "" "nx:" "XNS Ethernet driver." "" nx(7)
.xx "Packet Protocol." "" "xns: interface to XNS Sequenced" "" xns(7)
.xx "" "/xnslisten, xnsread, xnswrite, xsh:" "XNS network support routines." "" xnslib(3X)
.xx "" "xnslib:" "XNS network support subroutines." "" xnslib(3N)
.xx "" "xns: interface to" "XNS Sequenced Packet Protocol." "" xns(7)
.xx "" "xcmd, xsh: remote execution via" "XNS." "" xcmd(3N)
.xx "" "xx, xlogin: remote execution via" "XNS." "" xx(1C)
.xx "" "" "xnsconnect: make XNS connection." "" xnsconnect(3N)
.xx "xnslisten, xnsread, xnswrite,/" "xcmd," "xnsconnect, xnseof, xnsfile," "" xnslib(3X)
.xx "" "" "xnsd: network utility daemon." "" xnsd(1M)
.xx "xnswrite, xsh:/" "xcmd, xnsconnect," "xnseof, xnsfile, xnslisten, xnsread," "" xnslib(3X)
.xx "xnswrite,/" "xcmd, xnsconnect, xnseof," "xnsfile, xnslisten, xnsread," "" xnslib(3X)
.xx "available network channel or return/" "" "xnsfile,xnspathname: find an" "" xnsfile(3N)
.xx "Ethernet." "" "xnsioctl: ioctls for XNS and" "" xnsioctl(3N)
.xx "subroutines." "" "xnslib: XNS network support" "" xnslib(3N)
.xx "" "xcmd, xnsconnect, xnseof, xnsfile," "xnslisten, xnsread, xnswrite, xsh:/" "" xnslib(3X)
.xx "network channel or return/" "xnsfile," "xnspathname: find an available" "" xnsfile(3N)
.xx "support/" "/xnseof, xnsfile, xnslisten," "xnsread, xnswrite, xsh: XNS network" "" xnslib(3X)
.xx "" "" "xnswrite: write to XNS connection." "" xnswrite(3N)
.xx "" "/xnseof, xnsfile, xnslisten, xnsread," "xnswrite, xsh: XNS network support/" "" xnslib(3X)
.xx "" "xcmd," "xsh: remote execution via XNS." "" xcmd(3N)
.xx "" "/xnslisten, xnsread, xnswrite," "xsh: XNS network support routines." "" xnslib(3X)
.xx "programs to implement shared/" "" "xstr: extract strings from C" "" xstr(1)
.xx "XNS." "" "xx, xlogin: remote execution via" "" xx(1C)
.xx "" "j0, j1, jn," "y0, y1, yn: Bessel functions." "" bessel(3M)
.xx "" "j0, j1, jn, y0," "y1, yn: Bessel functions." "" bessel(3M)
.xx "" "" "yacc: yet another compiler-compiler." "" yacc(1)
.xx "" "holidays: holidays of the" "year." "" holidays(4)
.xx "" "/yp_master, yperr_string, ypprot_err:" "yellow pages client interface." "" ypclnt(3R)
.xx "" "ypinit: build and install" "yellow pages database." "" ypinit(1M)
.xx "" "ypmake: rebuild" "yellow pages database." "" ypmake(1M)
.xx "" "makedbm: make a" "yellow pages dbm file." "" makedbm(1M)
.xx "" "rpc.passwd: server for modifying" "yellow pages password file." "" rpc.passwd(1M)
.xx "processes." "ypserv, ypbind:" "yellow pages server and binder" "" ypserv(1M)
.xx "" "yppasswd: update" "Yellow Pages user password." "" yppasswd(3X)
.xx "" "yppasswd: change login password in" "yellow pages." "" yppasswd(1)
.xx "structure." "ypfiles: the" "yellowpages database and directory" "" ypfiles(4)
.xx "" "sginap: timed sleep and processor" "yield function." "" sginap(2)
.xx "" "j0, j1, jn, y0, y1," "yn: Bessel functions." "" bessel(3M)
.xx "" "ypcat: print values in a" "YP data base." "" ypcat(1)
.xx "" "ypxfr: transfer a" "YP map from some YP server to here." "" ypxfr(1M)
.xx "" "yppoll: what version of a" "YP map is at a YP server host." "" yppoll(1M)
.xx "" "the value of one or more keys from a" "yp map." "ypmatch: print" ypmatch(1)
.xx "" "force propagation of a changed" "YP map." "yppush:" yppush(1M)
.xx "" "what version of a YP map is at a" "YP server host." "yppoll:" yppoll(1M)
.xx "" "ypwhich: which host is the" "YP server or map master?." "" ypwhich(1)
.xx "" "ypxfr: transfer a YP map from some" "YP server to here." "" ypxfr(1M)
.xx "" "/yp_match, yp_first, yp_next," "yp_all, yp_order, yp_master,/" "" ypclnt(3R)
.xx "" "ypset: point" "ypbind at a particular server." "" ypset(1M)
.xx "binder processes." "ypserv," "ypbind: yellow pages server and" "" ypserv(1M)
.xx "yp_get_default_domain, yp_match,/" "" "yp_bind, yp_unbind," "" ypclnt(3R)
.xx "base." "" "ypcat: print values in a YP data" "" ypcat(1)
.xx "pages/" "/yp_all, yp_order, yp_master," "yperr_string, ypprot_err: yellow" "" ypclnt(3R)
.xx "and directory structure." "" "ypfiles: the yellowpages database" "" ypfiles(4)
.xx "" "/yp_get_default_domain, yp_match," "yp_first, yp_next, yp_all, yp_order,/" "" ypclnt(3R)
.xx "yp_first,/" "yp_bind, yp_unbind," "yp_get_default_domain, yp_match," "" ypclnt(3R)
.xx "pages database." "" "ypinit: build and install yellow" "" ypinit(1M)
.xx "database." "" "ypmake: rebuild yellow pages" "" ypmake(1M)
.xx "" "/yp_first, yp_next, yp_all, yp_order," "yp_master, yperr_string, ypprot_err:/" "" ypclnt(3R)
.xx "more keys from a yp map." "" "ypmatch: print the value of one or" "" ypmatch(1)
.xx "" "/yp_unbind, yp_get_default_domain," "yp_match, yp_first, yp_next, yp_all,/" "" ypclnt(3R)
.xx "yp_master,/" "/yp_match, yp_first," "yp_next, yp_all, yp_order," "" ypclnt(3R)
.xx "" "/yp_match, yp_first, yp_next, yp_all," "yp_order, yp_master, yperr_string,/" "" ypclnt(3R)
.xx "yellow pages." "" "yppasswd: change login password in" "" yppasswd(1)
.xx "password." "" "yppasswd: update Yellow Pages user" "" yppasswd(3X)
.xx "at a YP server host." "" "yppoll: what version of a YP map is" "" yppoll(1M)
.xx "" "/yp_order, yp_master, yperr_string," "ypprot_err: yellow pages client/" "" ypclnt(3R)
.xx "changed YP map." "" "yppush: force propagation of a" "" yppush(1M)
.xx "and binder processes." "" "ypserv, ypbind: yellow pages server" "" ypserv(1M)
.xx "server." "" "ypset: point ypbind at a particular" "" ypset(1M)
.xx "yp_match, yp_first,/" "yp_bind," "yp_unbind, yp_get_default_domain," "" ypclnt(3R)
.xx "or map master?." "" "ypwhich: which host is the YP server" "" ypwhich(1)
.xx "YP server to here." "" "ypxfr: transfer a YP map from some" "" ypxfr(1M)
.xx "" "zshadeegg, zshadejet: shading and" "z-buffering demo." "/zshadeabstract," zshadecar(1d)
.xx "" "TZ: local time" "zone." "" tz(4)
.xx "zshadejet: shading and/" "zshadecar," "zshadeabstract, zshadeegg," "" zshadecar(1d)
.xx "zshadeegg, zshadejet: shading and/" "" "zshadecar, zshadeabstract," "" zshadecar(1d)
.xx "" "zshadecar, zshadeabstract," "zshadeegg, zshadejet: shading and/" "" zshadecar(1d)
.xx "demo." "/zshadeabstract, zshadeegg," "zshadejet: shading and z-buffering" "" zshadecar(1d)
