(*****************************************************************************)
(*                                                                           *)
(*                             File: CODE.4.TEXT                             *)
(*                                                                           *)
(*           (C) Copyright 1980, 1985 Silicon Valley Software, Inc.          *)
(*                                                                           *)
(*                            All rights reserved.               08-Oct-85   *)
(*                                                                           *)
(*****************************************************************************)


{ [ F E D C B A 9 8 7 6 5 4 3 2 1 0 ] }
{               x x x x               }
{   Where:                            }
{      Numbits = 4, Rightbit = 6.     }

procedure setupfield(var fcattr: cattr; var fsize,rightbit: integer;
                     numbits: integer);
  var leftbit: integer;
begin
leftbit := rightbit + numbits - 1;
if (leftbit < 16) or (rightbit >= 16)
then begin { Within one word }
     if rightbit >= 16
     then begin rightbit := rightbit - 16; leftbit := leftbit - 16; end
     else incoffset(fcattr,2);
     if rightbit >= 8
     then begin { Within most significant byte - save later shift by 8 }
          rightbit := rightbit - 8;
          fsize := BYTE;
          end
     else fsize := WORD;
     end
else begin { Straddles two words }
     fsize := LONG;
     end;
end; {setupfield}

procedure shiftmany(fop,fcount: integer; freg: pregrec);
begin
if fcount > 0
then begin
     while fcount >= 8 do begin
           genr(fop,freg); fcount := fcount - 8;
           end;
     if fcount > 0 then gennr(fop,fcount,freg);
     erase(freg);
     end;
end; {shiftmany}

procedure asspckfld(fop: integer; CFlag: Boolean);
  var lop,mop,nop,numbits,rightbit,i: integer;
      lcattr: cattr; d,d2,a: pregrec;
      mask,lvalue: longint; expsize,dstsize: integer;
begin
{FOP = 62 = UPCKFLD or 63 = SPCKFLD}
numbits := nextbyte; rightbit := nextbyte;
expression(nextbyte); lcattr := gcattr; expression(nextbyte);
if (numbits and $40) = 0
then incoffset(lcattr,-2); { Convert to 4 byte case }
if (numbits and $80) = 0
then expsize := WORD
else expsize := LONG;
numbits := numbits and $1f; mask := 0;
for i := 1 to numbits do mask := mask*2 + 1;
setupfield(lcattr,dstsize,rightbit,numbits);
make2valid(gcattr,lcattr);
if gcattr.ckind = CNST
then begin
     if dstsize = BYTE
     then begin rightbit := rightbit + 8; dstsize := WORD; end;
     if dstsize = WORD
     then begin lop := _ANDI_W; mop := _ORI_W; end
     else begin lop := _ANDI_L; mop := _ORI_L; end;
     lvalue := gcattr.cvalu.ivalu[1] and mask;
     for i := 1 to rightbit do begin
         lvalue := lvalue + lvalue;
         mask := mask + mask;
         end;
     if lvalue = 0
     then { AND } geneffaddr(lop,lcattr,dstsize,TRUE,-mask-1)
     else if lvalue = mask
          then { OR } geneffaddr(mop,lcattr,dstsize,TRUE,lvalue)
          else begin
               a := loadaddress(lcattr);
               { ANDI.? #~dm,(A) } genr(lop+16,a); genimm(-mask-1,dstsize);
               { ORI.? #lval,(A) } genr(mop+16,a); genimm(lvalue,dstsize);
               freereg(a);
               end;
     end
else begin
     d := loadd(gcattr,expsize);
     if CFlag then begin dupref(gcattr,expsize); d2 := d; end;
     if (numbits = 8) and ((rightbit = 0) or (rightbit = 8))
     then begin
          if (rightbit = 0) and (dstsize = WORD) then incoffset(lcattr,1);
          store(gcattr,lcattr,BYTE);
          end
     else begin
          isolate(d); erase(d);
          if dstsize = BYTE
          then begin lop := _ANDI_B; mop := _OR_B; nop := _LSL_B; end
          else if dstsize = WORD
               then begin lop := _ANDI_W; mop := _OR_W; nop := _LSL_W; end
               else begin lop := _ANDI_L; mop := _OR_L; nop := _LSL_L; end;
          { ANDI.? #xxx,D } genr(lop,d); genimm(mask,expsize);
          lock(d); a := loadaddress(lcattr); unlock(d);
          shiftmany(nop,rightbit,d);
          for i := 1 to rightbit do mask := mask*2;
          { ANDI.? #~dm,(A) } genr(lop+16,a); genimm(-mask-1,dstsize);
          { OR.? D,(A) } genrr(mop+272,d,a);
          freereg(d); freereg(a);
          end;
     if CFlag then begin gcattr.ckind := EXPR; gcattr.exreg := d2; end;
     end;
end; {asspckfld}

procedure extufield;
  var rightbit,leftbit,numbits,lsize,i,lop: integer; d: pregrec;
      mask: longint; Ans4Byte,MustMask: Boolean;
begin
numbits := nextbyte; rightbit := nextbyte; expression(nextbyte);
if (numbits and $40) = 0
then incoffset(gcattr,-2); { Convert to 4 byte case }
Ans4Byte := (numbits and $80) <> 0; numbits := numbits and $1f;
if numbits = 1
then begin
     incoffset(gcattr,3 - rightbit div 8);
     geneffaddr(2048{BTST},gcattr,WORD,TRUE,rightbit mod 8);
     gcattr.ckind := COND; gcattr.cc := NE;
     end
else begin
     setupfield(gcattr,lsize,rightbit,numbits);
     d := loadd(gcattr,lsize); isolate(d); erase(d);
     leftbit := rightbit + numbits - 1; MustMask := TRUE;
     if lsize = LONG
     then begin
          if leftbit = 31 then MustMask := FALSE;
          lop := _LSR_L;
          end
     else begin
          if (not Ans4Byte) and (leftbit = 15) and (lsize = WORD)
          then MustMask := FALSE;
          lop := _LSR_W;
          end;
     shiftmany(lop,rightbit,d);
     if MustMask
     then begin
          mask := 0;
          for i := 1 to numbits do mask := mask*2 + 1;
          if Ans4Byte
          then begin genr(_ANDI_L,d); gen2(mask); end
          else begin genr(_ANDI_W,d); gen(mask); end;
          end;
     ccodereg := d^.regno;
     end;
end; {extufield}

procedure extsfield;
  var rightbit,numbits,leftbit,count,lsize: integer;
      d: pregrec; Ans4Byte: Boolean;
begin
numbits := nextbyte; rightbit := nextbyte; expression(nextbyte);
if (numbits and $40) = 0
then incoffset(gcattr,-2); { Convert to 4 byte case }
Ans4Byte := (numbits and $80) <> 0; numbits := numbits and $1f;
setupfield(gcattr,lsize,rightbit,numbits);
d := loadd(gcattr,lsize); isolate(d); erase(d);
leftbit := rightbit + numbits - 1;
if numbits >= 16
then begin
     count := 31 - leftbit;
     shiftmany(_LSL_L,count,d);
     shiftmany(_ASR_L,rightbit+count,d);
     end
else begin
     if leftbit <= 15
     then if leftbit <= 7
          then begin
               count := 7 - leftbit;
               shiftmany(_LSL_B,count,d);
               shiftmany(_ASR_B,rightbit+count,d);
               genr(_EXT_W,d);
               end
          else begin
               count := 15 - leftbit;
               shiftmany(_LSL_W,count,d);
               shiftmany(_ASR_W,rightbit+count,d);
               end
     else begin
          count := leftbit - 15;
          shiftmany(_LSR_W,count,d);
          shiftmany(_ASR_W,rightbit-count,d);
          end;
     if Ans4Byte then genr(_EXT_L,d);
     end;
ccodereg := d^.regno;
end; {extsfield}

procedure expression{fop: integer};

  procedure genindex(elementsize: integer);
    var lo,loffset,shiftcount,lvlev,lop,dregno: integer; lcattr: cattr;
        AddFlag: Boolean; d,a: pregrec; lv: regvalrec; elsize: longint;
  begin
  lo := nextword; expression(nextbyte);
  lcattr := gcattr; expression(nextbyte);
  if gcattr.ckind = CNST
  then incoffset(lcattr,elementsize*(gcattr.cvalu.ivalu[1] - lo))
  else begin
       makevalid(lcattr); lockcattr(lcattr);
       lv.rvinxcst := elementsize; lv.RVReadOnly := FALSE;
       lv.rvsize := WORD;
       if gcattr.ckind = VARB
       then begin
            lv.rvkind := INDXRV; lv.rvlev := gcattr.vlev;
            lv.rvoffset := gcattr.voffset;
            end
       else if gcattr.ckind = FDAT
            then begin
                 lv.rvkind := INDXRV; lv.rvlev := -gcattr.flev;
                 lv.rvoffset := gcattr.doffset;
                 end
            else if gcattr.ckind = EXPR
                 then begin
                      dregno := gcattr.exreg^.regno;
                      if reg[dregno].Perm
                      then begin
                           lv.rvkind := INDXRV; lv.rvlev := 0;
                           lv.rvoffset := dregno*4;
                           end
                      else lv.rvkind := UNKNRV;
                      end
                 else lv.rvkind := UNKNRV;
       elsize := elementsize;
       if not FindIndex(gcattr,elsize,WORD,d)
       then d := loadd(gcattr,WORD);
       if elsize > 1
       then begin
            isolate(d);
            if ShiftMult(elsize,shiftcount)
            then begin
                 if shiftcount > 8
                 then { ASL.W #8,D } genr(-7872,d);
                 { ASL.W #xx,D } gennr(-7872,shiftcount,d);
                 end
            else begin { MULS } genr0(-15876,d); gen(elsize); end;
            reg[d^.regno].v := lv;
            end;
       AddFlag := FALSE; unlockcattr(lcattr); lock(d);
       with lcattr do
            case ckind of
                 ADDR: begin
                       a := adreg; loffset := aoffset;
                       ckind := INDX; inoffset := loffset;
                       inxareg := a; inxrreg := d; LongIndex := FALSE;
                       end;
                 INDX: begin
                       AddFlag := TRUE;
                       end;
                 VARB: begin
                       loffset := voffset; lvlev := vlev; ckind := INDX;
                       inoffset := loffset; inxrreg := d;
                       inxareg := getbase(lvlev);
                       LongIndex := FALSE;
                       end;
                 FDAT: begin
                       a := loadaddress(lcattr); ckind := INDX; inoffset := 0;
                       inxareg := a; inxrreg := d; LongIndex := FALSE;
                       end;
            end; {case}
       incoffset(lcattr,-lo*elementsize); unlock(d);
       if AddFlag
       then begin
            lock(d); isolate(lcattr.inxrreg); unlock(d); lop := -12224;
            if lcattr.LongIndex
            then begin lop := lop + 64; { EXT.L D } genr(18624,d); end;
            { ADD.? D,INXRREG } genrr(lop,lcattr.inxrreg,d);
            freereg(d); erase(lcattr.inxrreg);
            end;
       end;
  gcattr := lcattr;
  end; {genindex}
  
  procedure pckdindex;
    var bitsperel,lo,datamask,addrmask,lbitsperel,i,ashiftcount,lop: integer;
        d,d2,d3: pregrec; lcattr: cattr; Signed: Boolean;
  begin
  bitsperel := nextbyte; lo := nextword; Signed := bitsperel > 127;
  if Signed then bitsperel := bitsperel - 128;
  expression(nextbyte); lcattr := gcattr; expression(nextbyte);
  { What about constant index? }
  makevalid(lcattr);
  if (gcattr.ckind = CNST) and (bitsperel = 8)
  then begin
       incoffset(lcattr,gcattr.cvalu.lvalu-lo);
       d := loadd(lcattr,BYTE);
       gcattr.ckind := EXPR; gcattr.exreg := d;
       end
  else begin
       lockcattr(lcattr);
       d3 := loadd(gcattr,WORD);
       if bitsperel <> 8 then isolate(d3);
       lock(d3); unlockcattr(lcattr);
       if bitsperel = 8
       then incoffset(lcattr,-lo)
       else begin
            addidreg(d3,-lo,WORD);
            datamask := 0; addrmask := 0; lbitsperel := bitsperel;
            ashiftcount := 0;
            for i := 1 to bitsperel do datamask := datamask*2 + 1;
            while lbitsperel < 8 do begin
                  ashiftcount := ashiftcount + 1;
                  lbitsperel := lbitsperel*2; addrmask := addrmask*2 + 1;
                  end;
            lockcattr(lcattr); d2 := getreg(D0,D7);
            lock(d2); unlockcattr(lcattr);
            { MOVE.B D3,D2 } genrr(4096,d2,d3); erase(d3);
            { ANDI.W #am,D2 } genr(576,d2); gen(addrmask);
            { ASR.W #sc,D3 } gennr(-8128,ashiftcount,d3);
            if ashiftcount < 3
            then { LSL.B #3-sc,D2 } gennr(-7928,3-ashiftcount,d2);
            end;
       gcattr.ckind := INDX; gcattr.LongIndex := FALSE;
       case lcattr.ckind of
            ADDR: begin
                  gcattr.inoffset := lcattr.aoffset;
                  gcattr.inxareg := lcattr.adreg;
                  end;
            INDX: begin
                  lockcattr(lcattr); unlock(d3); isolate(d3);
                  lock(d3); unlockcattr(lcattr);
                  gcattr := lcattr; freereg(lcattr.inxrreg);
                  lop := -12224; { ADD.W }
                  if lcattr.LongIndex
                  then begin lop := lop + 64; { EXT.L } genr(18624,d3); end;
                  { ADD.? } genrr(lop,d3,lcattr.inxrreg);
                  erase(d3);
                  end;
            VARB: if lcattr.vlev > 0
                  then begin
                       gcattr.inoffset := lcattr.voffset;
                       gcattr.inxareg := getbase(lcattr.vlev);
                       end
                  else begin
                       gcattr.inoffset := 0;
                       gcattr.inxareg := loadaddress(lcattr);
                       end;
            FDAT: begin
                  gcattr.inoffset := 0;
                  gcattr.inxareg := loadaddress(lcattr);
                  end;
       end; {case}
       gcattr.inxrreg := d3; unlock(d3); d := loadd(gcattr,BYTE);
       end;
  isolate(d); gcattr.exreg := d;
  if bitsperel < 8
  then begin
       { LSR.B D2,D } genrr(-8152,d2,d);
       unlock(d2); freereg(d2);
       if Signed
       then begin
            { ROR.B #bpe,D } gennr(-8168,bitsperel,d);
            { ASR.B #8-bpe,D } gennr(-8192,8-bitsperel,d);
            { EXT.W D } genr(18560,d);
            end
       else begin
            { ANDI.W #datamask,d } genr(576,d); gen(datamask);
            end;
       end
  else begin
       { 8 bits is always unsigned. }
       { ANDI.W #FF,D } genr(576,d); gen(255);
       end;
  ccodereg := d^.regno; erase(d);
  end; {pckdindex}
  
  procedure genfindex;
    var d,d2,a: pregrec; szcattr,locattr,adcattr,incattr: cattr;
        SzConst,LoConst,InConst,SubFlag,BigIndex,BigElSize,ShiftFlag: Boolean;
        loffset,elsize,l: longint; i,lvlev,shiftcount,shift2count: integer;
        lv: regvalrec; DoIt,ConstMult: Boolean;
  begin
  i := nextbyte; BigIndex := odd(i); BigElSize := i >= 2;
  expression(nextbyte); szcattr := gcattr; SzConst := szcattr.ckind = CNST;
  expression(nextbyte); locattr := gcattr; LoConst := locattr.ckind = CNST;
  expression(nextbyte); adcattr := gcattr;
  expression(nextbyte); incattr := gcattr; InConst := incattr.ckind = CNST;
  if SzConst
  then begin
       elsize := szcattr.cvalu.lvalu; lv.rvkind := UNKNRV;
       if LoConst
       then begin
            incoffset(adcattr,-(locattr.cvalu.lvalu*elsize));
            if InConst
            then incoffset(adcattr,incattr.cvalu.lvalu*elsize)
            else begin
                 lv.rvinxcst := elsize; lv.RVReadOnly := FALSE;
                 if BigElSize then lv.rvsize := LONG else lv.rvsize := WORD;
                 if incattr.ckind = VARB
                 then begin
                      lv.rvkind := INDXRV; lv.rvlev := incattr.vlev;
                      lv.rvoffset := incattr.voffset;
                      end
                 else if incattr.ckind = FDAT
                      then begin
                           lv.rvkind := INDXRV; lv.rvlev := -incattr.flev;
                           lv.rvoffset := incattr.doffset;
                           end
                      else if gcattr.ckind = EXPR
                           then begin
                                i := gcattr.exreg^.regno;
                                if reg[i].Perm
                                then begin
                                     lv.rvkind := INDXRV; lv.rvlev := 0;
                                     lv.rvoffset := i*4;
                                     end;
                                end;
                 if not FindIndex(incattr,elsize,lv.rvsize,d)
                 then d := loadd(incattr,LONG);
                 if (elsize <> 1) or (adcattr.ckind = INDX) then isolate(d);
                 lock(d);
                 end;
            end
       else begin
            d := loadd(incattr,LONG); isolate(d); lock(d);
            geneffaddr(-28544 + d^.regno*512 {SUB.L},locattr,LONG,FALSE,0);
            end;
       if not (LoConst and InConst)
       then with adcattr do begin
            if elsize > 1
            then
              if ShiftMult(elsize,shiftcount)
              then begin
                if shiftcount > 8
                then { ASL.L #8,D } genr(-7808,d);
                { ASL.L #xx,D } gennr(-7808,shiftcount,d);
                end
              else
                if not (BigIndex or BigElSize)
                then begin
                  { MULS #xx,D } genr0(-15876,d); gen(elsize);
                  end
                else
                  if ShShMult(elsize,shiftcount,SubFlag,shift2count)
                  then begin
                    d2 := getreg(D0,D7);
                    { MOVE.L D,D2 } genrr(8192,d2,d);
                    { ASL.L #xx,D } gennr(-7808,shiftcount,d);
                    if SubFlag
                    then { SUB.L D2,D } genrr(-28544,d,d2)
                    else { ADD.L D2,D } genrr(-12160,d,d2);
                    if shift2count > 0
                    then { ASL.L #x,D } gennr(-7808,shift2count,d);
                    freereg(d2);
                    end
                  else
                    if FPHardware and MAX_FLAG
                    then begin
                      pushint(elsize,LONG);
                      { MOVE.L D,-(SP) } genr(12032,d);
                      maxcmd(M_IMUL4,4);
                      { MOVE.L (SP)+,D } genr0(8223,d);
                      end
                    else
                      if BigIndex
                      then begin
                           d2 := getreg(D0,D7);
                           { MOVE.L D,D2 } genrr(8192,d2,d);
                           { MULU #elsiz,D } genr0(-16132,d);
                                             gen(elsize);
                           { SWAP D2 } genr(18496,d2);
                           { MULS } genr0(-15876,d2); gen(elsize);
                           { SWAP D2 } genr(18496,d2);
                           { CLR.W D2 } genr(16960,d2);
                           { ADD.L D2,D } genrr(-12160,d,d2);
                           freereg(d2);
                           end
                      else begin { BigElSize }
                           shiftcount := 0; l := elsize;
                           while (shiftcount < 8) and not odd(l) do
                                 begin
                                 shiftcount := shiftcount + 1;
                                 l := l div 2;
                                 end;
                           if (shiftcount > 0) and (l <= 32767)
                           then begin
                                { MULS #elsiz,D } genr0(-15876,d); gen(l);
                                { LSL.L #sc,D } gennr(-7800,shiftcount,d);
                                end
                           else begin
                                d2 := getreg(D0,D7);
                                { MOVE.L D,D2 } genrr(8192,d2,d);
                                { MULS #elsiz,D } genr0(-15876,d);
                                                  gen(elsize and $7fff);
                                i := elsize div 32768;
                                if i = 1
                                then begin
                                     { LSL.L #8,D2 } genr(-7800,d2);
                                     { LSL.L #7,D2 } genr(-4216,d2);
                                     end
                                else if i = 2
                                     then begin
                                          { SWAP D2 } genr(18496,d2);
                                          { CLR.W D2 } genr(16960,d2);
                                          end
                                     else begin
                                          if odd(i)
                                          then ShiftFlag := TRUE
                                          else begin
                                               i := i div 2;
                                               ShiftFlag := FALSE;
                                               end;
                                          if ShiftMult(i,shiftcount)
                                          then { ASL.L #xx,D2 }
                                               gennr(-7808,shiftcount,d2)
                                          else begin
                                               { MULS } genr0(-15876,d2);
                                                        gen(i);
                                               end;
                                          { SWAP D2 } genr(18496,d2);
                                          { CLR.W D2 } genr(16960,d2);
                                          if ShiftFlag
                                          then { ASR.L #1,D2 }
                                               genr(-7552,d2);
                                          end;
                                { ADD.L D2,D } genrr(-12160,d,d2);
                                freereg(d2);
                                end;
                           end;
            case ckind of
                 ADDR: begin
                       a := adreg; loffset := aoffset;
                       ckind := INDX; inoffset := loffset;
                       inxareg := a; inxrreg := d;
                       end;
                 INDX: begin
                       { ADD.L INXRREG,D } genrr(-12160,d,inxrreg);
                       freereg(inxrreg); inxrreg := d; lv.rvkind := UNKNRV;
                       end;
                 VARB: begin
                       loffset := voffset; lvlev := vlev;
                       ckind := INDX; inoffset := loffset; inxrreg := d;
                       inxareg := getbase(lvlev)
                       end;
                 FDAT: begin
                       a := loadaddress(adcattr);
                       ckind := INDX; inxrreg := d;
                       inxareg := a; inoffset := 0;
                       end;
            end; {case}
            unlock(d); reg[d^.regno].v := lv;
            LongIndex := TRUE;
            end; {with adcattr}
       gcattr := adcattr;
       end
  else begin { not SzConst }
       DoIt := TRUE; ConstMult := FALSE;
       if LoConst and InConst
       then begin
            incattr.cvalu.lvalu := incattr.cvalu.lvalu -
                                   locattr.cvalu.lvalu;
            locattr.cvalu.lvalu := 0;
            if incattr.cvalu.lvalu = 0
            then begin gcattr := adcattr; DoIt := FALSE; end
            else ConstMult := TRUE;
            end;
       if DoIt
       then begin
            a := loadaddress(adcattr); lock(a);
            if ConstMult and (incattr.cvalu.lvalu > 0) and
               ShiftMult(incattr.cvalu.lvalu,shiftcount)
            then begin
                 d := loadd(szcattr,LONG);
                 if shiftcount > 0
                 then begin
                      isolate(d); erase(d);
                      if shiftcount > 8
                      then { ASL.L #8,D } genr(-7808,d);
                      { ASL.L #xx,D } gennr(-7808,shiftcount,d);
                      end;
                 end
            else begin
                 d := loadd(incattr,LONG);
                 if (not LoConst) or (locattr.cvalu.lvalu <> 0)
                 then begin isolate(d); erase(d); end;
                 lock(d);
                 if LoConst
                 then addidreg(d,-locattr.cvalu.lvalu,LONG)
                 else geneffaddr(-28544 + d^.regno*512 {SUB.L},
                                 locattr,LONG,FALSE,0);
                 { MOVE.L D,-(SP) } genr(12032,d); unlock(d); freereg(d);
                 pushvalue(szcattr,LONG);
                 if FPHardware and MAX_FLAG
                 then maxcmd(M_IMUL4,4)
                 else genjsra('%I_MUL4 ');
                 d := getreg(D0,D7);
                 { MOVE.L (SP)+,D } genr0(8223,d);
                 end;
            unlock(a);
            with gcattr do begin
                 ckind := INDX; inoffset := 0; inxareg := a;
                 inxrreg := d; LongIndex := TRUE;
                 end;
            end;
       end;
  end; {genfindex}
  
  procedure numexpr(fop,fsize: integer);
    var d: pregrec;
  begin
  expression(fop);
  if gcattr.ckind in [BOOL,COND,BITZ]
  then d := loadd(gcattr,fsize);
  end; {numexpr}
  
  procedure expr1(fop: integer);
    var i,lsize,count,junk,off1,off2,lregno: integer; d,a: pregrec;
        DoIt,AddrFlag: Boolean; lstring: pstrcrec; lo,hi: longint;
  begin
  with gcattr do begin
       case fop of
         1: { GLOBAL }
            begin
            ckind := VARB; vlev := 1; voffset := nextword;
            end;
         2: { LOCAL }
            begin
            ckind := VARB; vlev := level; voffset := nextword;
            end;
         3: { INTER }
            begin
            ckind := VARB; vlev := level - nextbyte; voffset := nextword;
            end;
         4: { COMMON } { PASCAL COMMON NO LONGER ACCEPTED }
            begin
            error(7272);
            ckind := VARB; vlev := -nextbyte; voffset := nextword;
            end;
         5: { FCOMMON }
            begin
            i := nextbyte;
            if i >= 128 then i := (i - 128)*256 + nextbyte;
            ckind := FDAT; flev := i; doffset := next3bytes;
            end;
         7: { REFREG }
            begin
            junk := nextbyte; AddrFlag := (junk and 32) <> 0;
            lregno := junk and 7;
            if AddrFlag
            then lregno := AMAX - lregno
            else lregno := D7 - lregno;
            ckind := EXPR; exreg := reg[lregno].r;
            end;
        12: { UPARROW }
            begin
            i := nextbyte;
            if i = 22 {ADDR}
            then expression(nextbyte)
            else begin expression(i); uparrow(gcattr); end;
            end;
        13, { FILE^ }
        14: { TEXT^ }
            begin
            exppushaddr(nextbyte);
            a := getreg(A0,A0); genjsra('%_UPARR ');
            ckind := ADDR; adreg := a; aoffset := 0;
            end;
         8, { BIGFLD }
        15: { FIELD }
            begin
            if fop = 8 then lo := next3bytes else lo := nextword;
            expression(nextbyte); incoffset(gcattr,lo);
            end;
        16: { INDX1 } genindex(1);
        17: { INDX2 } genindex(2);
        18: { INDX4 } genindex(4);
        19: { INDX8 } genindex(8);
        20: { INDXBIG } genindex(nextword);
        21: { INDXPCK } pckdindex;
        22: { ADDRESS }
            begin
            i := nextbyte;
            if i = 12 {UPARROW}
            then expression(nextbyte)
            else begin
                 expression(i); a := loadaddress(gcattr);
                 ckind := EXPR; exreg := a;
                 end;
            end;
        23: { NIL }
            with gcattr do begin
                 ckind := CNST; cvalu.cstkind := SCALCNST;
                 cvalu.lvalu := 0;
                 end;
        24, { CONST1 }
        25, { CONST2 }
        26, { CONST4 }
        27: { CONST8 }
            with gcattr do
                 begin
                 ckind := CNST; cvalu.cstkind := SCALCNST;
                 case fop - 23 of
                   BYTE: begin
                      i := nextbyte;
                      if i > 127 then i := i - 256;
                      cvalu.lvalu := i;
                      end;
                   WORD:
                      cvalu.lvalu := nextword;
                   LONG: begin
                      cvalu.ivalu[0] := nextword;
                      cvalu.ivalu[1] := nextword;
                      end;
                   QUAD: begin
                      cvalu.ivalu[0] := nextword;
                      cvalu.ivalu[1] := nextword;
                      cvalu.ivalu[2] := nextword;
                      cvalu.ivalu[3] := nextword;
                      end;
                 end; {case}
                 end;
        28, { STRCNST }
        29: { PAOCNST }
            begin
            lsize := nextbyte;
            if (fop = 29) and (lsize >= 128)
            then lsize := (lsize - 128)*256 + nextbyte;
            if lsize > 0
            then begin
                 new(lstring);
                 with lstring^ do begin
                      strval := '        '; next := nil;
                      end;
                 end
            else lstring := nil;
            with gcattr do begin
                 ckind := CNST;
                 if fop = 28
                 then cvalu.cstkind := STRCNST
                 else cvalu.cstkind := PAOCCNST;
                 cvalu.len := lsize; cvalu.strvalu := lstring;
                 end;
            count := 0;
            for i := 1 to lsize do begin
                count := count + 1;
                if count > 8
                then begin
                     new(lstring^.next); lstring := lstring^.next;
                     with lstring^ do begin
                          strval := '        '; next := nil;
                          end;
                     count := 1;
                     end;
                lstring^.strval[count] := chr(nextbyte);
                end;
            end;
        43: { WITHREC }
            begin
            i := nextbyte; gcattr.ckind := VARB;
            with bases[level + i] do
                 if bwhere = BADR
                 then begin
                      gcattr.vlev := balev; gcattr.voffset := baoffset;
                      end
                 else begin
                      gcattr.vlev := level + i; gcattr.voffset := 0;
                      end;
            end;
        46: { RANGE }
            case nextbyte of
              0: { String }
                 begin
                 hi := nextbyte; expression(nextbyte);
                 a := loadaddress(gcattr); genr(7952,a); { MOVE.B (A),-(SP) }
                 pushint(hi,WORD); genjsra('%_SRCHK ');
                 gcattr.ckind := ADDR; gcattr.adreg := a; gcattr.aoffset := 0;
                 end;
              1: { 2 byte }
                 begin
                 lo := nextword; hi := nextword; expression(nextbyte);
                 d := loadd(gcattr,WORD); genr(16128,d); { MOVE.W D,-(SP) }
                 pushint(lo,WORD); pushint(hi,WORD); genjsra('%_RCHCK ');
                 end;
              2: { 4 byte }
                 begin
                 lo := nextlong; hi := nextlong; expression(nextbyte);
                 d := loadd(gcattr,LONG); genr(12032,d); { MOVE.L D,-(SP) }
                 pushint(lo,LONG); pushint(hi,LONG); genjsra('%_LRCHK ');
                 end;
              3: { Real check }
                 push4call('%_FLTCHK',TRUE,4);
              4: { Double check }
                 push8call('%_DBLCHK',TRUE,8);
             17: { IsNum4 }
                 begin
                 expression(nextbyte); d := loadd(gcattr,LONG); isolate(d);
                 { BCLR #31,d } genr(2176,d); gen(31);
                 { CMPI.L #$7f800000,d } genr(3200,d); gen2($7f800000);
                 freereg(d); erase(d);
                 gcattr.ckind := COND; gcattr.cc := LT;
                 end;
            end; {case}
        48, { INT12 }
        49, { INT24 }
        50: { INT14 }
            begin
            if odd(fop) then lsize := WORD else lsize := BYTE;
            expression(nextbyte); d := loadd(gcattr,lsize);
            isolate(d); gcattr.exreg := d;
            if not odd(fop) then { EXT.W D } genr(18560,d);
            if fop >= 49 then { EXT.L D } genr(18624,d);
            ccodereg := d^.regno;
            end;
        51, { INT21 }
        52, { INT42 }
        53: { INT41 }
            begin
            if fop = 51 then lsize := WORD else lsize := LONG;
            expression(nextbyte); DoIt := TRUE;
            with gcattr do
                 case ckind of
                      ADDR: DoIt := FALSE;
                      VARB: DoIt := FALSE;
                      INDX: DoIt := FALSE;
                 end; {case}
            if DoIt
            then d := loadd(gcattr,lsize)
            else incoffset(gcattr,fop - 50);
            end;
        54: { REAL48 } if FPHardware and (SKY_FLAG or MAX_FLAG)
                       then if SKY_FLAG
                            then skyarg(66,LONG,QUAD)
                            else max1expr(54)
                       else push4call('%F_2_D  ',TRUE,4);
        55: { REAL84 } if FPHardware and (SKY_FLAG or MAX_FLAG)
                       then if SKY_FLAG
                            then skyarg(67,QUAD,LONG)
                            else max1expr(55)
                       else push8call('%D_2_F  ',TRUE,4);
        56: { FLOAT4 } if FPHardware
                       then if SKY_FLAG
                            then skyarg(36,LONG,LONG)
                            else if MAX_FLAG
                                 then max1expr(56)
                                 else hit1expr(56)
                       else push4call('%I_2_F  ',TRUE,4);
        57: { FLOAT8 } if FPHardware and (SKY_FLAG or MAX_FLAG)
                       then if SKY_FLAG
                            then skyarg(68,LONG,QUAD)
                            else max1expr(57)
                       else push4call('%I_2_D  ',TRUE,8);
        58: { TRUNC4 } if FPHardware
                       then if SKY_FLAG
                            then skyarg(39,LONG,LONG)
                            else if MAX_FLAG
                                 then max1expr(58)
                                 else hit1expr(58)
                       else push4call('%F_2_I  ',TRUE,4);
        59: { TRUNC8 } if FPHardware and (SKY_FLAG or MAX_FLAG)
                       then if SKY_FLAG
                            then skyarg(69,QUAD,LONG)
                            else max1expr(59)
                       else push8call('%D_2_I  ',TRUE,4);
        60: { ROUND4 } if FPHardware and MAX_FLAG
                       then max1expr(60)
                       else push4call('%I_NINT ',FALSE,4);
        61: { ROUND8 } if FPHardware and MAX_FLAG
                       then max1expr(61)
                       else push8call('%I_IDNIN',FALSE,4);
        62: { EXTUFLD } extufield;
        63: { EXTSFLD } extsfield;
       end; {case}
       end;
  end; {expr1}
  

                                                                                                                                                                                                                                                                                                                                                                                                   