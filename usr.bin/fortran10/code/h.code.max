(*****************************************************************************)
(*                                                                           *)
(*                            File: CODE.MAX.TEXT                            *)
(*                                                                           *)
(*           (C) Copyright 1980, 1984 Silicon Valley Software, Inc.          *)
(*                                                                           *)
(*                            All rights reserved.               17-Dec-84   *)
(*                                                                           *)
(*****************************************************************************)


procedure maxcmd(fop,delta: integer);
begin
if MAX_FLAG
then begin
     if delta < 0
     then begin
          if LastPop
          then begin
               if abs(popbytes) <= 8 then ungen(2) else ungen(4);
               delta := delta + popbytes;
               end;
          addtosp(delta);
          end;
     if MAX_LONG
     then begin
          { MOVE.L SP,XX.L } gen($23CF); gen2(MAXADDRESS + fop*256);
          end
     else begin
          { MOVE.L SP,XX.W } gen($21CF); gen(MAXADDRESS + fop*256);
          end;
     if delta > 0 then addtosp(delta);
     gcattr.ckind := STCK;
     end;
end; {maxcmd}

procedure max1cattr(fop: integer; fcattr: cattr);
begin
if MAX_FLAG
then begin
     case fop of
        54: { REAL48 } begin pushvalue(fcattr,LONG); maxcmd(M_F2D,-4); end;
        55: { REAL84 } begin pushvalue(fcattr,QUAD); maxcmd(M_D2F,4); end;
        56: { FLOAT4 } begin pushvalue(fcattr,LONG); maxcmd(M_I2F,0); end;
        57: { FLOAT8 } begin pushvalue(fcattr,LONG); maxcmd(M_I2D,-4); end;
        58: { TRUNC4 } begin pushvalue(fcattr,LONG); maxcmd(M_FTRUNC,0); end;
        59: { TRUNC8 } begin pushvalue(fcattr,QUAD); maxcmd(M_DTRUNC,4); end;
        60: { ROUND4 } begin pushvalue(fcattr,LONG); maxcmd(M_FNINT,0); end;
        61: { ROUND8 } begin pushvalue(fcattr,QUAD); maxcmd(M_DNINT,4); end;
     otherwise: error(20000+fop);
     end; {case}
     end;
end; {max1cattr}

procedure max1expr(fop: integer);
begin
if MAX_FLAG
then begin
     expression(nextbyte);  max1cattr(fop,gcattr);
     end;
end; {max1expr}

procedure pushavav(acattr,bcattr: cattr; opvv,opav,opva,opaa: integer);
  var AAddress,BAddress: Boolean;
begin
if MAX_FLAG
then begin
     if acattr.ckind = STCK
     then begin
          pushvalue(acattr,QUAD); AAddress := FALSE;
          end
     else begin
          if acattr.ckind = CNST
          then pushcaddress(acattr,QUAD)
          else pushaddress(acattr);
          AAddress := TRUE;
          end;
     if bcattr.ckind = STCK
     then begin
          pushvalue(bcattr,QUAD); BAddress := FALSE;
          end
     else begin
          if bcattr.ckind = CNST
          then pushcaddress(bcattr,QUAD)
          else pushaddress(bcattr);
          BAddress := TRUE;
          end;
     if AAddress
     then if BAddress
          then maxcmd(opaa,0)
          else maxcmd(opav,4)
     else if BAddress
          then maxcmd(opva,4)
          else maxcmd(opvv,8);
     end;
end; {pushavav}

procedure max2cattr(fop: integer; acattr,bcattr: cattr);
  var Reversed: Boolean;
begin
if MAX_FLAG
then begin
     Reversed := (bcattr.ckind = STCK) and (acattr.ckind <> STCK);
     case fop of
        69: { IMUL4 } begin
                      pushvalue(acattr,LONG); pushvalue(bcattr,LONG);
                      maxcmd(M_IMUL4,4);
                      end;
        71: { IDIV4 } begin
                      pushvalue(acattr,LONG); pushvalue(bcattr,LONG);
                      maxcmd(M_IDIV4,4);
                      end;
        73: { IMOD4 } begin
                      pushvalue(acattr,LONG); pushvalue(bcattr,LONG);
                      maxcmd(M_IMOD4,4);
                      end;
       112: { FADD4 } begin
                      if (bcattr.ckind = CNST) and
                         (bcattr.cvalu.lvalu = $3F800000)
                      then begin { X + 1.0 }
                           pushvalue(acattr,LONG); maxcmd(M_FADD1,0);
                           end
                      else if (acattr.ckind = CNST) and
                         (acattr.cvalu.lvalu = $3F800000)
                      then begin { 1.0 + X }
                           pushvalue(bcattr,LONG); maxcmd(M_FADD1,0);
                           end
                      else begin
                           pushvalue(acattr,LONG); pushvalue(bcattr,LONG);
                           maxcmd(M_FADD,4);
                           end;
                      end;
       113: { FADD8 } begin
                      if (bcattr.ckind = CNST) and
                         (bcattr.cvalu.lvalu = $3FF00000) and
                         (bcattr.cvalu.lvalu2 = 0)
                      then begin { X + 1.0 }
                           pushvalue(acattr,QUAD); maxcmd(M_DADD1,0);
                           end
                      else if (acattr.ckind = CNST) and
                         (acattr.cvalu.lvalu = $3FF00000) and
                         (acattr.cvalu.lvalu2 = 0)
                      then begin { 1.0 + X }
                           pushvalue(bcattr,QUAD); maxcmd(M_DADD1,0);
                           end
                      else if Reversed
                           then pushavav(acattr,bcattr,
                                    M_DADD,M_DADDVA,M_DADDAV,M_DADDAA)
                           else pushavav(acattr,bcattr,
                                    M_DADD,M_DADDAV,M_DADDVA,M_DADDAA);
                      end;
       114: { FSUB4 } begin
                      if (bcattr.ckind = CNST) and
                         (bcattr.cvalu.lvalu = $3F800000)
                      then begin { X - 1.0 }
                           pushvalue(acattr,LONG); maxcmd(M_FSUB1,0);
                           end
                      else if (acattr.ckind = CNST) and
                         (acattr.cvalu.lvalu = $3F800000)
                      then begin { 1.0 - X }
                           pushvalue(bcattr,LONG); maxcmd(M_F1SUB,0);
                           end
                      else begin
                           pushvalue(acattr,LONG); pushvalue(bcattr,LONG);
                           {-- if Reversed
                           then maxcmd(M_FRSUB,4)
                           else --} maxcmd(M_FSUB,4);
                           end;
                      end;
       115: { FSUB8 } begin
                      if (bcattr.ckind = CNST) and
                         (bcattr.cvalu.lvalu = $3FF00000) and
                         (bcattr.cvalu.lvalu2 = 0)
                      then begin { X - 1.0 }
                           pushvalue(acattr,QUAD); maxcmd(M_DSUB1,0);
                           end
                      else if (acattr.ckind = CNST) and
                         (acattr.cvalu.lvalu = $3FF00000) and
                         (acattr.cvalu.lvalu2 = 0)
                      then begin { 1.0 - X }
                           pushvalue(bcattr,QUAD); maxcmd(M_D1SUB,0);
                           end
                      else if Reversed
                           then {-- pushavav(acattr,bcattr,
                                     M_DRSUB,M_DRSUBVA,M_DSUBAV,M_DSUBAA) --}
                                {--} begin
                                     pushavav(acattr,bcattr,
                                         M_DSUB,M_DSUBVA,M_DSUBAV,M_DSUBAA);
                                     { BCHG #7,(SP) } gen($0857); gen(7);
                                {--} end
                           else pushavav(acattr,bcattr,
                                         M_DSUB,M_DSUBAV,M_DSUBVA,M_DSUBAA);
                      end;
       116: { FMUL4 } begin
                      if (bcattr.ckind = CNST) and
                         (bcattr.cvalu.lvalu = $40000000)
                      then begin { X * 2.0 }
                           pushvalue(acattr,LONG); maxcmd(M_FMUL2,0);
                           end
                      else if (acattr.ckind = CNST) and
                         (acattr.cvalu.lvalu = $40000000)
                      then begin { 2.0 * X }
                           pushvalue(bcattr,LONG); maxcmd(M_FMUL2,0);
                           end
                      else begin
                           pushvalue(acattr,LONG); pushvalue(bcattr,LONG);
                           maxcmd(M_FMUL,4);
                           end;
                      end;
       117: { FMUL8 } begin
                      if (bcattr.ckind = CNST) and
                         (bcattr.cvalu.lvalu = $40000000) and
                         (bcattr.cvalu.lvalu2 = 0)
                      then begin { X * 2.0 }
                           pushvalue(acattr,QUAD); maxcmd(M_DMUL2,0);
                           end
                      else if (acattr.ckind = CNST) and
                         (acattr.cvalu.lvalu = $40000000) and
                         (acattr.cvalu.lvalu2 = 0)
                      then begin { 2.0 * X }
                           pushvalue(bcattr,QUAD); maxcmd(M_DMUL2,0);
                           end
                      else if Reversed
                           then pushavav(acattr,bcattr,
                                    M_DMUL,M_DMULVA,M_DMULAV,M_DMULAA)
                           else pushavav(acattr,bcattr,
                                    M_DMUL,M_DMULAV,M_DMULVA,M_DMULAA);
                      end;
       118: { FDIV4 } begin
                      if (bcattr.ckind = CNST) and
                         (bcattr.cvalu.lvalu = $40000000)
                      then begin { X / 2.0 }
                           pushvalue(acattr,LONG); maxcmd(M_FDIV2,0);
                           end
                      else if (acattr.ckind = CNST) and
                         (acattr.cvalu.lvalu = $3F800000)
                      then begin { 1.0 / X }
                           pushvalue(bcattr,LONG); maxcmd(M_F1DIV,0);
                           end
                      else begin
                           pushvalue(acattr,LONG); pushvalue(bcattr,LONG);
                       {-- if Reversed
                           then maxcmd(M_FRDIV,4)
                           else --} maxcmd(M_FDIV,4);
                           end;
                      end;
       119: { FDIV8 } begin
                      if (bcattr.ckind = CNST) and
                         (bcattr.cvalu.lvalu = $40000000) and
                         (bcattr.cvalu.lvalu2 = 0)
                      then begin { X / 2.0 }
                           pushvalue(acattr,QUAD); maxcmd(M_DDIV2,0);
                           end
                      else if (acattr.ckind = CNST) and
                         (acattr.cvalu.lvalu = $3FF00000) and
                         (acattr.cvalu.lvalu2 = 0)
                      then begin { 1.0 / X }
                           pushvalue(bcattr,QUAD); maxcmd(M_D1DIV,0);
                           end
                      else
                       {-- if Reversed
                           then pushavav(acattr,bcattr,
                                         M_DRDIV,M_DRDIVVA,M_DDIVAV,M_DDIVAA)
                           else --}
                                pushavav(acattr,bcattr,
                                         M_DDIV,M_DDIVAV,M_DDIVVA,M_DDIVAA);
                      end;
       122, { FLT4 }
       123, { FLT8 }
       124, { FGT4 }
       125, { FGT8 }
       126, { FLE4 }
       127, { FLE8 }
       128, { FGE4 }
       129, { FGE8 }
       130, { FEQ4 }
       131, { FEQ8 }
       132, { FNE4 }
       133: { FNE8 }  begin
                      if odd(fop)
                      then begin
                           if (bcattr.ckind = CNST) and
                              (bcattr.cvalu.lvalu = 0) and
                              (bcattr.cvalu.lvalu2 = 0)
                           then begin { X ? 0.0 }
                                pushvalue(acattr,QUAD); maxcmd(M_DCMP0,6);
                                end
                           else if (acattr.ckind = CNST) and
                              (acattr.cvalu.lvalu = 0) and
                              (acattr.cvalu.lvalu2 = 0)
                           then begin { 0.0 ? X }
                                pushvalue(bcattr,QUAD); maxcmd(M_DCMP0,6);
                                Reversed := TRUE;
                                end
                           else begin
                                pushvalue(acattr,QUAD); pushvalue(bcattr,QUAD);
                                maxcmd(M_DCMP,14);
                                end;
                           end
                      else begin
                           if (bcattr.ckind = CNST) and
                              (bcattr.cvalu.lvalu = 0)
                           then begin { X ? 0.0 }
                                pushvalue(acattr,LONG); maxcmd(M_FCMP0,2);
                                end
                           else if (acattr.ckind = CNST) and
                              (acattr.cvalu.lvalu = 0)
                           then begin { 0.0 ? X }
                                pushvalue(bcattr,LONG); maxcmd(M_FCMP0,6);
                                Reversed := TRUE;
                                end
                           else begin
                                pushvalue(acattr,LONG); pushvalue(bcattr,LONG);
                                maxcmd(M_FCMP,6);
                                end;
                           end;
                      { MOVE (SP)+,CCR } gen($44df);
                      with gcattr do begin
                           ckind := COND;
                           case fop of
                                122,123: { FLT4/8 } cc := LT;
                                124,125: { FGT4/8 } cc := GT;
                                126,127: { FLE4/8 } cc := LE;
                                128,129: { FGE4/8 } cc := GE;
                                130,131: { FEQ4/8 } cc := EQ;
                                132,133: { FNE4/8 } cc := NE;
                           end; {case}
                           if Reversed
                           then case cc of
                                  LT: cc := GT;
                                  GT: cc := LT;
                                  LE: cc := GE;
                                  GE: cc := LE;
                                end; {case}
                           end;
                      end;
     otherwise: error(20000+fop);
     end; {case}
     end;
end; {max2cattr}

procedure max2expr(fop: integer);
  var lcattr: cattr;
begin
if MAX_FLAG
then begin
     expression(nextbyte); lcattr := gcattr;
     if (fop = 71{IDIV4}) or (fop = 73{IMOD4}) or
        (fop = 114{FSUB4}) or (fop = 118{FDIV4})
     then begin pushvalue(lcattr,LONG); lcattr.ckind := STCK; end
     else if fop = 119{FDIV8}
          then begin pushvalue(lcattr,QUAD); lcattr.ckind := STCK; end;
     expression(nextbyte); max2cattr(fop,lcattr,gcattr);
     end;
end; {max2expr}

procedure maxtransop(fop: integer);
begin
if MAX_FLAG
then begin
     if fop in [0,2,4,6,8,10,12,18]
     then begin
          expression(nextbyte);
          if odd(fop)
          then pushvalue(gcattr,QUAD)
          else pushvalue(gcattr,LONG);
          case fop of
            0: { SIN    } maxcmd(M_FSIN,0);
     (***   1: { DSIN   } maxcmd(M_DSIN,0);   ***)
            2: { COS    } maxcmd(M_FCOS,0);
     (***   3: { DCOS   } maxcmd(M_DCOS,0);   ***)
            4: { LN     } maxcmd(M_FLN,0);
     (***   5: { DLN    } maxcmd(M_DLN,0);    ***)
            6: { EXP    } maxcmd(M_FEXP,0);
     (***   7: { DEXP   } maxcmd(M_DEXP,0);   ***)
            8: { ATAN   } maxcmd(M_FATAN,0);
     (***   9: { DATN   } maxcmd(M_DATAN,0);  ***)
           10: { SQRT   } maxcmd(M_FSQRT,0);
     (***  11: { DSQT   } maxcmd(M_DSQRT,0);  ***)
           12: { TAN    } maxcmd(M_FTAN,0);
     (***  13: { DTAN   } maxcmd(M_DTAN,0);   ***)
     (***  14: { ASIN   } maxcmd(M_FASIN,0);  ***)
     (***  15: { DASIN  } maxcmd(M_DASIN,0);  ***)
     (***  16: { ACOS   } maxcmd(M_FACOS,0);  ***)
     (***  17: { DACOS  } maxcmd(M_DACOS,0);  ***)
           18: { LOG10  } maxcmd(M_FLOG10,0);
     (***  19: { DLOG10 } maxcmd(M_DLOG10,0); ***)
          end; {case}
          gcattr.ckind := STCK;
          end
     else transop(fop);
     end;
end; {maxtransop}

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               