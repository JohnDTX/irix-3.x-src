(*****************************************************************************)
(*                                                                           *)
(*                           File: DBG.RUN.1.TEXT                            *)
(*                                                                           *)
(*           (C) Copyright 1983, 1985 Silicon Valley Software, Inc.          *)
(*                                                                           *)
(*                           All Rights Reserved.                30-Jul-85   *)
(*                                                                           *)
(*****************************************************************************)

function nextch: char;
begin
if length(line) < chno then nextch := chr(0) else nextch := line[chno];
chno := chno + 1;
end; {nextch}

function getnonblank: char;
  var lch: char;
begin
repeat lch := nextch; until lch <> ' ';
getnonblank := lch;
end; {getnonblank}

procedure unsignednumber(ch: char);
  const DIGITMAX = 31;
  var digits: alfa31; k,scale,i,exp: integer; Negative,ErrorFlag: Boolean;
      lach: char;
begin
scale := 0; token := ICONSTSY; k := 0; ErrorFlag := FALSE;
while (ch >= '0') and (ch <= '9') do begin
      if k >= DIGITMAX
      then ErrorFlag := TRUE
      else if (k > 0) or (ch <> '0')
           then begin k := k + 1; digits[k] := ch; end;
      ch := nextch;
      end;
if k = 0 then begin k := 1; digits[k] := '0'; end;
if ch = '.'
then begin
     ch := nextch; token := RCONSTSY;
     while (ch >= '0') and (ch <= '9') do begin
           if k < DIGITMAX
           then begin k := k + 1; digits[k] := ch; scale := scale - 1; end
           else if digits[1] = '0'
                then begin
                     for i := 2 to DIGITMAX do digits[i-1] := digits[i];
                     digits[DIGITMAX] := ch; scale := scale - 1;
                     end;
           ch := nextch;
           end;
     end;
if (ch = 'E') or (ch = 'e') or (ch = 'D') or (ch = 'd')
then begin
     lach := nextch; 
     if (lach = '+') or (lach = '-') or ((lach >= '0') and (lach <= '9'))
     then begin
       ch := lach; token := RCONSTSY; Negative := FALSE; exp := 0;
       if ch = '+'
       then ch := nextch
       else if ch = '-'
            then begin ch := nextch; Negative := TRUE; end;
       if (ch < '0') or (ch > '9') then ErrorFlag := TRUE;
       while (ch >= '0') and (ch <= '9') do begin
             exp := exp * 10 + ord(ch) - ord('0');
             ch := nextch;
             end;
       if Negative then exp := -exp;
       scale := scale + exp;
       end
     else chno := chno - 1;
     end;
if token = ICONSTSY
then begin
     ival := 0;
     for i := 1 to k do
         if (ival >= 214748365) or
           ((ival  = 214748364) and (digits[i] > '8'))
         then ErrorFlag := TRUE
         else ival := ival * 10 + ord(digits[i]) - ord('0');
     end
else %a_2_d(digits,k,scale,rval);
chno := chno - 1;
if ErrorFlag then begin writeln('?Bad number'); token := ERRSY; end;
end; {unsignednumber}

procedure hexnumber;
  var ch: char; count: integer;
begin
ival := 0; ch := nextch; token := DOLLARSY; count := 0;
while ((ch >= '0') and (ch <= '9')) or
      ((ch >= 'a') and (ch <= 'f')) or
      ((ch >= 'A') and (ch <= 'F')) do begin
      count := count + 1; token := ICONSTSY;
      if ch <= '9'
      then ch := chr(ord(ch) - 48)
      else if ch >= 'a'
           then ch := chr(ord(ch) - 87)
           else ch := chr(ord(ch) - 55);
      ival := ival*16 + ord(ch);
      ch := nextch;
      end;
if count > 0
then if count <= 2
     then scansize := 1
     else if count <= 4
          then scansize := 2
          else scansize := 4;
chno := chno - 1;
end; {hexnumber}

procedure scan;
  var ch,lch: char;
begin
token := ERRSY; ch := getnonblank; scansize := 0;
case ch of
  '\0': token := EOLNSY;
  'A','B','C','D','E','F','G','H','I','J','K','L','M',
  'N','O','P','Q','R','S','T','U','V','W','X','Y','Z',
  'a','b','c','d','e','f','g','h','i','j','k','l','m',
  'n','o','p','q','r','s','t','u','v','w','x','y','z',
  '_','%': begin
       sval := '';
       repeat
              if length(sval) < 63
              then begin
                   sval[0] := chr(ord(sval[0]) + 1);
                   sval[length(sval)] := ch;
                   end;
              ch := nextch;
       until not (((ch <= 'Z') and (ch >= 'A')) or
                  ((ch <= 'z') and (ch >= 'a')) or
                  ((ch <= '9') and (ch >= '0')) or
                  (ch = '%') or (ch = '_'));
       chno := chno - 1; token := IDENTSY;
       end;
  '0','1','2','3','4','5','6','7','8','9':
       unsignednumber(ch);
  '$': hexnumber;
  '''','"': begin
       sval := ''; lch := ch;
       repeat
              ch := nextch;
              while ch <> lch do begin
                    if ch = chr(0) then exit(scan);
                    if length(sval) < 63
                    then begin
                         sval[0] := chr(length(sval) + 1);
                         sval[length(sval)] := ch;
                         end;
                    ch := nextch;
                    end;
              ch := nextch;
              if ch = lch
              then begin
                   if length(sval) < 63
                   then begin
                        sval[0] := chr(length(sval) + 1);
                        sval[length(sval)] := ch;
                        end;
                   end;
       until ch <> lch;
       chno := chno - 1;
       if lch = '''' then token := SCONSTSY else token := LINKSY;
       end;
  '-': token := MINUSSY;
  '^': token := UPARROWSY;
  '[': token := LBRACKSY;
  ']': token := RBRACKSY;
  ',': token := COMMASY;
  '=': token := EQUALSY;
  '*': token := STARSY;
  '(': token := LPARENSY;
  ')': token := RPARENSY;
  '.': begin
       lch := nextch; chno := chno - 1;
       if (lch >= '0') and (lch <= '9')
       then unsignednumber(ch)
       else token := PERIODSY;
       end;
  ':': begin
       ch := nextch;
       if ch = '='
       then token := ASSIGNSY
       else begin token := COLONSY; chno := chno - 1; end;
       end;
end; {case}
end; {scan}

procedure constvalu(var fvalu: valu);
  var Signed,BadFlag: Boolean;
begin
fvalu.vkind := 0; BadFlag := FALSE;
if token = MINUSSY
then begin Signed := TRUE; scan; end
else Signed := FALSE;
case token of
  ICONSTSY:  begin
             if Signed then ival := -ival;
             fvalu.vkind := 2; fvalu.ivalu := ival;
             scan;
             end;
  IDENTSY:   begin
             uppercase(sval);
             if Signed
             then BadFlag := TRUE
             else if sval = 'TRUE'
                  then begin fvalu.vkind := 2; fvalu.ivalu := 1 end
                  else if sval = 'FALSE'
                       then begin fvalu.vkind := 2; fvalu.ivalu := 0 end
                       else if sval = 'NIL'
                            then begin fvalu.vkind := 5; fvalu.ivalu := 0 end
                            else BadFlag := TRUE;
             scan;
             end;
  RCONSTSY:  begin
             if Signed then rval := -rval;
             fvalu.vkind := 3; fvalu.dvalu := rval;
             scan;
             end;
  SCONSTSY:  begin
             fvalu.vkind := 6; fvalu.svalu := sval;
             scan;
             end;
  {??? What about COMPLEX values ???}
otherwise: BadFlag := TRUE;
end; {case}
if BadFlag then writeln('?Bad constant');
end; {constvalu}

procedure expression(var fvalu: valu);
begin
constvalu(fvalu);
end; {expression}

function NoEnv: Boolean;
  var BadFlag: Boolean; lentryno: integer; lentry: pentryrec;
begin
NoEnv := TRUE;
if envlevel > 0
then begin
     lentryno := display[envlevel].dentryno;
     lentry := getpentry(lentryno);
     if lentry^.language <> UNKNOWN
     then NoEnv := FALSE;
     end;
end; {NoEnv}

procedure gettyperec(ftypeno: integer; var ftype: typerec);
  var lpt: ptyperec;
begin
with ftype do begin
     PckdType := FALSE; form := SCALAR; maxconst := -1;
     end;
if ftypeno > 0
then begin
     lpt := gettype(ftypeno);
     if lpt <> nil then ftype := lpt^;
     end;
end; {gettyperec}

procedure selector(var ftypeno: integer; var faddr: addr; var fname: string63);
  var lname,mname: string63; llev,lkind,lreg,lbit,nbit,i: integer;
      varlist: pbyte; llang: langs; loffset,lo,hi: longint; ltype: typerec;
      ExitFlag,Sgnd: Boolean; lvalu: valu;

  procedure prrecfields;
    var basename,lname: string63; fieldlist: pbyte; FSigned: Boolean;
        foffset: longint; ftypeno,flbit,fnbit: integer;
        fieldaddr: addr; lvalu: valu;
  begin
  basename := fname; fieldlist := ltype.fields;
  if llang = PASCAL then uppercase(basename);
  if fieldlist <> nil
  then while fieldlist^ <> 0 do begin
             nextfield(fieldlist,ltype.PckdType,lname,
                       foffset,ftypeno,flbit,fnbit,FSigned);
             with fieldaddr do begin
                  address := faddr.address + foffset;
                  if ltype.PckdType and (fnbit <> 0)
                  then PackedFlag := TRUE
                  else PackedFlag := FALSE;
                  SignedFlag := FSigned;
                  leftbit := flbit; numbits := fnbit;
                  end;
             if ftypeno <> 0
             then begin
                  getvalu(lvalu,fieldaddr,ftypeno);
                  write('$',foffset:4 hex);
                  if fieldaddr.PackedFlag then write('/',flbit);
                  write(' ',basename,'.',lname);
                  write(' = '); prvalu(lvalu); writeln;
                  end;
       end;
  end; {prrecfields}

begin
ftypeno := 0;
if NoEnv
then begin
     writeln('?No environment');
     exit(selector);
     end;
if token <> IDENTSY
then begin writeln('?Variable expected'); exit(selector); end;
fname := sval; scan;
if not FindVarAll(fname,ftypeno,lkind,lreg,loffset,llev,llang)
then begin
     writeln('?No variable ',fname);
     ftypeno := 0; exit(selector);
     end;
getaddr(faddr,ftypeno,lkind,lreg,loffset,display[llev]);
ExitFlag := FALSE;
repeat
       case token of
         PERIODSY:
           begin
           scan;
           if (token <> IDENTSY) and 
              ((token <> STARSY) or (not PrRecFlag))
           then begin
                if PrRecFlag
                then writeln('?Field name or * expected')
                else writeln('?Field name expected');
                ftypeno := 0; exit(selector);
                end;
           if ftypeno <> 0
           then begin
                gettyperec(ftypeno,ltype);
                if ltype.form = RECORDS
                then if token = IDENTSY
                     then begin
                          lname := sval; mname := lname;
                          if llang = PASCAL then uppercase(mname);
                          if FindField(ltype.fields,mname,ltype.PckdType,
                                       loffset,ftypeno,lbit,nbit,Sgnd)
                          then with faddr do begin
                                    address := address + loffset;
                                    if ltype.PckdType and (nbit <> 0)
                                    then PackedFlag := TRUE
                                    else PackedFlag := FALSE;
                                    SignedFlag := Sgnd;
                                    leftbit := lbit; numbits := nbit;
                                    end
                          else begin
                               writeln('?No field ',lname,' in ',fname);
                               ftypeno := 0;
                               end;
                          fname := concat(fname,'.',lname);
                          end
                     else begin {(token = STARSY) and (PrRecFlag)}
                          prrecfields;
                          ftypeno := 0; exit(selector);
                          end
                else begin
                     writeln('?',fname,' is not a record');
                     ftypeno := 0;
                     end;
                end;
           scan;
           end;
         UPARROWSY:
           begin
           if ftypeno <> 0
           then begin
                gettyperec(ftypeno,ltype);
                if ltype.form = POINTERS
                then begin
                     with faddr do
                          if address = 0
                          then begin
                               writeln('?Nil address for ',fname);
                               ftypeno := 0;
                               end
                     else if not odd(address)
                          then begin
                               address := getul(address);
                               PackedFlag := FALSE;
                               ftypeno := ltype.pointerto;
                               end
                          else begin
                               writeln('?Odd address for ',fname);
                               ftypeno := 0;
                               end;
                     fname := concat(fname,'^');
                     end
                else begin
                     writeln('?',fname,' is not a pointer');
                     ftypeno := 0;
                     end;
                end;
           scan;
           end;
         LBRACKSY:
           if ftypeno <> 0
           then begin
             gettyperec(ftypeno,ltype);
             if ltype.form = FARRAY
             then token := LPARENSY
             else begin
               scan;
               expression(lvalu);
               if lvalu.vkind = 0
               then ftypeno := 0
               else if lvalu.vkind <> 2
                    then begin
                         writeln('?Index must be integer');
                         ftypeno := 0;
                         end;
               if ftypeno <> 0
               then begin
                 gettyperec(ftypeno,ltype);
                 if ltype.form = ARRAYS
                 then begin
                      ftypeno := ltype.arrayof;
                      getbounds(ltype.indexedby,lo,hi);
                      if (lvalu.ivalu < lo) or (lvalu.ivalu > hi)
                      then begin
                           writeln('?Index ',lvalu.ivalu,' not in ',
                                   lo,'..',hi);
                           ftypeno := 0; lvalu.ivalu := lo;
                           end;
                      loffset := lvalu.ivalu - lo;
                      if ltype.PckdType
                      then begin
                           i := ltype.bitsperel;
                           if i = 0 then i := 1;
                           i := 8 div i;
                           faddr.address := faddr.address +
                                                loffset div i;
                           faddr.PackedFlag := TRUE;
                           faddr.SignedFlag := ltype.SignedEl;
                           faddr.numbits := ltype.bitsperel;
                           faddr.leftbit := 8 -
                               ((loffset mod i) + 1)*ltype.bitsperel;
                           if odd(faddr.address)
                           then begin
                                faddr.address := faddr.address - 1;
                                faddr.leftbit := faddr.leftbit + 8;
                                end;
                           end
                      else faddr.address := faddr.address + 
                                 loffset*typesize(ltype.arrayof);
                      end
                 else if ltype.form = STRINGS
                      then begin
                           ftypeno := -7;
                           if (lvalu.ivalu < 0) or
                              (lvalu.ivalu > ltype.stringlen)
                           then begin
                                writeln('?Index ',lvalu.ivalu,' not in ',
                                        0,'..',ltype.stringlen);
                                ftypeno := 0; lvalu.ivalu := 0;
                                end;
                           faddr.address := faddr.address + lvalu.ivalu;
                           end
                      else begin
                           writeln('?',fname,' is not an array or a string');
                           ftypeno := 0;
                           end;
                 end;
               if (token = RBRACKSY) or (token = RPARENSY)
               then scan
               else if token = COMMASY
                    then token := LBRACKSY
                    else begin
                         writeln('?Missing '']'' or '')''');
                         ftypeno := 0;
                         end;
               fname := concat(fname,'[]');
               end;
             end;
         LPARENSY:
           if ftypeno <> 0
           then begin
             gettyperec(ftypeno,ltype);
             if (ltype.form = ARRAYS) or (ltype.form = STRINGS)
             then token := LBRACKSY
             else begin
               scan;
               if ftypeno <> 0
               then begin
                 gettyperec(ftypeno,ltype);
                 if ltype.form = FARRAY
                 then begin
                    ftypeno := ltype.farrayof;
                    for i := 1 to ltype.dims do begin
                        expression(lvalu);
                        if lvalu.vkind = 0
                        then ftypeno := 0
                        else if lvalu.vkind <> 2
                             then begin
                                  writeln('?Index must be integer');
                                  ftypeno := 0;
                                  end;
                        if ftypeno <> 0
                        then with ltype.bounds[i] do begin
                                  if flags = 0
                                  then begin
                                       if (lvalu.ivalu < lo) or
                                          (lvalu.ivalu > hi)
                                       then begin
                                            writeln('?Index ',lvalu.ivalu,
                                                    ' not in ',lo,'..',hi);
                                            ftypeno := 0; lvalu.ivalu := lo;
                                            end;
                                       faddr.address := faddr.address +
                                                       (lvalu.ivalu - lo)*sz;
                                       end
                                  else begin
                                       writeln('*** Can only do ',
                                               'CONSTANT bounds ***');
                                       ftypeno := 0;
                                       end;
                                  end;
                        if i < ltype.dims
                        then if token = COMMASY
                             then scan
                             else begin
                                  ftypeno := 0;
                                  if (token = RPARENSY) or (token = RBRACKSY)
                                  then writeln('?Too few subscripts')
                                  else writeln('?Comma expected');
                                  exit(selector);
                                  end;
                        end;
                    end
                  else begin
                    writeln('?',fname,' is not an array or string');
                    ftypeno := 0;
                    end;
                 end;
               if (token = RPARENSY) or (token = RBRACKSY)
               then scan
               else begin
                    if token = COMMASY
                    then writeln('?Too many subscripts')
                    else writeln('?Missing '')'' or '']''');
                    ftypeno := 0;
                    end;
               fname := concat(fname,'[]');
               end;
             end;
         otherwise:
           ExitFlag := TRUE;
       end; {case}
until ExitFlag or (ftypeno = 0);
end; {selector}

procedure printvars;
  var varlist: pbyte; lentry: pentryrec;
      ltypeno,lkind,lreg: integer; laddr: addr; lvalu: valu;
      loffset: longint; lname: string63;
begin
if NoEnv
then begin
     writeln('?No environment');
     exit(printvars);
     end;
lentry := getpentry(display[envlevel].dentryno);
varlist := lentry^.symbols;
scan;
if token = EOLNSY
then begin
     if varlist <> nil
     then while varlist^ <> 0 do begin
                nextvar(varlist,lname,ltypeno,lkind,lreg,loffset);
                write(lname,' = ');
                getaddr(laddr,ltypeno,lkind,lreg,loffset,display[envlevel]);
                if ltypeno <> 0
                then begin
                     getvalu(lvalu,laddr,ltypeno);
                     prvalu(lvalu); writeln;
                     end;
                end;
     end
else begin
     PrRecFlag := TRUE;
     selector(ltypeno,laddr,lname);
     PrRecFlag := FALSE;
     if ltypeno <> 0
     then begin
          getvalu(lvalu,laddr,ltypeno);
          write(lname,' = '); prvalu(lvalu); writeln;
          end;
     end;
end; {printvars}

procedure setvars;
  var ltypeno: integer; laddr: addr; lvalu: valu; lname: string63;
begin
if NoEnv
then begin
     writeln('?No environment');
     exit(setvars);
     end;
scan;
if token = EOLNSY
then writeln('?No variable')
else begin
     selector(ltypeno,laddr,lname);
     if ltypeno <> 0
     then begin
          if (token = EQUALSY) or (token = ASSIGNSY) then scan;
          constvalu(lvalu);
          if lvalu.vkind <> 0
          then setvalu(lvalu,laddr,ltypeno);
          end;
     end;
end; {setvars}

function ChkPIndex(index: integer; var fname: string63): Boolean;
begin
if index >= 0
then ChkPIndex := TRUE
else begin
     if index = -1
     then writeln('?Can''t find ',fname)
     else if index = -2
          then writeln('?Multiple user entry points named ',fname);
     ChkPIndex := FALSE;
     end;
end; {ChkPIndex}

procedure prcurenv;
begin
write('Environment = '); prfullloc(envpc,TRUE);
writeln('   Depth = ',envdepth);
end; {prcurenv}

procedure listnames;
  var ch: char; index: integer; lname: string63; lpt: ptyperec;
       i,ltypeno,lkind,lreg,llev: integer; loffset,moffset: longint;
       llang: langs; laddr: addr; mnam: alfa31; mnamlen: integer;
       ldatarec: pdatarec;
begin
ch := makechuc(getnonblank);
case ch of
  'B': for i := 1 to 100 do
           if (bpoint[i].BSet) or (bpoint[i].TSet) then prbreak(i);
  'D': prdatas(datatree^.rlink);
  'E': begin
       scan;
       if (token = IDENTSY) and (sval <> '%')
       then begin
            lname := sval; index := nxtusrindex(lname,-1);
            if index >= 0
            then while index >= 0 do begin
                       prentry(index,TRUE);
                       index := nxtusrindex(lname,index);
                       end
            else writeln('?Can''t find ',lname);
            end
       else if token = LINKSY
            then begin
                 lname := sval;
                 linkname(lname,mnam,mnamlen);
                 index := getindex(entrylookup(@mnam,mnamlen));
                 if ChkPIndex(index,lname)
                 then prentry(index,TRUE);
                 end
            else if (token = EOLNSY) or (token = IDENTSY)
                 then prentrys
                 else writeln('?LEusername LE"linkname" LE LE%');
       end;
  'F': begin
       scan; selector(ltypeno,laddr,lname);
       if ltypeno <> 0
       then if ltypeno > 0
            then begin
                 lpt := gettype(ltypeno);
                 if lpt <> nil
                 then if lpt^.form = RECORDS
                      then prfields(lpt^.fields,lpt^.PckdType)
                      else writeln('?',lname,' is not a record')
                 else writeln('?The type if ',lname,' is not defined');
                 end
            else writeln('?',lname,' is not a record');
       end;
  'R': begin
       prregs;
       end;
  'S': begin
       prsegs;
       end;
  'T': begin
       scan;
       if token = EOLNSY
       then prtypes
       else if token = ICONSTSY
            then begin
                 lpt := gettype(ival);
                 if lpt <> nil
                 then prtype(lpt)
                 else writeln('?T',ival,' is not defined.');
                 end
            else writeln('?LT LTnnn');
       end;
  'V': begin
       scan; ch := getnonblank;
       if (token = IDENTSY) and (ch = chr(0))
       then if FindVarAll(sval,ltypeno,lkind,lreg,loffset,llev,llang)
            then begin
                 write(sval,': '); prtno(ltypeno); write(' at ');
                 if (lkind = 1) or (lkind = 3) or (lkind = 7) then write('*');
                 case lkind of
                   0,1,
                   6,7: begin
                        write('$');
                        if lkind >= 6
                        then write(loffset:8 hex)
                        else write(loffset:4 hex);
                        write('(');
                        if ENVIRONMENT = GENIX
                        then {32000}
                             if lreg = 13
                             then write('SB)')
                             else if lreg = 14
                                  then write('FP)')
                                  else write('XX)')
                        else begin {68000}
                             if lreg >= 8 then write('A') else write('D');
                             write(lreg mod 8,')');
                             end;
                        end;
                   2,3: begin
                        if ENVIRONMENT = GENIX
                        then
                          if lreg >= 8 then write('F') else write('R')
                        else
                          if lreg >= 8 then write('A') else write('D');
                        write(lreg mod 8);
                        end;
                   4:   begin
                        getdataoff(loffset+database,ldatarec,moffset);
                        if ldatarec <> nil
                        then begin
                             wrcharn(ldatarec^.name,ldatarec^.namelen);
                             write('+$',moffset:6 hex);
                             end;
                        end;
                 end; {case}
                 if lkind <> 2
                 then begin
                      write(' = ');
                      getaddr(laddr,ltypeno,lkind,lreg,loffset,display[llev]);
                      if ltypeno <> 0 then write('$',laddr.address hex);
                      end;
                 writeln;
                 end
            else writeln('?No variable ',sval)
       else writeln('?LVname');
       end;
otherwise: writeln('?LB LD LE LF LR LS LT LV');
end; {case}
end; {listnames}


