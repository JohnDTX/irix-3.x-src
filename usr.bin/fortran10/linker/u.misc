(*****************************************************************************)
(*                                                                           *)
(*                             File: U.MISC.TEXT                             *)
(*                                                                           *)
(*          (C) Copyright 1982, 1985 Silicon Valley Software, Inc.           *)
(*                                                                           *)
(*                            All Rights Reserved.               20-Jun-85   *)
(*                                                                           *)
(*****************************************************************************)


procedure splitbytes(v: integer; var high,low: integer);
  var Neg: Boolean;
begin
if v < 0
then begin
     v := (v + 32767) + 1;
     Neg := TRUE;
     end
else Neg := FALSE;
low := v mod 256;
high := v div 256;
if neg
then high := high + 128;
end; {splitbytes}

procedure readinfile(message: string50);
  var n: integer;
begin
n := blockread(infile,inbuff,8,inblock);
if DebugFlag
then writeln('Read ',n:1,' blocks at block ',inblock,'.');
if n = 0
then fatal_error(concat('Unable to read ',message));
nextinblock := inblock + n; lastinword := n*256 - 1;
end; {readinfile}

function nextbyte: integer;
  var firstbyte: integer;
begin
if HalfFlag
then begin
     HalfFlag := FALSE;
     nextbyte := lastbyte;
     end
else begin
     if inword > lastinword
     then begin
          inword := 0; inblock := nextinblock;
          readinfile('infile');
          end;
     splitbytes(inbuff[inword],firstbyte,lastbyte);
     inword := inword + 1; HalfFlag := TRUE; nextbyte := firstbyte;
     end;
end; {nextbyte}

function next2bytes: integer;
  var i: integer; cc: array[0..1] of -128..127;
begin
cc[0] := nextbyte; cc[1] := nextbyte;
moveleft(cc,i,2); next2bytes := i;
end; {next2bytes}

function nextword: integer;
begin
if HalfFlag
then fatal_error('Nextword(HalfFlag)');
if inword > lastinword
then begin
     inword := 0; inblock := nextinblock;
     readinfile('infile');
     end;
nextword := inbuff[inword];
inword := inword + 1;
end;  {nextword}

function next3bytes: longint;
  var l: longint; cc: array[0..3] of -128..127;
begin
cc[0] := 0; cc[1] := nextbyte; cc[2] := nextbyte; cc[3] := nextbyte;
moveleft(cc,l,4); next3bytes := l;
end; {next3bytes}

function next4bytes: longint;
  var l: longint; cc: array[0..3] of -128..127;
begin
cc[0] := nextbyte; cc[1] := nextbyte; cc[2] := nextbyte; cc[3] := nextbyte;
moveleft(cc,l,4); next4bytes := l;
end; {next4bytes}

procedure skip(fbytes: longint);
begin
if HalfFlag
then error('Skip(HalfFlag = TRUE)');
if odd(fbytes)
then error('Skip(fbytes odd)');
if (inword + fbytes div 2) > lastinword
then begin
     inblock := inblock + (inword + fbytes div 2) div 256;
     inword := (inword + fbytes div 2) mod 256;
     readinfile('infile');
     end
else inword := inword + fbytes div 2;
end; {skip}

procedure seekmodule(fmodule: pmodlist);
begin
with fmodule^ do
     begin
     if modinfile <> thisfile
     then begin
          if thisfile <> nil then close(infile);
          reset(infile,modinfile^.name);
          if ioresult <> 0
          then fatal_error(concat('Can''t reopen link file ''',
                                  modinfile^.name,''''));
          thisfile := modinfile;
          inblock := 32000;
          lastinword := -1;
          end;
     if (modblock < inblock) or (modblock >= nextinblock)
     then begin
          inblock := modblock;
          readinfile('file');
          end;
     inword := (modblock - inblock)*256 + (modbyte div 2);
     end;
end; {seekmodule}

procedure printhex(var f: text; k: longint; n: integer);
  var i: integer;
      c: array[1..8] of 0..15;
      Neg: Boolean;
begin
if k < 0
then begin
     k := (k + 2147483647) + 1;
     Neg := TRUE;
     end
else Neg := FALSE;
if n > 8
then begin
     for i := 9 to n do
         write(f,'0');
     n := 8;
     end;
for i := 1 to n do
    begin
    c[i] := k mod 16;
    if i = 8
    then if Neg
         then c[i] := c[i] + 8;
    k := k div 16;
    end;
for i := n downto 1 do
    if c[i] <= 9
    then write(f,chr(ord('0') + c[i]))
    else write(f,chr(ord('A') + c[i] - 10));
end; {printhex}

procedure reada8(var fname: alfa8);
  var i: integer;
begin
for i := 1 to 8 do
    fname[i] := chr(nextbyte);
end; {reada8}

procedure reads25(var fstr: string50; len: integer);
  var i,j: integer;
begin
fstr := '';
for i := 1 to len do
    begin
    j := nextbyte;
    if i <= 25
    then begin
         fstr := concat(fstr,' ');
         fstr[i] := chr(j);
         end;
    end;
end; {reads25}

function LocalName(fname: alfa8): Boolean;
  var i: integer; Result: Boolean; ch: char;
begin
if fname[1] = '$'
then begin
     Result := TRUE; i := 1;
     while Result and (i < 8) do
           begin
           i := i + 1; ch :=  fname[i];
           if (ch < '0') or (ch > '9')
           then if ch = ' '
                then i := 8
                else Result := FALSE;
           end;
     LocalName := Result;
     end
else LocalName := FALSE;
end; {LocalName}

procedure inclname(var fname: alfa8; finc: integer);
  var i,n: integer; ch: char;
begin
n := 0;
for i := 8 downto 2 do
    begin
    ch := fname[i];
    if ch <> ' '
    then n := n*10 + ord(ch) - ord('0');
    end;
n := n + finc;
if lprocmax <= n
then lprocmax := n + 1;
for i := 2 to 8 do
    begin
    fname[i] := chr(n mod 10 + ord('0'));
    n := n div 10;
    end;
end; {inclname}

procedure insertint(var fpint: pintlist; fval: integer);
  var newpint,thispint,lastpint: pintlist; ExitFlag: Boolean;
begin
new(newpint); newpint^.nextint := nil; newpint^.intval := fval;
if fpint = nil
then fpint := newpint
else if fpint^.intval > fval
     then begin
          newpint^.nextint := fpint;
          fpint := newpint;
          end
     else begin
          thispint := fpint; ExitFlag := FALSE;
          repeat
                 lastpint := thispint;
                 thispint := thispint^.nextint;
                 if thispint <> nil
                 then ExitFlag := thispint^.intval > fval
                 else ExitFlag := TRUE;
          until ExitFlag;
          newpint^.nextint := thispint; lastpint^.nextint := newpint;
          end;
end; {insertint}

procedure insertpatch(var fpatchlist: ppatchlist; fval,floc: integer);
  var newpatch,thispatch,lastpatch: ppatchlist; ExitFlag: Boolean;
begin
new(newpatch);
with newpatch^ do
     begin nextpatch := nil; patchval := fval; patchloc := floc; end;
if fpatchlist = nil
then fpatchlist := newpatch
else if fpatchlist^.patchloc > floc
     then begin
          newpatch^.nextpatch := fpatchlist;
          fpatchlist := newpatch;
          end
     else begin
          thispatch := fpatchlist; ExitFlag := FALSE;
          repeat
                 lastpatch := thispatch;
                 thispatch := thispatch^.nextpatch;
                 if thispatch <> nil
                 then ExitFlag := thispatch^.patchloc > floc
                 else ExitFlag := TRUE;
          until ExitFlag;
          newpatch^.nextpatch := thispatch;
          lastpatch^.nextpatch := newpatch;
          end;
end; {insertpatch}

procedure insertfpatch(var ffpatchlist: pfpatchlist; fval: longint; floc: integer);
  var newfpatch,thisfpatch,lastfpatch: pfpatchlist; ExitFlag: Boolean;
begin
new(newfpatch);
with newfpatch^ do
     begin nextpatch := nil; patchval := fval; patchloc := floc; end;
if ffpatchlist = nil
then ffpatchlist := newfpatch
else if ffpatchlist^.patchloc > floc
     then begin
          newfpatch^.nextpatch := ffpatchlist;
          ffpatchlist := newfpatch;
          end
     else begin
          thisfpatch := ffpatchlist; ExitFlag := FALSE;
          repeat
                 lastfpatch := thisfpatch;
                 thisfpatch := thisfpatch^.nextpatch;
                 if thisfpatch <> nil
                 then ExitFlag := thisfpatch^.patchloc > floc
                 else ExitFlag := TRUE;
          until ExitFlag;
          newfpatch^.nextpatch := thisfpatch;
          lastfpatch^.nextpatch := newfpatch;
          end;
end; {insertfpatch}

procedure entername(fsymbol: psymbol);
  var lsymbol: psymbol;
begin
lsymbol := nametree;
while lsymbol <> nil do
      with lsymbol^ do
           if linkname = fsymbol^.linkname
           then begin
                writeln(chr(7),'Duplicate name');
                lsymbol := nil;
                end
           else if linkname < fsymbol^.linkname
                then if llink = nil
                     then begin
                          llink := fsymbol;
                          lsymbol := nil;
                          end
                     else lsymbol := llink
                else if rlink = nil
                     then begin
                          rlink := fsymbol;
                          lsymbol := nil;
                          end
                     else lsymbol := rlink;
end; {entername}

function lookupname(fname: alfa8): psymbol;
  var lsymbol: psymbol; ExitFlag: Boolean;
begin
lsymbol := nametree;
ExitFlag := FALSE;
while not ExitFlag and (lsymbol <> nil) do
      with lsymbol^ do
           if fname = linkname
           then ExitFlag := TRUE
           else if fname < linkname
                then lsymbol := rlink
                else lsymbol := llink;
lookupname := lsymbol;
end; {lookupname}

function lookupfcommon(*var ftree: pfcommon; fname: alfa8): pfcommon *);
  var lfcommon: pfcommon;
  
  function newfcommon(fname: alfa8): pfcommon;
    var lfcommon: pfcommon;
  begin
  new(lfcommon);
  with lfcommon^ do begin
       name := fname; llink := nil; rlink := nil;
       reflist := nil; initlist := nil; lastinit := nil; reladdr := 0; 
       TextResident := FALSE; AtAbsolute := FALSE; Defined := FALSE;
       end;
  newfcommon := lfcommon;
  end; {newfcommon}
  
begin {lookupfcommon}
if ftree = nil
then begin
     ftree := newfcommon(fname);
     lookupfcommon := ftree;
     end
else begin
     lfcommon := ftree;
     while lfcommon <> nil do
           with lfcommon^ do
                if name = fname
                then begin
                     lookupfcommon := lfcommon;
                     lfcommon := nil;
                     end
                else if name < fname
                     then if llink = nil
                          then begin
                               llink := newfcommon(fname);
                               lookupfcommon := llink;
                               lfcommon :=  nil;
                               end
                          else lfcommon := llink
                     else if rlink = nil
                          then begin
                               rlink := newfcommon(fname);
                               lookupfcommon := rlink;
                               lfcommon :=  nil;
                               end
                          else lfcommon := rlink;
     end;
end; {lookupfcommon}

procedure entersegment(fsegment: psegment);
  var lsegment: psegment;
begin
lsegment := segtree;
if lsegment = nil
then segtree := fsegment
else while lsegment <> nil do
           with lsegment^ do
                if segname = fsegment^.segname
                then begin
                     writeln(chr(7),'Duplicate segment');
                     lsegment := nil;
                     end
                else if segname < fsegment^.segname
                     then if llink = nil
                          then begin
                               llink := fsegment;
                               lsegment := nil;
                               end
                          else lsegment := llink
                     else if rlink = nil
                          then begin
                               rlink := fsegment;
                               lsegment := nil;
                               end
                          else lsegment := rlink;
fsegment^.nextseg := seglist; seglist := fsegment;
end; {entersegment}

function lookupsegment(fname: alfa8): psegment;
  var lsegment: psegment; ExitFlag: Boolean;
begin
lsegment := segtree;
ExitFlag := FALSE;
while not ExitFlag and (lsegment <> nil) do
      with lsegment^ do
           if fname = segname
           then ExitFlag := TRUE
           else if fname < segname
                   then lsegment := rlink
                   else lsegment := llink;
lookupsegment := lsegment;
end; {lookupsegment}

procedure flushsymfile;
  var b: integer;
begin
if symbyte > 0
then begin
     for b := symbyte to 1023 do symbuffer[b] := 0;
     b := (symbyte + 511) div 512;
     if blockwrite(symfile,symbuffer,b,symblock) <> b
     then fatal_error('Can''t write .SYM file');
     symblock := symblock + b;
     symbyte := 0;
     end;
end; {flushsymfile}

procedure sout(n: integer);
begin
if symbyte > 1023 then flushsymfile;
symbuffer[symbyte] := n; symbyte := symbyte + 1;
end; {sout}

procedure sout2(n: integer);
  var c: array[0..1] of bite;
begin
moveleft(n,c,2);
sout(c[0]); sout(c[1]);
end; {sout2}

procedure sout4(n: longint);
  var c: array[0..3] of bite;
begin
moveleft(n,c,4);
sout(c[0]); sout(c[1]); sout(c[2]); sout(c[3]);
end; {sout4}

function localno(fname: alfa8): integer;
  var i,j: integer; ch: char;
begin
if fname[1] <> '$'
then localno := -1
else if fname[2] <= '9'
     then begin
          j := 0;
          for i := 8 downto 2 do begin
              ch := fname[i];
              if (ch <= '9') and (ch >= '0')
              then j := j*10 + ord(ch) - ord('0');
              end;
          localno := j;
          end
     else localno := -1;
end; {localno}

procedure soutsalfa(fname: alfa8);
  var i,n: integer;
begin
n := 8;
while (n > 0) and (fname[n] = ' ') do n := n - 1;
sout(n);
for i := 1 to n do sout(ord(fname[i]));
end; {soutsalfa}

procedure outsymfile;
  var i,count: integer; lseg: psegment; lftndata: pfcommon;
      lmodlist: pmodlist; l: longint;
      typebase,lasttype: integer;
      lastfile: pfilerec;
  
  function numentries(fsymbol: psymbol): integer;
  begin
  if fsymbol <> nil
  then begin
       with fsymbol^ do
            if username = '***Label'
            then numentries := numentries(llink) + numentries(rlink)
            else numentries := numentries(llink) + numentries(rlink) + 1;
       end
  else numentries := 0;
  end; {numentries}
  
  procedure outentries(fsymbol: psymbol);
    var i: integer; lseg: psegment;
  begin
  if fsymbol <> nil
  then with fsymbol^ do begin
       outentries(rlink);
       if username <> '***Label'
       then begin
            sout2(localno(linkname)); soutsalfa(username);
            if Defined
            then begin
                 lseg := seglist; i := 0;
                 while (lseg <> nil) and (lseg <> seg) do
                       begin i := i + 1; lseg := lseg^.nextseg; end;
                 sout(i);
                 sout(0); sout2(loc);
                 end
            else begin sout(-1); sout(-1); sout2(-1); end;
            end;
       outentries(llink);
       end;
  end; {outentries}
  
  procedure reloctype(var ftypeno: integer);
  begin
  if ftypeno > 0
  then begin
       ftypeno := ftypeno + typebase;
       if lasttype < ftypeno then lasttype := ftypeno;
       end;
  end; {reloctype}
  
  function readtypeno: integer;
    var ltypeno: integer;
  begin
  ltypeno := next2bytes; reloctype(ltypeno);
  readtypeno := ltypeno;
  end; {readtypeno}
  
  procedure readlnkid(var fid: linkid);
    var len,i,junk: integer;
  begin
  fid.linkno := next2bytes;
  if fid.linkno >= 0
  then begin
       fid.linkno := fid.linkno + lprocbase;
       if lprocmax <= fid.linkno
       then lprocmax := fid.linkno + 1;
       end;
  len := nextbyte;
  if len <= 8 then fid.nam[0] := chr(len) else fid.nam[0] := chr(8);
  for i := 1 to len do
      if i <= 8
      then fid.nam[i] := chr(nextbyte)
      else junk := nextbyte;
  end; {readlnkid}
  
  procedure soutlid(fid: linkid);
    var i: integer;
  begin
  sout2(fid.linkno);
  for i := 0 to length(fid.nam) do sout(ord(fid.nam[i]));
  end; {soutlid}

  procedure copytvs;
    var i,kind,ltypeno,len: integer; PackedFlag: Boolean; lid: linkid;
  begin
  
  { L.V.S.L LinkName PrntName }
  
  sout(nextbyte); i := nextbyte; len := nextbyte;
  if i*100 + len < 203
  then begin
       writeln('*** .DBG data for V',i,'.',len,' was encountered ***');
       fatal_error('but this linker requires V2.3');
       end;
  sout(i); sout(len); sout(nextbyte);
  readlnkid(lid); soutlid(lid);
  readlnkid(lid); soutlid(lid);
  
  { UserName }
  
  len := nextbyte; sout(len);
  for i := 1 to len do sout(nextbyte);
  
  { Types }
  
  ltypeno := next2bytes;
  while ltypeno <> 0 do begin
        reloctype(ltypeno); sout2(ltypeno);
        kind := nextbyte; sout(kind); PackedFlag := kind > 15;
        case kind mod 16 of
          0: {SCALAR}
             sout2(next2bytes);
          1: {SUBRANGE}
             begin
             sout2(readtypeno); sout4(next4bytes); sout4(next4bytes);
             end;
          2, {POINTER}
          3: {SET}
             sout2(readtypeno);
          4: {ARRAY}
             begin
             sout2(readtypeno); sout2(readtypeno);
             if PackedFlag then sout(nextbyte);
             end;
          5: {STRING}
             sout(nextbyte);
          6: {FILE}
             sout2(readtypeno);
          7: {RECORD}
             begin
             sout4(next4bytes);
             len := nextbyte;
             while len > 0 do begin
                   sout(len);
                   for i := 1 to len do sout(nextbyte);
                   sout2(readtypeno); i := next2bytes; sout2(i);
                   if i < 0 then sout2(next2bytes);
                   if PackedFlag then sout2(next2bytes);
                   len := nextbyte;
                   end;
             sout(0);
             end;
          9: {FCHAR}
             sout2(next2bytes);
         10: {FARRAY}
             begin
             len := nextbyte; sout(len); sout2(readtypeno);
             for i := 1 to len*13 do sout(nextbyte);
             end;
        otherwise: writeln('*** Bad $A0 Block ***');
        end; {case}
        ltypeno := next2bytes;
        end;
  sout2(0);
  
  { Variables }
  
  len := nextbyte;
  while len <> 0 do begin
        sout(len);
        for i := 1 to len do sout(nextbyte);
        sout2(readtypeno);
        kind := nextbyte; sout(kind);
        case kind mod 16 of
          0,1: sout2(next2bytes);
          2,3: ;
          4:   begin
               sout2(next2bytes);
               len := nextbyte; sout(len);
               for i := 1 to len do sout(nextbyte);
               sout4(next4bytes);
               end;
        end; {case}
        len := nextbyte;
        end;
  sout(0);
  end; {copytvs}
  
  procedure copybpts;
    var i,n: integer; lid: linkid;
  begin
  n := next2bytes; sout2(n);
  i := nextbyte; sout(i);
  case i of
    0: ;
    1: begin sout2(next2bytes); sout4(next4bytes); end;
  end; {case}
  for i := 1 to n do begin
      readlnkid(lid); soutlid(lid);
      sout4(next4bytes); sout4(next4bytes); {Entry/Exit}
      end;
  n := next2bytes; sout2(n);
  for i := 1 to n do sout2(next2bytes);
  end; {copybpts}
  
begin {outsymfile}
sout4(totalcodesize + datasize + bsssize); {Simulated Timedate stamp}
sout4(23); sout4(0); sout4(0);
count := 0; lseg := seglist;
while lseg <> nil do
      begin count := count + 1; lseg := lseg^.nextseg; end;
sout2(count); lseg := seglist;
while lseg <> nil do
      with lseg^ do begin
           for i := 1 to 8 do sout(ord(segname[i]));
           sout4(codesize); sout4(segbaseaddr);
           lseg := nextseg;
           end;
sout2(numentries(nametree));
outentries(nametree);
count := 0; lftndata := ftndatalist;
while lftndata <> nil do
      begin count := count + 1; lftndata := lftndata^.next; end;
sout2(count); lftndata := ftndatalist;
while lftndata <> nil do
      with lftndata^ do begin
           sout2(-1); soutsalfa(name);
           sout4(size); 
           if TextResident
           then sout4(reladdr)
           else
             if AtAbsolute
             then sout4($C0000000 or reladdr)
             else
               if initlist = nil
               then sout4($80000000 or reladdr)
               else sout4($40000000 or reladdr);
           lftndata := next;
           end;
lasttype := 0; lastfile := nil;
lmodlist := vartypelist;
while lmodlist <> nil do begin
      if lmodlist^.modinfile <> lastfile
      then begin
           typebase := lasttype; lastfile := lmodlist^.modinfile;
           lprocbase := lastfile^.lpbase;
           end;
      seekmodule(lmodlist); HalfFlag := FALSE;
      count := nextbyte; l := next3bytes; copytvs;
      lmodlist := lmodlist^.nextmodule;
      end;
sout(255);
lmodlist := bpointlist;
while lmodlist <> nil do begin
      seekmodule(lmodlist); HalfFlag := FALSE;
      lprocbase := lmodlist^.modinfile^.lpbase;
      count := nextbyte; l := next3bytes; copybpts;
      lmodlist := lmodlist^.nextmodule;
      end;
sout2(0);
end; {outsymfile}


