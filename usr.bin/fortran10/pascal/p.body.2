(*****************************************************************************)
(*                                                                           *)
(*                            File: P.BODY.2.TEXT                            *)
(*                                                                           *)
(*           (C) Copyright 1980, 1985 Silicon Valley Software, Inc.          *)
(*                                                                           *)
(*                            All rights reserved.               01-Aug-85   *)
(*                                                                           *)
(*****************************************************************************)


    procedure expression{*fsys: setofsys*};
      var ltoken: symbol; lattr: attr; op,m,subop: integer;
          lo,hi: longint;
    
      procedure simpleexpression(fsys: setofsys);
        var ltoken: symbol; lattr: attr; Signed,Negative,DoubleFlag: Boolean;
            op: integer;
      
        procedure term(fsys: setofsys);
          var ltoken: symbol; lattr: attr; op: integer;
          
          { Should be nested in BUILDSET but max depth of nesting exceeded }
          
          procedure updatesetconst(flb,fub: longint; var fsetcstpart: pn);
            var i,j,lb,ub: integer; lsetval: setvaltype;
          begin
          if (flb < 0) or (fub < 0) or (flb > 2031) or (fub > 2031)
          then error(308)
          else begin
            lb := flb; ub := fub;
            if lb <= ub
            then begin
              if fsetcstpart = nil
              then begin
                new(fsetcstpart,CSTNODE);
                with fsetcstpart^ do begin
                  node := CSTNODE; csttype := nil;
                  cstvalu.maxsetel := 0; new(cstvalu.setvalu);
                  cstvalu.setvalu^.nextset := nil; 
                  cstvalu.setvalu^.setval := [];
                  end;
                end;
              with fsetcstpart^.cstvalu do begin
                if maxsetel < ub then maxsetel := ub;
                lsetval := setvalu;
                for i := 1 to ub div 32 do begin
                  if lsetval^.nextset = nil
                  then begin
                    new(lsetval^.nextset);
                    lsetval^.nextset^.nextset := nil;
                    lsetval^.nextset^.setval := [];
                    end;
                  lsetval := lsetval^.nextset;
                  end;
                for i := lb to ub do begin
                  lsetval := setvalu;
                  for j := 1 to i div 32 do
                    lsetval := lsetval^.nextset;
                  lsetval^.setval := lsetval^.setval + [i mod 32];
                  end;
                end;
              end;
            end;
          end; {updatesetconst}
          
          { Should be nested in FACTOR but max depth of nesting exceeded }
          
          procedure buildset;
            var ExitFlag: Boolean; lpn, settree, setcstpart: pn; 
                lpt, settype: pt;
          begin 
          with gattr do begin
            scan;
            settype := nil; settree := nil; setcstpart := nil;
            if token <> RBRACKSY
            then begin
              ExitFlag := FALSE;
              repeat
                expression(fsys + [COMMASY,COLONSY,RBRACKSY]);
                if settype = nil
                then settype := typtr
                else
                  if not CompTypes(settype,typtr)
                  then error(134);
                makescsize(gattr,2);
                if token = COLONSY
                then begin { Double set element }
                  scan;
                  lpn := treeptr;
                  expression(fsys + [COMMASY,RBRACKSY]);
                  if settype = nil
                  then settype := typtr
                  else
                    if not CompTypes(settype,typtr)
                    then error(134);
                  makescsize(gattr,2);
                  if (lpn <> nil) and (treeptr <> nil)
                  then
                    if (lpn^.node = CSTNODE) and
                       (treeptr^.node = CSTNODE)
                    then begin
                      updatesetconst(lpn^.cstvalu.ivalu,
                                     treeptr^.cstvalu.ivalu,setcstpart);
                      lpn := nil;
                      end
                    else lpn := newbinnode(169{SETR},lpn,treeptr)
                  else lpn := newbinnode(169{SETR},lpn,treeptr);
                  end
                else { Single set element }
                  if treeptr <> nil
                  then
                    if treeptr^.node = CSTNODE
                    then begin
                      updatesetconst(treeptr^.cstvalu.ivalu,
                                     treeptr^.cstvalu.ivalu,setcstpart);
                      lpn := nil;
                      end
                    else lpn := newunnode(168{SSET},treeptr)
                  else lpn := newunnode(168{SSET},treeptr);
                if settree = nil
                then settree := lpn
                else 
                  if lpn <> nil 
                  then settree := newbinnode(160{UNION},settree,lpn);
                if token = COMMASY
                then scan
                else ExitFlag := TRUE;
              until ExitFlag;
              if settype <> nil
              then
                if settype^.form > SUBRANGE
                then error(133)
                else
                  if (settype = realptr) or (settype = doubleptr)
                  then error(164);
              end;
            new(lpt,SETS);
            with lpt^ do begin
              typeno := 0; Marked := FALSE;
              Ftype := FALSE; form := SETS;
              SETOF := settype; bytes := 0; bits := 0;
              end;
            typtr := lpt; 
            if setcstpart = nil
            then
              if settree = nil
              then begin
                   treeptr := newunnode(31{NULLSET}, nil); asize := 1;
                   end
              else begin treeptr := settree; asize := 0; end
            else begin
              setcstpart^.csttype := lpt;
              with lpt^ do begin
                bytes := (setcstpart^.cstvalu.maxsetel div 8) + 1;
                if (bytes > 1) and odd(bytes) then bytes := bytes + 1;
                end;
              if settree = nil
              then begin treeptr := setcstpart; asize := lpt^.bytes; end
              else begin
                   setcstpart := newunnode(170{ADJUST},setcstpart);
                   setcstpart^.unsubop := lpt^.bytes;
                   treeptr := newbinnode(160{UNION},settree,setcstpart);
                   asize := 0;
                   end;
              end;
            if token = RBRACKSY then scan else error(34);
            end;
          end; {buildset}

          function numbytes(fval: longint): integer;
          begin
          if (fval > 127) or (fval < -128)
          then if (fval > 32767) or (fval < -32768)
               then numbytes := 4
               else numbytes := 2
          else numbytes := 1;
          end; {numbytes}
          
          function inttype(fsize: integer): pt;
          begin
          if fsize = 1
          then inttype := sintptr
          else if fsize = 2
               then inttype := intptr
               else inttype := lintptr;
          end; {inttype}
          
          procedure factor(fsys: setofsys);
          var PckdFlag,PckdStorage: Boolean; lpn: pn;  lpt: pt;
                lop: integer;
          begin
          with gattr do begin
            treeptr := nil; PckdFlag := FALSE;
            if not (token in facbegsys)
            then begin skip(27,fsys + facbegsys); typtr := nil; end;
            repeat
              if token in facbegsys
              then begin
                case token of
                  IDENTSY:
                    begin
                    lpn := searchall([VARS,FIELD,FUNC,CONSTS]);
                    scan;
                    case lpn^.class of
                      CONSTS: with lpn^ do begin
                                typtr := idtype;
                                new(treeptr,CSTNODE);
                                treeptr^.node := CSTNODE; 
                                treeptr^.cstvalu := valueof;
                                if CompTypes(idtype,intptr)
                                then begin
                                  asize := numbytes(valueof.ivalu);
                                  treeptr^.csttype := inttype(asize);
                                  end
                                else begin
                                  asize := fullbytes(idtype);
                                  treeptr^.csttype := idtype;
                                  end;
                                end;
                      VARS,
                      FIELD:  selector(fsys,lpn,PckdFlag,PckdStorage);
                      FUNC:   begin
                              call(fsys,lpn);
                              if lpn^.pfdeclkind = STANDARD
                              then lop := 178 {STDFUNC}
                              else lop := 176; {USRFUNC}
                              treeptr := newbinnode(lop,lpn,treeptr);
                              end;
                    end;
                    end;
                  ICONSTSY:
                    begin
                    asize := numbytes(intval); typtr := inttype(asize);
                    new(treeptr,CSTNODE);
                    with treeptr^ do begin
                      node := CSTNODE; csttype := typtr; 
                      cstvalu.ivalu := intval;
                      end;
                    scan;
                    end;
                  RCONSTSY:
                    begin
                    typtr := realptr; asize := 4;
                    new(treeptr,CSTNODE);
                    with treeptr^ do begin
                      node := CSTNODE; csttype := realptr; 
                      cstvalu.dvalu := doubleval;
                      end;
                    scan;
                    end;
                  DCONSTSY:
                    begin
                    typtr := doubleptr; asize := 8;
                    new(treeptr,CSTNODE);
                    with treeptr^ do begin
                      node := CSTNODE; csttype := doubleptr; 
                      cstvalu.dvalu := doubleval;
                      end;
                    scan;
                    end;
                  CCONSTSY:
                    begin
                    typtr := charptr; asize := 2;
                    new(treeptr,CSTNODE);
                    with treeptr^ do begin
                      node := CSTNODE; csttype := charptr; 
                      cstvalu.ivalu := intval;
                      end;
                    scan;
                    end;
                  SCONSTSY:
                    begin
                    if intval > 0
                    then begin
                      new(lpt,SCONST);
                      with lpt^ do begin
                        typeno := 0; Marked := FALSE;
                        Ftype := FALSE; form := SCONST;
                        stringlen := intval; bits := 0;
                        bytes := intval;
                        if (bytes <> 1) and odd(bytes)
                        then bytes := bytes + 1;
                        end;
                      end
                    else lpt := str0ptr;
                    typtr := lpt; asize := lpt^.stringlen;
                    new(treeptr,CSTNODE);
                    with treeptr^ do begin
                      node := CSTNODE; csttype := lpt; 
                      cstvalu.svalu := STRVAL;
                      cstvalu.svalulen := intval;
                      end;
                    scan;
                    end;
                  LPARENSY:
                    begin scan; expression(fsys + [RPARENSY]);
                    if token = RPARENSY then scan else error(32);
                    end;
                  NOTSY:
                    begin scan; factor(fsys);
                    if CompTypes(typtr,boolptr)
                    then begin
                      asize := 1;
                      treeptr := newunnode(110{BOOLNOT},treeptr);
                      end
                    else
                      if CompTypes(typtr,intptr)
                      then begin
                        lop := 0;
                        if asize = 2
                        then lop := 1
                        else if asize > 2 then lop := 2;
                        treeptr := newunnode(89{NOT} + lop,treeptr);
                        end
                      else begin error(132); typtr := nil; end;
                    end;
                  NILSY:
                    begin scan;
                    typtr := nilptr; asize := 4;
                    treeptr := newunnode(23{NIL},nil);
                    end;
                  LBRACKSY: buildset;
                  ATSIGNSY:
                    begin
                    scan;
                    if token = IDENTSY
                    then begin
                      lpn := searchall([VARS,FIELD,FUNC,PROC]);
                      scan;
                      if lpn^.class <= FIELD
                      then begin
                        lpn^.RefParam := TRUE;
                        selector(fsys,lpn,PckdFlag,PckdStorage);
                        if PckdFlag then error(163);
                        treeptr := newunnode(22{ADDR},treeptr);
                        end
                      else begin
                        treeptr := newunnode(22{ADDR},lpn);
                        if lpn^.pfdeclkind = DECLARED
                        then
                          if lpn^.class = PROC
                          then treeptr^.unsubop := 177 {PROC}
                          else treeptr^.unsubop := 176 {FUNC}
                        else error(170);
                        end;
                      typtr := nilptr;
                      end
                    else begin error(29); typtr := nil; end;
                    asize := 4;
                    end;
                end;
                if not (token in fsys)
                then skip(20,fsys + facbegsys);
                end;
            until token in fsys;
            end;
          end; {factor}
          
        begin {term}
        factor(fsys + [DIVSY,STARSY,MODSY,ANDSY,SLASHSY]);
        while token in [DIVSY,STARSY,MODSY,ANDSY,SLASHSY] do
          begin
          lattr := gattr; ltoken := token; scan;
          factor(fsys + [DIVSY,STARSY,MODSY,ANDSY,SLASHSY]);
          if (lattr.typtr <> nil) and (gattr.typtr <> nil)
          then
            with gattr do
              case ltoken of
                ANDSY:   if (CompTypes(lattr.typtr,boolptr) and
                             CompTypes(typtr,boolptr))
                         then begin
                           treeptr := newbinnode(80{AND},
                                                 lattr.treeptr,treeptr);
                           end
                         else
                           if (CompTypes(lattr.typtr,intptr) and
                               CompTypes(typtr,intptr))
                           then begin
                             matchisizes(lattr,gattr); op := 0;
                             if lattr.asize = 2
                             then op := 1
                             else if lattr.asize = 4 then op := 2;
                             treeptr := newbinnode(80{AND} + op,
                                                   lattr.treeptr,treeptr);
                             end
                           else begin error(132); typtr := nil; end;
                DIVSY,
                MODSY:   if CompTypes(lattr.typtr,intptr) and
                            CompTypes(typtr,intptr)
                         then begin
                           minsize2(lattr); minsize2(gattr);
                           matchisizes(lattr,gattr);
                           op := ord(lattr.asize > 2);
                           if ltoken = DIVSY
                           then treeptr := 
                             newbinnode(70{IDIV} + op,lattr.treeptr,treeptr)
                           else treeptr := 
                             newbinnode(72{MOD} + op,lattr.treeptr,treeptr);
                           end
                         else begin error(131); typtr := nil; end;
                SLASHSY: begin
                         maxnumtype(lattr,gattr);
                         if CompTypes(lattr.typtr,intptr) then float(lattr);
                         if CompTypes(typtr,intptr) then float(gattr);
                         if typtr = lattr.typtr
                         then begin
                           if typtr = realptr
                           then op := 118{FDIV4}
                           else
                             if typtr = doubleptr
                             then op := 119{FDIV8}
                             else begin error(131); typtr := nil; end;
                           treeptr := newbinnode(op,lattr.treeptr,treeptr);
                           end
                         else begin error(131); typtr := nil; end;
                         end;
                STARSY:  if CompTypes(lattr.typtr,intptr) and
                            CompTypes(typtr,intptr)
                         then begin
                           minsize2(lattr); minsize2(gattr);
                           matchisizes(lattr,gattr);
                           op := ord(lattr.asize > 2);
                           treeptr := 
                             newbinnode(68{IMUL2} + op,lattr.treeptr,treeptr);
                           end
                         else begin
                           maxnumtype(lattr,gattr);
                           if (lattr.typtr = realptr) and (typtr = realptr)
                           then treeptr :=
                             newbinnode(116{FMUL4},lattr.treeptr,treeptr)
                           else
                             if (lattr.typtr = doubleptr) and
                                (typtr = doubleptr)
                             then treeptr :=
                               newbinnode(117{FMUL8},lattr.treeptr,treeptr)
                             else
                               if CompTypes(typtr,lattr.typtr) and
                                  (typtr^.form = SETS)
                               then begin
                                 matchsetsizes(gattr,lattr);
                                 treeptr :=
                                   newbinnode(162{INTER},lattr.treeptr,treeptr);
                                 treeptr^.binsubop := gattr.asize;
                                 end
                               else begin error(131); typtr := nil; end;
                           end;
              end;
          end;
        end; {term}
        
      begin {simpleexpression}
      Negative := token = MINUSSY;
      Signed := (token = PLUSSY) or Negative;
      if Signed then scan;
      term(fsys + [PLUSSY,MINUSSY,ORSY]);
      if Signed
      then
        if CompTypes(gattr.typtr,intptr)
        then begin
          if Negative
          then
            if gattr.treeptr^.node = CSTNODE
            then gattr.treeptr^.cstvalu.ivalu := -gattr.treeptr^.cstvalu.ivalu
            else begin
              minsize2(gattr); op := ord(gattr.asize > 2);
              gattr.treeptr := newunnode(74{INEG} + op,gattr.treeptr);
              end;
          end
        else begin
          DoubleFlag := gattr.typtr = doubleptr;
          if (gattr.typtr = realptr) or DoubleFlag
          then begin
            if Negative
            then
              if gattr.treeptr^.node = CSTNODE
              then gattr.treeptr^.cstvalu.dvalu :=
                                   -gattr.treeptr^.cstvalu.dvalu
              else gattr.treeptr :=
                     newunnode(134{FNEG4} + ord(DoubleFlag),gattr.treeptr);
            end
          else error(140);
          end;
      while token in [PLUSSY,MINUSSY,ORSY] do
        begin
        ltoken := token; lattr := gattr; scan;
        term(fsys + [PLUSSY,MINUSSY,ORSY]);
        if (lattr.typtr <> nil) and (gattr.typtr <> nil)
        then
          case ltoken of
            MINUSSY,
            PLUSSY:  if CompTypes(lattr.typtr,intptr) and
                        CompTypes(gattr.typtr,intptr)
                     then begin
                       minsize2(lattr); minsize2(gattr);
                       matchisizes(lattr,gattr);
                       if ltoken = PLUSSY
                       then op := 64{IADD2}
                       else op := 66{ISUB2};
                       if lattr.asize > 2 then op := op + 1;
                       gattr.treeptr :=
                         newbinnode(op,lattr.treeptr,gattr.treeptr);
                       end
                     else begin
                       maxnumtype(lattr,gattr);
                       DoubleFlag := (lattr.typtr = doubleptr) and
                                     (gattr.typtr = doubleptr);
                       if DoubleFlag or
                          ((lattr.typtr = realptr) and (gattr.typtr = realptr))
                       then begin
                         if ltoken = PLUSSY
                         then op := 112{FADD4}
                         else op := 114{FSUB4};
                         if DoubleFlag then op := op + 1;
                         gattr.treeptr :=
                            newbinnode(op,lattr.treeptr,gattr.treeptr);
                         end
                       else
                         if CompTypes(lattr.typtr,gattr.typtr) and
                            (lattr.typtr^.form = SETS)
                         then begin
                           matchsetsizes(gattr,lattr);
                           if ltoken = PLUSSY
                           then gattr.treeptr := 
                             newbinnode(160{UNION},lattr.treeptr,gattr.treeptr)
                           else gattr.treeptr :=
                             newbinnode(161{DIFF},lattr.treeptr,gattr.treeptr);
                           gattr.treeptr^.binsubop := gattr.asize;
                           end
                         else begin error(131); gattr.typtr := nil; end;
                       end;
            ORSY:    if (CompTypes(lattr.typtr,boolptr) and
                         CompTypes(gattr.typtr,boolptr))
                     then begin
                       gattr.treeptr := newbinnode(83{OR},
                                             lattr.treeptr,gattr.treeptr);
                       end
                     else
                       if (CompTypes(lattr.typtr,intptr) and
                           CompTypes(gattr.typtr,intptr))
                       then begin
                         matchisizes(lattr,gattr); op := 0;
                         if lattr.asize = 2
                         then op := 1
                         else if lattr.asize = 4 then op := 2;
                         gattr.treeptr := newbinnode(83{OR} + op,
                                               lattr.treeptr,gattr.treeptr);
                         end
                       else begin error(132); gattr.typtr := nil; end;
          end;
        end;
      end; {simpleexpression}
      
    begin {expression}
    simpleexpression(fsys + [LTSY,GTSY,LESY,GESY,EQSY,NESY,INSY]);
    if token in [LTSY,GTSY,LESY,GESY,EQSY,NESY,INSY]
    then begin
      ltoken := token; lattr := gattr; scan;
      simpleexpression(fsys);
      if (lattr.typtr <> nil) and (gattr.typtr <> nil)
      then
        case ltoken of
          LTSY,GTSY,LESY,GESY,EQSY,NESY:
                begin
                if (lattr.typtr^.form <= SUBRANGE) and
                   (gattr.typtr^.form <= SUBRANGE)
                then maxnumtype(lattr,gattr);
                if not CompTypes(lattr.typtr,gattr.typtr)
                then begin
                  if Paoc(lattr.typtr) and (gattr.typtr^.form = SCONST)
                  then begin
                    getbounds(lattr.typtr^.indexedby,lo,hi);
                    if hi - lo + 1 <> gattr.typtr^.stringlen
                    then error(167);
                    gattr.typtr := lattr.typtr;
                    gattr.treeptr^.csttype := lattr.typtr;
                    end
                  else
                    if Paoc(gattr.typtr) and (lattr.typtr^.form = SCONST)
                    then begin
                      getbounds(gattr.typtr^.indexedby,lo,hi);
                      if hi - lo + 1 <> lattr.typtr^.stringlen
                      then error(167);
                      lattr.typtr := gattr.typtr;
                      lattr.treeptr^.csttype := gattr.typtr;
                      end
                    else
                      if ((lattr.typtr^.form = SCONST) or
                          (lattr.typtr^.form = STRINGS)) and
                         ((gattr.typtr = charptr) and
                          (gattr.treeptr^.node = CSTNODE))
                      then chtostring(gattr)
                      else
                        if ((lattr.typtr^.form = SCONST) or
                            (lattr.typtr^.form = STRINGS)) and
                           ((gattr.typtr = charptr) and
                            (gattr.treeptr^.node = CSTNODE))
                        then chtostring(lattr);
                  end;
                if CompTypes(lattr.typtr,gattr.typtr)
                then begin
                  op := 0; m := 1; subop := 0;
                  case gattr.typtr^.form of
                    SCALAR,
                    SUBRANGE: begin
                              if gattr.typtr = realptr
                              then begin op := 122; {FLT8} m := 2; end
                              else
                                if gattr.typtr = doubleptr
                                then begin op := 123; {FLT8} m := 2; end
                                else begin
                                  op := 92{ILT}; m := 3;
                                  if lattr.asize > 1
                                  then if lattr.asize > 2
                                       then op := op + 2
                                       else op := op + 1;
                                  end;
                              end;
                    POINTERS: begin
                              if (ltoken <> EQSY) and (ltoken <> NESY)
                              then error(128);
                              op := 94; m := 3;
                              end;
                    SETS:     begin
                              if (ltoken = LTSY) or (ltoken = GTSY)
                              then error(129);
                              matchsetsizes(gattr,lattr);
                              op := 162; subop := gattr.asize;
                              end;
                    ARRAYS:   begin
                              if not StringType(gattr.typtr)
                              then error(131);
                              getbounds(gattr.typtr^.indexedby,lo,hi);
                              op := 150 {PACLT}; subop := hi;
                              if hi > 255 then error(309);
                              end;
                    RECORDS:  error(131);
                    FILES:    error(130);
                    SCONST,
                    STRINGS:  op := 144 {STRLT};
                  end;
                  gattr.treeptr := 
                    newbinnode(op + (ord(ltoken) - ord(LTSY))*m,
                      lattr.treeptr,gattr.treeptr);
                  gattr.treeptr^.binsubop := subop;
                  gattr.typtr := boolptr; gattr.asize := 1;
                  end
                else begin error(144); gattr.typtr := nil; end;
                end;
          INSY: begin
                if gattr.typtr^.form = SETS
                then
                  if CompTypes(lattr.typtr,gattr.typtr^.setof)
                  then begin
                    makescsize(lattr,2);
                    gattr.treeptr :=
                      newbinnode(163{IN},lattr.treeptr,gattr.treeptr);
                    gattr.treeptr^.binsubop := gattr.asize;
                    gattr.typtr := boolptr; gattr.asize := 1;
                    end
                  else begin error(127); gattr.typtr := nil; end
                else begin error(131); gattr.typtr := nil; end;
                end;
        end
      else gattr.typtr := nil;
      end;
    if errors = 0 then gattr.treeptr := fold(gattr.treeptr);
    end; {expression}
  

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          