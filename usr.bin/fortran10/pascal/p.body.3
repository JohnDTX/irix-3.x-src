(*****************************************************************************)
(*                                                                           *)
(*                            File: P.BODY.3.TEXT                            *)
(*                                                                           *)
(*           (C) Copyright 1980, 1985 Silicon Valley Software, Inc.          *)
(*                                                                           *)
(*                            All rights reserved.               08-Oct-85   *)
(*                                                                           *)
(*****************************************************************************)


    function StringAss(totype: pt; var fattr: attr): Boolean;
      var StringFlag: Boolean; min,max,lsize: longint;
    begin
    StringFlag := FALSE;
    if (totype <> nil) and (fattr.typtr <> nil)
    then begin
      if totype^.form = ARRAYS
      then begin
        getbounds(totype^.indexedby,min,lsize);
        if Paoc(totype)
        then
          if fattr.typtr^.form = ARRAYS
          then begin
            getbounds(fattr.typtr^.indexedby,min,max);
            if lsize <> max then error(167);
            StringFlag := TRUE;
            end
          else
            if fattr.typtr^.form = SCONST
            then begin
              if fattr.typtr^.stringlen <> lsize then error(167);
              fattr.treeptr^.csttype := totype; StringFlag := TRUE;
              end;
        end { form = ARRAYS }
      else
        if totype^.form = STRINGS
        then begin
          if (fattr.typtr = charptr) and (fattr.treeptr <> nil)
          then begin
            if fattr.treeptr^.node = CSTNODE
            then begin
              StringFlag := TRUE; chtostring(fattr);
              end;
            end
          else
            if fattr.typtr^.form = STRINGS
            then begin
              if RangeFlag
              then begin
                fattr.treeptr := newbinnode(46{RCHECK},nil,fattr.treeptr);
                fattr.treeptr^.leftpt := totype;
                fattr.treeptr^.binsubop := 0;
                end;
              StringFlag := TRUE;
              end
            else
              if fattr.typtr^.form = SCONST
              then begin
                StringFlag := TRUE;
                if fattr.typtr^.stringlen > totype^.stringlen then error(168);
                end;
          end;
      end; { <> nil }
    StringAss := StringFlag;
    end; {StringAss}
    
    procedure fixfltass(var fromattr: attr; totyptr: pt);
    begin
    if totyptr = realptr
    then begin
      if CompTypes(fromattr.typtr,intptr)
      then float(fromattr)
      else
        if fromattr.typtr = doubleptr
        then makefsize(fromattr,4);
      end
    else
      if totyptr = doubleptr
      then begin
        if CompTypes(fromattr.typtr,intptr)
        then dfloat(fromattr)
        else
          if fromattr.typtr = realptr
          then makefsize(fromattr,8);
        end;
    end; {fixfltass}
    
    procedure call{*fsys: setofsys; fpn: pn*};
    
      procedure variable(fsys: setofsys; NotRefParm: Boolean);
        var lpn: pn; PckdFlag,PckdStorage: Boolean;
      begin
      if token = IDENTSY
      then begin
        lpn := searchall([VARS,FIELD]); scan;
        end
      else begin error(29); lpn := uvarptr; end;
      selector(fsys,lpn,PckdFlag,PckdStorage);
      if not NotRefParm
      then
        if gattr.treeptr <> nil
        then
          with gattr.treeptr^ do
            if node = IDENTNODE
            then
              if class = VARS then RefParam := TRUE;
      if PckdFlag then error(165);
      end; {variable}
      
      function IsConsTree(fpn: pn): Boolean;
      begin
      if fpn <> nil
      then IsConsTree := fpn^.node = CSTNODE
      else IsConsTree := FALSE;
      end; {IsConsTree}
      
      function RealString(var fattr: attr): Boolean;
        var lpt: pt;
      begin
      lpt := fattr.typtr;
      if lpt <> nil
      then
        if (lpt^.form = STRINGS) or (lpt^.form = SCONST)
        then RealString := TRUE
        else
          if (lpt = charptr) and IsConsTree(fattr.treeptr)
          then begin
            RealString := TRUE; chtostring(fattr);
            end
          else RealString := FALSE
      else RealString := TRUE;
      end; {RealString}
      
      procedure callnonstandard;
        var formarglist,actarglist,lpn: pn; lvkind: accesskind;
            lsize,llev: integer; NormalParam: Boolean;
             lpt: pt; lvalu: valu;
        
        function PListError(actargs,formargs: pn): Boolean;
        begin
        PListError := FALSE;
        while (actargs <> nil) and (formargs <> nil) do
          begin
          if actargs^.class <> formargs^.class
          then PListError := TRUE
          else
            if actargs^.class = VARS
            then begin
              if (actargs^.idtype <> formargs^.idtype) or
                 (actargs^.vkind <> formargs^.vkind)
              then PListError := TRUE;
              end
            else begin { actargs^.class = FUNC or PROC }
              if PListError(actargs^.pfarglist,formargs^.pfarglist)
              then PListError := TRUE;
              if actargs^.class = FUNC
              then
                if actargs^.idtype <> formargs^.idtype
                then PListError := TRUE;
              end;
          actargs := actargs^.next; formargs := formargs^.next;
          end;
        if (actargs <> nil) or (formargs <> nil)
        then PListError := TRUE;
        end; {PListError}
        
      begin {callnonstandard}
      llev := fpn^.pflev;
      if (llev > 1) and (llev <= level)
      then uplevref[llev] := uplevref[llev] + 1;
      formarglist := fpn^.pfarglist; actarglist := nil;
      if token = LPARENSY
      then begin
        repeat
          scan;
          if formarglist <> nil
          then begin
            NormalParam := formarglist^.class = VARS;
            if NormalParam
            then lvkind := formarglist^.vkind;
            end
          else begin lvkind := DRCT; NormalParam := TRUE; end;
          if NormalParam
          then
            if lvkind = DRCT
            then expression(fsys)
            else begin
              if RefValues
              then
                if (token = ICONSTSY) or (token = RCONSTSY) or
                   (token = DCONSTSY) or (token = CCONSTSY) or
                   (token = PLUSSY) or (token = MINUSSY)
                then lvkind := DRCT
                else begin
                  PrintErrors := FALSE; lpn := searchall([CONSTS]);
                  PrintErrors := TRUE;
                  if lpn <> nil
                  then
                    if lpn^.class = CONSTS
                    then
                      if lpn^.idtype <> nil
                      then
                        if lpn^.idtype^.form <= SUBRANGE
                        then lvkind := DRCT;
                  end;
              if lvkind = DRCT
              then begin
                constant(fsys,lvalu,lpt);
                new(lpn,CSTNODE);
                with lpn^ do begin
                  node := CSTNODE; csttype := lpt; cstvalu := lvalu;
                  end;
                gattr.typtr := lpt; gattr.treeptr := lpn;
                gattr.asize := fullbytes(lpt);
                end
              else variable(fsys,FALSE);
              end
          else
            if token = IDENTSY
            then begin
              lpn := searchall([PROC,FUNC]);
              if lpn^.pfdeclkind = STANDARD
              then error(154)
              else
                if lpn^.CCall
                then error(177)
                else begin
                  if PListError(lpn^.pfarglist,formarglist^.pfarglist)
                  then error(159);
                  end;
              if lpn^.class = FUNC
              then
                if lpn^.idtype <> formarglist^.idtype
                then error(126);
              scan; gattr.treeptr := lpn;
              end
            else skip(29,fsys);
          if formarglist <> nil
          then
            with formarglist^ do begin
              if (gattr.typtr <> nil) and (idtype <> nil) and NormalParam
              then
                if lvkind = INDRCT
                then begin
                  if gattr.typtr <> idtype then error(125);
                  end
                else { lvkind = DRCT }
                  begin
                  fixfltass(gattr,idtype);
                  if StringAss(idtype,gattr) or CompTypes(gattr.typtr,idtype)
                  then begin
                    if idtype^.FType then error(141);
                    if idtype^.form <= SUBRANGE
                    then makescsize(gattr,fullbytes(idtype))
                    else if idtype^.form = SETS
                         then makesetsize(gattr,fullbytes(idtype));
                    end
                  else error(144);
                  end;
              formarglist := next;
              end
          else error(124);
          newarg(actarglist,0);
        until token <> COMMASY;
        rightparen;
        end;
      if formarglist <> nil then error(124);
      gattr.treeptr := actarglist; gattr.typtr := fpn^.idtype;
      if fpn^.class = FUNC
      then gattr.asize := fullbytes(gattr.typtr)
      else fpn^.refcount := fpn^.refcount + 1;
      end; {callnonstandard}
      
      procedure callstdproc;
      
        procedure xnewdispose(fkey: integer);
          var actarglist,lpn: pn; tagpt,lpt: pt; FoundIt: Boolean;
            lintval: pintlist; n: integer; lvalu: valu;
        begin
        actarglist := nil; tagpt := nil; leftparen;
        variable(fsys,fkey = 1 {NEW}); newarg(actarglist,0);
        if gattr.typtr <> nil
        then
          if gattr.typtr^.form <> POINTERS
          then error(123)
          else
            if gattr.typtr^.pointerto <> nil
            then
              begin
              new(lpn,CSTNODE);
              with lpn^ do begin
                node := CSTNODE; csttype := lintptr;
                cstvalu.ivalu := fullbytes(gattr.typtr^.pointerto);
                end;
              gattr.treeptr := lpn; newarg(actarglist,0);
              if gattr.typtr^.pointerto^.form = RECORDS
              then tagpt := gattr.typtr^.pointerto^.varpart;
              end;
        while token = COMMASY do
          begin
          scan; constant(fsys,lvalu,lpt);
          if tagpt <> nil
          then begin
            if tagpt^.tagname <> nil
            then
              if not CompTypes(tagpt^.tagname^.idtype,lpt)
              then error(123);
            n := lvalu.ivalu; FoundIt := FALSE; tagpt := tagpt^.variants;
            while (tagpt <> nil) and not FoundIt do begin
              lintval := tagpt^.varvalus;
              while (lintval <> nil) and not FoundIt do
                if lintval^.intval = n
                then FoundIt := TRUE
                else lintval := lintval^.nextint;
              if FoundIt
              then begin
                lpn^.cstvalu.ivalu :=  fullbytes(tagpt);
                tagpt := tagpt^.subvar;
                end
              else tagpt := tagpt^.nextvar;
              end;
            end
          else error(151);
          end;
        rightparen; gattr.treeptr := actarglist;
        end; {xnewdispose}
        
        procedure markrelease;
        begin
        leftparen; variable(fsys,FALSE);
        gattr.treeptr := newbinnode(0{???ARGS},gattr.treeptr,nil);
        if gattr.typtr <> nil
        then
          if gattr.typtr^.form <> POINTERS
          then error(123);
        rightparen;
        end; {markrelease}
        
        procedure resetwrite;
          var arglist: pn; subop,bufval: integer;
        begin
        arglist := nil; leftparen;
        variable(fsys,FALSE);
        newarg(arglist,ord(IOFlag));
        if gattr.typtr <> nil
        then
          if gattr.typtr^.form = FILES
          then begin
            if gattr.typtr = interptr
            then subop := 0
            else
              if gattr.typtr^.fileof = nil
              then subop := -1
              else
                if (gattr.typtr = textptr) or
                   (gattr.typtr^.PckdFile and (gattr.typtr^.fileof = charptr))
                then subop := -2
                else subop := fullbytes(gattr.typtr^.fileof);
            arglist^.binsubop := subop;
            end
          else error(175);
        comma; expression(fsys); newarg(arglist,0);
        if gattr.typtr <> nil
        then if not RealString(gattr) then error(123);
        if token = COMMASY
        then begin
          with gattr do begin
            typtr := intptr; asize := 2; new(treeptr,CSTNODE);
            treeptr^.node := CSTNODE; treeptr^.csttype := intptr;
            end;
          comma; bufval := 0;
          if token = IDENTSY
          then begin
            if ident.s = 'BUFFERED'
            then bufval := 1
            else
              if ident.s = 'UNBUFFERED'
              then bufval := 0
              else error(173);
            scan;
            end
          else error(173);
          gattr.treeptr^.cstvalu.ivalu := bufval;
          newarg(arglist,0);
          end;
        rightparen; gattr.treeptr := arglist;
        end; {resetwrite}
        
        procedure xread(fkey: integer);
          var actarglist,filearg,lpn: pn; TextFlag,DoneFlag: Boolean;
              filetype: pt; op,subop,lsize: integer; lo,hi: longint;
        begin
        actarglist := nil; filearg := nil; TextFlag := TRUE; DoneFlag := FALSE;
        if token = LPARENSY
        then begin
          scan; variable(fsys,FALSE);
          if gattr.typtr <> nil
          then
            with gattr.typtr^ do
              if form = FILES
              then begin
                filetype := fileof;
                TextFlag := (fileof = charptr) and PckdFile;
                newarg(filearg,ord(IOFlag));
                if token = COMMASY
                then begin scan; variable(fsys,FALSE); end
                else DoneFlag := TRUE;
                end;
          while not DoneFlag do
            begin
            if TextFlag
            then begin
                   if CompTypes(gattr.typtr,intptr)
                   then begin op := 1; lsize := fullbytes(gattr.typtr);
                        if lsize = 1
                        then subop := 32 {ASS1}
                        else if lsize = 2
                             then subop := 33 {ASS2}
                             else subop := 34; {ASS4}
                        end
              else if gattr.typtr = realptr
                   then op := 2
              else if gattr.typtr = doubleptr
                   then op := 3
              else if CompTypes(gattr.typtr,charptr)
                   then begin op := 0; subop := 33; {ASS2} end
              else if RealString(gattr)
                   then begin op := 4; subop := gattr.typtr^.stringlen; end
              else if paoc(gattr.typtr)
                   then begin
                        getbounds(gattr.typtr^.indexedby,lo,hi);
                        op := 5; subop := hi;
                        end
              else error(148);
              end
            else begin
              if gattr.typtr <> filetype
              then error(148);
              op := 6; subop := fullbytes(gattr.typtr);
              end;
            if IOFlag then op := op + 50;
            newarg(actarglist,op);
            lpn := actarglist;
            while lpn^.rightarg <> nil do
              lpn := lpn^.rightarg;
            lpn^.binsubop := subop;
            if token = COMMASY
            then begin scan; variable(fsys,FALSE); end
            else DoneFlag := TRUE;
            end;
          rightparen;
          end;
        if (fkey = 9) { READLN } and not TextFlag then error(148);
        if (fkey = 8) { READ } and (actarglist = nil) then error(148);
        if filearg = nil
        then filearg := newbinnode(ord(IOFlag),inputptr,nil);
        filearg^.rightarg := actarglist; gattr.treeptr := filearg;
        end; {xread}
        
        procedure xwrite(fkey: integer);
          var actarglist,filearg,lpn: pn; TextFlag,DoneFlag,ColonFlag: Boolean;
            filetype: pt; lattr,mattr: attr; op,lsize: integer;
            lsys: setofsys; lo,hi: longint;
        begin
        actarglist := nil; filearg := nil; TextFlag := TRUE; DoneFlag := FALSE;
        lsys := fsys + [RPARENSY,COMMASY,COLONSY,IDENTSY];
        if token = LPARENSY
        then begin
          scan; expression(lsys);
          if gattr.typtr <> nil
          then
            with gattr.typtr^ do
              if form = FILES
              then begin
                filetype := fileof;
                TextFlag := (fileof = charptr) and PckdFile;
                newarg(filearg,ord(IOFlag));
                if token = COMMASY
                then begin
                  scan; expression(lsys);
                  end
                else DoneFlag := TRUE;
                end;
          while not DoneFlag do
            begin
            if TextFlag
            then begin
                   if CompTypes(gattr.typtr,intptr)
                   then
                     if gattr.asize = 4
                     then op := 2
                     else begin op := 7; makescsize(gattr,2); end
              else if CompTypes(gattr.typtr,charptr)
                   then begin op := 0; makescsize(gattr,1); end
              else if CompTypes(gattr.typtr,boolptr)
                   then begin op := 1; makescsize(gattr,1); end
              else if gattr.typtr = realptr then op := 3
              else if gattr.typtr = doubleptr then op := 5
              else if RealString(gattr) then op := 9
              else if paoc(gattr.typtr)
                   then begin
                     op := 10; new(lpn,CSTNODE);
                     with lpn^ do begin
                       node := CSTNODE; csttype := intptr;
                       getbounds(gattr.typtr^.indexedby,lo,hi);
                       cstvalu.ivalu := hi;
                       end;
                     gattr.treeptr := newbinnode(0{COLON},gattr.treeptr,lpn);
                     end
              else if gattr.typtr^.form = POINTERS then op := 8
              else error(123);
              mattr := gattr; ColonFlag := FALSE;
              if token = COLONSY
              then begin
                lattr := gattr; scan;
                expression(lsys);
                if not CompTypes(gattr.typtr,intptr)
                then error(123)
                else makescsize(gattr,2);
                lattr.treeptr :=
                      newbinnode(0{COLON},lattr.treeptr,gattr.treeptr);
                ColonFlag := TRUE; lpn := lattr.treeptr;
                if token = COLONSY
                then begin
                  if (op <> 3) and (op <> 5) then error(121);
                  op := op + 1; scan; expression(lsys);
                  if not CompTypes(gattr.typtr,intptr)
                  then error(123)
                  else makescsize(gattr,2);
                  lattr.treeptr :=
                        newbinnode(0{COLON},lattr.treeptr,gattr.treeptr);
                  end;
                gattr := lattr;
                end;
              if (token = IDENTSY) and (ident.s = 'HEX')
              then begin
                if (op = 2) or (op = 7)
                then begin
                  if op = 7 then makescsize(mattr,4);
                  if ColonFlag
                  then lpn^.leftarg := mattr.treeptr
                  else gattr := mattr;
                  op := 8;
                  end
                else error(38);
                scan;
                end;
              if IOFlag then op := op + 50;
              newarg(actarglist,op);
              end
            else { not TextFlag }
              begin
              lsize := fullbytes(filetype);
              if CompTypes(gattr.typtr,filetype)
              then begin
                if filetype^.form <= SUBRANGE
                then makescsize(gattr,lsize);
                end
              else error(123);
              if IOFlag then op := 61 else op := 11;
              newarg(actarglist,op);
              lpn := actarglist;
              while lpn^.rightarg <> nil do lpn := lpn^.rightarg;
              lpn^.binsubop := lsize;
              end;
            if token = COMMASY
            then begin
              scan; expression(lsys);
              end
            else DoneFlag := TRUE;
            end;
          rightparen;
          end;
        if (fkey = 11) { WRITELN } and not TextFlag then error(123);
        if (fkey = 10) { WRITE } and (actarglist = nil) then error(123);
        if filearg = nil
        then filearg := newbinnode(ord(IOFlag),outputptr,nil);
        filearg^.rightarg := actarglist; gattr.treeptr := filearg;
        end; {xwrite}
        
        procedure xclose;
          var arglist,lpn: pn; n: integer;
        begin
        arglist := nil; n := 0; leftparen;
        variable(fsys,FALSE); newarg(arglist,ord(IOFlag));
        if gattr.typtr <> nil
        then
          if gattr.typtr^.form <> FILES
          then error(175);
        if token = COMMASY
        then begin
          scan;
          if token = IDENTSY
          then begin
            if ident.s = 'NORMAL'
            then n := 0
            else
              if ident.s = 'LOCK'
              then n := 1
              else
                if ident.s = 'PURGE'
                then n := 2
                else
                  if ident.s = 'CRUNCH'
                  then n := 3
                  else error(174);
            scan;
            end
          else error(174);
          end;
        new(lpn,CSTNODE);
        with lpn^ do begin
          node := CSTNODE; csttype := intptr; cstvalu.ivalu := n;
          end;
        gattr.treeptr := lpn; newarg(arglist,0);
        rightparen; gattr.treeptr := arglist;
        end; {xclose}
        
        procedure getputpage(fkey: integer);
        begin
        leftparen; variable(fsys,FALSE);
        gattr.treeptr := newbinnode(ord(IOFlag),gattr.treeptr,nil);
        if gattr.typtr <> nil
        then
          with gattr.typtr^ do
            if form <> FILES
            then error(175)
            else
              if fkey = 12 { PAGE }
              then
                if (fileof <> charptr) or not PckdFile
                then error(123);
        rightparen;
        end; {getputpage}
        
        procedure packunpack(fkey: integer);
        begin
        error(306);
        if token = LPARENSY
        then begin
          repeat
            scan;
            expression(fsys);
          until token <> COMMASY;
          rightparen;
          end;
        end; {packunpack}
        
        procedure insrtdel(fkey: integer);
          var arglist: pn;
        begin
        arglist := nil; leftparen;
        if fkey = 17 { INSERT }
        then begin
          expression(fsys); newarg(arglist,0);
          if gattr.typtr <> nil
          then
            if not RealString(gattr) then error(123);
          comma;
          end;
        variable(fsys,FALSE); newarg(arglist,0);
        if gattr.typtr <> nil
        then
          if gattr.typtr^.form <> STRINGS
          then error(123);
        comma; expression(fsys);
        if not CompTypes(gattr.typtr,intptr) then error(123);
        makescsize(gattr,2); newarg(arglist,0);
        if fkey = 16 { DELETE }
        then begin
          comma; expression(fsys);
          if not CompTypes(gattr.typtr,intptr) then error(123);
          makescsize(gattr,2); newarg(arglist,0);
          end;
        rightparen; gattr.treeptr := arglist;
        end; {insrtdel}
        
        procedure unitrws(fkey: integer);
          var arglist: pn; count: integer;
        begin
        arglist := nil; leftparen;
        expression(fsys);
        makescsize(gattr,2); newarg(arglist,0);
        if not CompTypes(gattr.typtr,intptr) then error(123);
        comma; variable(fsys,FALSE); newarg(arglist,0);
        count := 0;
        while token = COMMASY do begin
          scan; count := count + 1;
          expression(fsys);
          if count <= 2 then makescsize(gattr,4) else makescsize(gattr,2);
          newarg(arglist,0);
          if not CompTypes(gattr.typtr,intptr) then error(123);
          end;
        if (count = 0) or (count > 3) or
           ((count > 1) and (fkey = 28 {UNITSTATUS}))
        then error(124);
        rightparen; gattr.treeptr := arglist;
        end; {unitrws}
        
        procedure xseek;
          var arglist: pn;
        begin
        arglist := nil; leftparen;
        variable(fsys,FALSE); newarg(arglist,0);
        if gattr.typtr <> nil
        then if gattr.typtr^.form <> FILES then error(175);
        comma; expression(fsys);
        makescsize(gattr,4); newarg(arglist,0);
        if not CompTypes(gattr.typtr,intptr) then error(123);
        rightparen; gattr.treeptr := arglist;
        end; {xseek}
        
        procedure movelr;
          var arglist: pn;
        begin
        arglist := nil;
        leftparen; variable(fsys,FALSE); newarg(arglist,0);
        comma; variable(fsys,FALSE); newarg(arglist,0);
        comma; expression(fsys);
        makescsize(gattr,2); newarg(arglist,0);
        if not CompTypes(gattr.typtr,intptr) then error(123);
        rightparen; gattr.treeptr := arglist;
        end; {movelr}
        
        procedure xfill;
          var arglist: pn;
        begin
        arglist := nil; leftparen;
        variable(fsys,FALSE); newarg(arglist,0);
        
   (*-->if gattr.typtr <> nil
        then
          with gattr.typtr^ do
            if form = ARRAYS
            then begin
              if (arrayof <> charptr) or not PckdArr then error(123);
              end
            else if gattr.typtr <> charptr then error(123);<--*)
        
        comma; expression(fsys);
        makescsize(gattr,2); newarg(arglist,0);
        if not CompTypes(gattr.typtr,intptr) then error(123);
        comma; expression(fsys);
        makescsize(gattr,2); newarg(arglist,0);
        if not CompTypes(gattr.typtr,charptr) then error(123);
        rightparen; gattr.treeptr := arglist;
        end; {xfill}
        
        procedure uclear;
          var arglist: pn;
        begin
        arglist := nil; leftparen;
        expression(fsys);
        makescsize(gattr,2); newarg(arglist,0);
        if not CompTypes(gattr.typtr,intptr) then error(123);
        rightparen; gattr.treeptr := arglist;
        end; {uclear}
        
        procedure xgotoxy;
          var arglist: pn;
        begin
        arglist := nil;
        leftparen; expression(fsys);
        makescsize(gattr,2); newarg(arglist,0);
        if not CompTypes(gattr.typtr,intptr) then error(123);
        comma; expression(fsys);
        makescsize(gattr,2); newarg(arglist,0);
        if not CompTypes(gattr.typtr,intptr) then error(123);
        rightparen; gattr.treeptr := arglist;
        end; {xgotoxy}
        
        procedure xexit;
          label 1;
          var arglist,lpn: pn; i: integer;
        begin
        leftparen; arglist := nil;
        if token = IDENTSY
        then begin
          lpn := searchall([PROC,FUNC]); scan;
          arglist := newbinnode(0,lpn,nil);
          for i := top downto 1 do
            with display[i] do
              if occur = BLK
              then if lpn = rootlink
                then goto 1;
          error(176);
       1: end
        else error(29);
        rightparen; gattr.treeptr := arglist;
        end; {xexit}
        
        procedure xhalt;
          var arglist: pn;
        begin
        arglist := nil;
        if token = LPARENSY
        then begin
          scan; expression(fsys);
          makescsize(gattr,2); newarg(arglist,0);
          if not CompTypes(gattr.typtr,intptr) then error(123);
          rightparen;
          end;
        gattr.treeptr := arglist;
        end; {xhalt}
        
      begin {callstdproc}
      with fpn^ do
        case key of
          1: { NEW      } xnewdispose(key);
          2, { MARK     }
          3: { RELEASE  } markrelease;
          4, { GET      }
          5: { PUT      } getputpage(key);
          6, { RESET    }
          7: { REWRITE  } resetwrite;
          8, { READ     }
          9: { READLN   } xread(key);
         10, { WRITE    }
         11: { WRITELN  } xwrite(key);
         12: { PAGE     } getputpage(key);
         13, { PACK     }
         14: { UNPACK   } packunpack(key);
         15: { CLOSE    } xclose;
         16, { DELETE   }
         17: { INSERT   } insrtdel(key);
         18, { UNITREAD }
         19: { UNITWRIT } unitrws(key);
         20: { SEEK     } xseek;
         21: { HALT     } xhalt;
         22, { MOVELEFT }
         23: { MOVERIGH } movelr;
         24: { FILLCHAR } xfill;
         25: { UNITCLEA } uclear;
         26: { GOTOXY   } xgotoxy;
         27: { DISPOSE  } xnewdispose(key);
         28: { UNITSTAT } unitrws(key);
         29: { EXIT     } xexit;
        end
      end; {callstdproc}
      

                 