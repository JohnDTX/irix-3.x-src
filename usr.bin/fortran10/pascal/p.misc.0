(*****************************************************************************)
(*                                                                           *)
(*                            File: P.MISC.0.TEXT                            *)
(*                                                                           *)
(*           (C) Copyright 1980, 1985 Silicon Valley Software, Inc.          *)
(*                                                                           *)
(*                            All rights reserved.               10-May-85   *)
(*                                                                           *)
(*****************************************************************************)


function idEQident(fid: identrec): Boolean;
  var i,n: integer;
begin
n := length(ident.s);
if (n = fid.len) and (fid.a = ident.a4)
then if n <= 8
     then begin
          for i := 5 to n do
              if fid.all[i] <> ident.s[i]
              then begin idEQident := FALSE; exit(idEQident); end;
          idEQident := TRUE;
          end
     else begin
          for i := 5 to n do
              if fid.tail^.a[i-4] <> ident.s[i]
              then begin idEQident := FALSE; exit(idEQident); end;
          idEQident := TRUE;
          end
else idEQident := FALSE;
end; {idEQident}

function idLTident(fid: identrec): Boolean;
  var i,n,minn: integer;
begin
n := length(ident.s);
if n < fid.len then minn := n else minn := fid.len;
if fid.a < ident.a4
then idLTident := TRUE
else if fid.a > ident.a4
     then idLTident := FALSE
     else if fid.len <= 8
          then begin
               for i := 5 to minn do
                   if fid.all[i] < ident.s[i]
                   then begin idLTident := TRUE; exit(idLTident); end
                   else if fid.all[i] > ident.s[i]
                        then begin idLTident := FALSE; exit(idLTident); end;
               end
          else begin
               for i := 5 to minn do
                   if fid.tail^.a[i-4] < ident.s[i]
                   then begin idLTident := TRUE; exit(idLTident); end
                   else if fid.tail^.a[i-4] > ident.s[i]
                        then begin idLTident := FALSE; exit(idLTident); end;
               end;
idLTident := fid.len < n;
end; {idLTident}

function idEQid(aid,bid: identrec): Boolean;
begin
if aid.len = bid.len
then if aid.a = bid.a
     then if aid.len <= 8
          then idEQid := aid.b = bid.b
          else case (aid.len-1) div 4 of
                 1: idEQid := aid.tail^.a4 = bid.tail^.a4;
                 2: idEQid := aid.tail^.a8 = bid.tail^.a8;
                 3: idEQid := aid.tail^.a12 = bid.tail^.a12;
                 4: idEQid := aid.tail^.a16 = bid.tail^.a16;
                 5: idEQid := aid.tail^.a20 = bid.tail^.a20;
                 6: idEQid := aid.tail^.a24 = bid.tail^.a24;
               otherwise:
                    idEQid := aid.tail^.a = bid.tail^.a;
               end {case}
     else idEQid := FALSE
else idEQid := FALSE;
end; {idEQid}

function idLTid(aid,bid: identrec): Boolean;
begin
if aid.a < bid.a
then idLTid := TRUE
else if aid.a = bid.a
     then if aid.len <= 8
          then if bid.len <= 8
               then idLTid := aid.b < bid.b
               else idLTid := aid.b <= bid.tail^.a4
          else if bid.len <= 8
               then idLTid := aid.tail^.a4 < bid.b
               else if aid.len < bid.len
                    then case (aid.len-1) div 4 of
                           2: idLTid := aid.tail^.a8 <= bid.tail^.a8;
                           3: idLTid := aid.tail^.a12 <= bid.tail^.a12;
                           4: idLTid := aid.tail^.a16 <= bid.tail^.a16;
                           5: idLTid := aid.tail^.a20 <= bid.tail^.a20;
                           6: idLTid := aid.tail^.a24 <= bid.tail^.a24;
                         otherwise:
                              idLTid := aid.tail^.a <= bid.tail^.a;
                         end {case}
                    else case (bid.len-1) div 4 of
                           2: idLTid := aid.tail^.a8 < bid.tail^.a8;
                           3: idLTid := aid.tail^.a12 < bid.tail^.a12;
                           4: idLTid := aid.tail^.a16 < bid.tail^.a16;
                           5: idLTid := aid.tail^.a20 < bid.tail^.a20;
                           6: idLTid := aid.tail^.a24 < bid.tail^.a24;
                         otherwise:
                              idLTid := aid.tail^.a < bid.tail^.a;
                         end {case}
     else idLTid := FALSE;
end; {idLTid}

procedure makalfaid(var fid: identrec; fname: alfa8);
  var i: integer;
begin
i := 8; while fname[i] = ' ' do i := i - 1;
fid.all := fname; fid.len := i;
end; {makalfaid}

procedure makidalfa(var fname: alfa8; fid: identrec);
  var i: integer;
begin
if fid.len > 8
then begin
     for i := 1 to 4 do fname[i] := fid.a[i];
     for i := 5 to 8 do fname[i] := fid.tail^.a[i-4];
     end
else fname := fid.all;
end; {makidalfa}

procedure makname(fpn: pn; fstr: idstring);
  var i,k,l: integer;
begin
with fpn^.name do begin
     l := length(fstr); len := l;
     if l <= 8
     then begin
          all := '        ';
          for i := 1 to l do
              all[i] := fstr[i];
          end
     else begin
          case l of
            9,10,11,12:  begin new(tail,2); k := 8; end;
            13,14,15,16: begin new(tail,3); k := 12; end;
            17,18,19,20: begin new(tail,4); k := 16; end;
            21,22,23,24: begin new(tail,5); k := 20; end;
            25,26,27,28: begin new(tail,6); k := 24; end;
            29,30,31:    begin new(tail,7); k := 28; end;
          end; {case}
          for i := 1 to 4 do a[i] := fstr[i];
          for i := 5 to l do tail^.a[i-4] := fstr[i];
          for i := l-3 to k do tail^.a[i] := ' ';
          end;
     end;
end; {makname}

procedure makidstr(var fname: idstring; fid: identrec);
  var i: integer;
begin
if fid.len > 8
then begin
     for i := 1 to 4 do fname[i] := fid.a[i];
     for i := 5 to fid.len do fname[i] := fid.tail^.a[i-4];
     end
else for i := 1 to fid.len do fname[i] := fid.all[i];
fname[0] := chr(fid.len);
end; {makidstr}

procedure copyident(fpn: pn);
  var p: ppaoc; i,k,l: integer;
begin
fpn^.name.a := ident.a4; l := length(ident.s); fpn^.name.len := l;
if l <= 8
then begin
     fpn^.name.b := '    ';
     for i := 5 to l do
         fpn^.name.all[i] := ident.s[i];
     end
else begin
     case l of
       9,10,11,12:  begin new(p,2); k := 8; end;
       13,14,15,16: begin new(p,3); k := 12; end;
       17,18,19,20: begin new(p,4); k := 16; end;
       21,22,23,24: begin new(p,5); k := 20; end;
       25,26,27,28: begin new(p,6); k := 24; end;
       29,30,31:    begin new(p,7); k := 28; end;
     end; {case}
     for i := 5 to l do p^.a[i-4] := ident.s[i];
     for i := l-3 to k do p^.a[i] := ' ';
     fpn^.name.tail := p;
     end;
end; {copyident}

function searchlocal(ftree: pn): pn;
  label 1;
  var lpn: pn;
begin
lpn := ftree;
while lpn <> nil do
  with lpn^ do
    if name.a = ident.a4
    then
      if idEQident(name)
      then goto 1
      else
        if idLTident(name)
        then lpn := llink
        else lpn := rlink
    else
      if HOSTSEX = MALE
      then
        if name.a < ident.a4
        then lpn := llink
        else lpn := rlink
      else
        if name.a < ident.a4
        then lpn := llink
        else lpn := rlink;
1: searchlocal := lpn;
end; {searchlocal}

function CompTypes(fpt1,fpt2: pt): Boolean;
begin
CompTypes := TRUE;
if (fpt1 <> nil) and (fpt2 <> nil)
then
  if fpt1 <> fpt2
  then
    if fpt1^.form <> fpt2^.form
    then
      if fpt1^.form = SUBRANGE
      then CompTypes := CompTypes(fpt1^.rangeof,fpt2)
      else
        if fpt2^.form = SUBRANGE
        then CompTypes := CompTypes(fpt2^.rangeof,fpt1)
        else
          if ((fpt1^.form = STRINGS) and (fpt2^.form = SCONST)) or
             ((fpt1^.form = SCONST) and (fpt2^.form = STRINGS))
          then CompTypes := TRUE
          else CompTypes := FALSE
    else
      case fpt1^.form of
        SCALAR,
        ARRAYS,
        RECORDS,
        TAGFIELD,
        VARIANT,
        FILES:    CompTypes := FALSE;
        SUBRANGE: CompTypes := CompTypes(fpt1^.rangeof,fpt2^.rangeof);
        POINTERS: CompTypes := (fpt1 = nilptr) or (fpt2 = nilptr);
        SETS:     CompTypes := CompTypes(fpt1^.setof,fpt2^.setof);
        SCONST,
        STRINGS:  CompTypes := TRUE;
      end;
end; {CompTypes}

procedure getbounds(fpt: pt; var fmin,fmax: longint);
begin
fmin := 0; fmax := 0;
if fpt <> nil
then
  with fpt^ do
    if form = SCALAR
    then begin
      if scalkind = DECLARED
      then fmax := maxconst^.valueof.ivalu
      else
        if fpt = charptr
        then fmax := 255
        else
          if fpt = intptr
          then begin fmin := -32768; fmax := 32767; end;
      end
    else
      if form = SUBRANGE
      then begin fmin := min; fmax := max; end;
end; {getbounds}

function fullbytes(fpt: pt): longint;
  var lmin,lmax: longint;
begin {fullbytes}
if fpt <> nil
then 
  with fpt^ do
    if bits <> 0
    then fullbytes := bytes + 1
    else 
      if (bytes = 1) and (form <= SUBRANGE)
      then begin
        getbounds(fpt,lmin,lmax);
        if lmin >= 0 then fullbytes := 2 else fullbytes := 1;
        end
      else fullbytes := bytes
else fullbytes := 2;
end; {fullbytes}

function StringType(fpt: pt): Boolean;
begin
StringType := FALSE;
if fpt <> nil
then
  with fpt^ do
    if (form = STRINGS) or (form = SCONST)
    then StringType := TRUE
    else
      if form = ARRAYS
      then StringType := (arrayof = charptr) and PckdArr;
end; {StringType}

function newbinnode(fbinop: integer; fleftarg,frightarg: pn): pn;
  var lpn: pn;
begin
new(lpn,BINNODE);
with lpn^ do begin
  node := BINNODE; binop := fbinop; binsubop := 0;
  leftarg := fleftarg; rightarg := frightarg;
  end;
newbinnode := lpn;
end; {newbinnode}

function newunnode(funop: integer; funarg: pn): pn;
  var lpn: pn;
begin
new(lpn,UNNODE);
with lpn^ do begin
  node := UNNODE; unop := funop; unsubop := 0; unarg := funarg;
  end;
newunnode := lpn;
end; {newunnode}

procedure makescsize(var fattr: attr; tosize: integer);
  var lsize,op: integer; lpt: pt;
begin
lsize := fattr.asize;
if lsize <> tosize
then begin
  case tosize of
    1: begin
       lpt := sintptr;
       if lsize = 2 then op := 51 {INT21} else op := 53; {INT41}
       end;
    2: begin
       lpt := intptr;
       if lsize = 1 then op := 48 {INT12} else op := 52; {INT42}
       end;
    4: begin
       lpt := lintptr;
       if lsize = 1 then op := 50 {INT14} else op := 49; {INT24}
       end;
  end;
  if fattr.treeptr <> nil
  then
    if fattr.treeptr^.node = CSTNODE
    then fattr.treeptr^.csttype := lpt
    else fattr.treeptr := newunnode(op,fattr.treeptr);
  fattr.asize := tosize;
  end;
end; {makescsize}

procedure newarg(var fpn: pn; fop: integer);
  var lpn,lpn2: pn;
begin
lpn := newbinnode(fop,gattr.treeptr,nil);
if fpn = nil
then fpn := lpn
else begin
  lpn2 := fpn;
  while lpn2^.rightarg <> nil do
    lpn2 := lpn2^.rightarg;
  lpn2^.rightarg := lpn;
  end;
end; {newarg}

procedure leftparen;
begin
if token = LPARENSY then scan else error(31);
end; {leftparen}

procedure rightparen;
begin
if token = RPARENSY then scan else error(32);
end; {rightparen}

procedure comma;
begin
if token = COMMASY then scan else error(38);
end; {comma}

procedure enterid(fn: pn);
  var ln: pn;
begin
with fn^ do begin
  llink := nil; rlink := nil;
  end;
ln := display[top].nametree;
if ln = nil
then display[top].nametree := fn
else
  repeat
    with ln^ do
      if idEQid(name,fn^.name)
      then begin error(100); ln := llink; end
      else
        if idLTid(name,fn^.name)
        then
          if llink = nil
          then begin llink := fn; ln := nil; end
          else ln := llink
        else
          if rlink = nil
          then begin rlink := fn; ln := nil; end
          else ln := rlink;
  until ln = nil;
end; {enterid}

function searchall(fclass: nclassset): pn;
  label 1;
  var lpn: pn; ldisx: integer;
begin
for ldisx := top downto 0 do
  with display[ldisx] do
    begin
    lpn := nametree;
    while lpn <> nil do
      with lpn^ do
        if name.a = ident.a4
        then
          if idEQident(name)
          then
            if class in fclass
            then begin disx := ldisx; goto 1; end
            else begin
              if PrintErrors then error(101);
              lpn := llink;
              end
          else
            if idLTident(name)
            then lpn := llink
            else lpn := rlink
        else
          if HOSTSEX = MALE
          then
            if name.a < ident.a4
            then lpn := llink
            else lpn := rlink
          else
            if name.a < ident.a4
            then lpn := llink
            else lpn := rlink;
    end;

{ No such identifier of the correct class.  Return a dummy. }

disx := 0;
if PrintErrors
then begin
  error(102);
  if VARS in fclass
  then lpn := uvarptr
  else
    if TYPES in fclass
    then lpn := utypptr
    else
      if CONSTS in fclass
      then lpn := ucstptr
      else
        if FIELD in fclass
        then lpn := ufldptr
        else
          if PROC in fclass
          then lpn := uprcptr
          else lpn := ufctptr;
  end;

1: searchall := lpn;
end; {searchall}

procedure skip(errorno: integer; fsys: setofsys);
begin
if errorno <> 0 then error(errorno);
while not (token in fsys) do scan;
end; {skip}

procedure out(a: integer);
begin
if byteno > 511
then begin
    if blockwrite(icodefile,buff,1,blockno) <> 1 then error(407);
    blockno := blockno + 1;
    byteno := 0;
    end;
buff[byteno] := a;
byteno := byteno + 1;
end; {out}

procedure out2(a: integer);
  var c: array[0..1] of byte;
begin
moveleft(a,c,2);
if HOSTSEX = MALE
then begin out(c[0]); out(c[1]); end
else begin out(c[1]); out(c[0]); end;
end; {out2}

procedure out3(fval: longint);
  var c: array[0..3] of byte;
begin
moveleft(fval,c,4);
if HOSTSEX = MALE
then begin out(c[1]); out(c[2]); out(c[3]); end
else begin out(c[2]); out(c[1]); out(c[0]); end;
end; {out3}

procedure out4(a: longint);
  var c: array[0..3] of byte;
begin
moveleft(a,c,4);
if HOSTSEX = MALE
then begin out(c[0]); out(c[1]); out(c[2]); out(c[3]); end
else begin out(c[3]); out(c[2]); out(c[1]); out(c[0]); end;
end; {out4}

procedure outalfa(fname: alfa8);
  var i: integer;
begin
for i := 1 to 8 do out(ord(fname[i]));
end; {outalfa}

procedure outs(fname: idstring);
  var i: integer;
begin
for i := 0 to length(fname) do out(ord(fname[i]));
end; {outs}

procedure outsname(fname: identrec);
  var lname: idstring;
begin
makidstr(lname,fname); outs(lname);
end; {outsname}

procedure outname(fname: identrec);
  var lname: alfa8;
begin
makidalfa(lname,fname);
outalfa(lname);
end; {outname}

procedure flushlbuff;
  var i: integer;
begin
for i := 0 to lbyteno - 1 do out(lbuff[i]);
lbyteno := 0;
end; {flushlbuff}

procedure lout(fval: integer);
begin
if lbyteno < MAXLBUFF
then begin lbuff[lbyteno] := fval; lbyteno := lbyteno + 1; end
else begin error(350); lbyteno := 0; end;
end; {lout}

procedure lout2(fval: integer);
  var c: array[0..1] of byte;
begin
moveleft(fval,c,2);
if HOSTSEX = MALE
then begin lout(c[0]); lout(c[1]); end
else begin lout(c[1]); lout(c[0]); end;
end; {lout2}

procedure lout3(fval: longint);
  var c: array[0..3] of byte;
begin
moveleft(fval,c,4);
if HOSTSEX = MALE
then begin lout(c[1]); lout(c[2]); lout(c[3]); end
else begin lout(c[2]); lout(c[1]); lout(c[0]); end;
end; {lout3}

procedure lout4(fval: longint);
  var c: array[0..3] of byte;
begin
moveleft(fval,c,4);
if HOSTSEX = MALE
then begin lout(c[0]); lout(c[1]); lout(c[2]); lout(c[3]); end
else begin lout(c[3]); lout(c[2]); lout(c[1]); lout(c[0]); end;
end; {lout4}

procedure louts(fname: idstring  );
  var i: integer;
begin
for i := 0 to length(fname) do lout(ord(fname[i]));
end; {louts}

procedure patchicode(fblock,fbyte,fval: integer);
  var lbuff: array[0..511] of byte;
begin
while fbyte >= 512 do
      begin fblock := fblock + 1; fbyte := fbyte - 512; end;
if fblock = blockno
then buff[fbyte] := fval
else begin
     if blockread(icodefile,lbuff,1,fblock) <> 1 then error(409);
     lbuff[fbyte] := fval;
     if blockwrite(icodefile,lbuff,1,fblock) <> 1 then error(407);
     end;
end; {patchicode}

procedure setcase(var fname: idstring; flcbits: integer);
  var i: integer; lch : char; SomeSmall: Boolean;
begin
SomeSmall := flcbits <> 0;
for i := 1 to length(fname) do begin
    if odd(flcbits) or (SomeSmall and (i > 8))
    then begin
         lch := fname[i];
         if (lch >= 'A') and (lch <= 'Z')
         then fname[i] := chr(ord(lch) + 32);
         end;
    flcbits := flcbits div 2;
    end;
end; {setcase}


                                                                                                                                                   