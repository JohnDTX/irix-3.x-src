(*****************************************************************************)
(*                                                                           *)
(*                             File: CODE.2B.TEXT                            *)
(*                                                                           *)
(*           (C) Copyright 1980, 1985 Silicon Valley Software, Inc.          *)
(*                                                                           *)
(*                            All rights reserved.               15-Oct-85   *)
(*                                                                           *)
(*****************************************************************************)


procedure testd(d: pregrec; fsiz: sizes);
begin
if fsiz = B
then genr(_TST_B,d)
else if fsiz = W
     then genr(_TST_W,d)
     else genr(_TST_L,d);
end; {testd}

procedure addiareg(var r: pregrec; fval: longint);
  var lop: integer;
begin
load(r);
if abs(fval) <= 8
then begin
     if fval <> 0
     then begin
          if fval > 0
          then lop := 20616 { ADDQ.L #aoff,A }
          else lop := 20872;{ SUBQ.L #-aof,A }
          genr(lop + (abs(fval) and 7)*512,r);
          end;
     end
else if abs(fval) <= 32767
     then begin
          { ADDA.W #xxx,A } genr0(-12036,r); gen(fval);
          end
     else begin
          { ADDA.L #xxx,A } genr0(-11780,r); gen2(fval);
          end;
incrv(r^.regno,fval);
end; {addiareg}

procedure uparrow(var fcattr: cattr);
  var DoIt,DoCkind: Boolean; a: pregrec; loff: longint;
begin
with fcattr do begin
     DoIt := TRUE; DoCkind := TRUE;
     if ckind = EXPR
     then if exreg^.regno >= A0
          then begin DoIt := FALSE; a := exreg; end;
     if DoIt and AllowIndirect
     then begin
          case ckind of
            ADDR,
            VARB: begin
                  if ckind = ADDR
                  then begin a := adreg; loff := aoffset; end
                  else begin a := getbase(vlev); loff := voffset; end;
                  ckind := INDR; ireg := a; ioffset := loff; ooffset := 0;
                  ixreg := nil; DoCkind := FALSE; DoIt := FALSE;
                  end;
          end; {case}
          end;
     if DoIt then a := loada(fcattr);
     if DoCkind
     then begin ckind := ADDR; adreg := a; aoffset := 0; end;
     end;
end; {uparrow}

procedure incoffset(var fcattr: cattr; foffset: longint);
begin
with fcattr do
     case ckind of
          ADDR: aoffset := aoffset + foffset;
          INDX: inoffset := inoffset + foffset;
          VARB: voffset := voffset + foffset;
          FDAT: doffset := doffset + foffset;
          ABSL: aboffset := aboffset + foffset;
          INDR: ooffset := ooffset + foffset;
     end; {case}
end; {incoffset}

procedure makesetconst(var fcattr: cattr);
  var lpint: pintlist; lcattr: cattr;
begin
lpint := fcattr.cvalu.setvalu;
lcattr.ckind := CNST;
lcattr.cvalu.cstkind := SCALCNST;
if lpint <> nil
then begin
     lcattr.cvalu.ivalu[0] := lpint^.int;
     lcattr.cvalu.ivalu[1] := lcattr.cvalu.ivalu[0];
     lpint := lpint^.next;
     end
else lcattr.cvalu.ivalu[1] := 0;
if lpint <> nil
then lcattr.cvalu.ivalu[1] := lpint^.int
else lcattr.cvalu.ivalu[0] := 0;
fcattr := lcattr;
end; {makesetconst}

procedure pushaddress(fcattr: cattr);
  var DoIt: Boolean; llen: integer; loff: longint;
begin
DoIt := TRUE;
with fcattr do
     case ckind of
          VARB: if voffset = 0
                then begin pushbase(vlev); DoIt := FALSE; end;
          ADDR: if aoffset = 0
                then begin
                     load(adreg);
                     { MOVE.L adreg,-(SP) } genr(12040,adreg);
                     DoIt := FALSE;
                     freereg(adreg);
                     end;
          CNST: if (cvalu.cstkind = STRCNST) or (cvalu.cstkind = PAOCCNST)
                then if cvalu.len <= 125
                     then begin
                          llen := cvalu.len; DoIt := FALSE;
                          if cvalu.cstkind = STRCNST then llen := llen + 1;
                          if odd(llen) then llen := llen + 1;
                          { BSR.S } gen(24832 + llen);
                          if cvalu.cstkind = STRCNST
                          then genstrcnst(cvalu.strvalu,cvalu.len)
                          else genpaoccnst(cvalu.strvalu,cvalu.len);
                          end;
          INDR: if (ooffset = 0) and (ixreg = nil)
                then begin
                     loff := ioffset; adreg := ireg;
                     ckind := ADDR; aoffset := loff;
                     genea(_PUSH_L,fcattr,L);
                     DoIt := FALSE;
                     freereg(adreg);
                     end;
     end; {case}
if DoIt then genea(_PEA,fcattr,L);
end; {pushaddress}

procedure pushcaddress(fcattr: cattr; fsiz: sizes);
begin
{ PEA $+x } gen(18554); genlitcref(fcattr,fsiz,1);
end; {pushcaddress}

function loadaddress(fcattr: cattr): pregrec;
  var a,a2: pregrec; lop: integer; lv: regvalrec;
      delta: longint; lcattr: cattr;
begin
makevalid(fcattr);
with fcattr do begin
     lcattr := fcattr; lv.rvkind := UNKNRV; delta := 32767;
     case ckind of
       VARB: begin
             lv.rvkind := ADDRRV; lv.rvoffset := voffset;
             lv.rvlev := vlev; lv.rvsiz := L;
             end;
       FDAT: begin
             lv.rvkind := ADDRRV; lv.rvoffset := doffset;
             lv.rvlev := -flev; lv.rvsiz := L;
             end;
       ADDR: with reg[adreg^.regno] do
                  if v.rvkind = ADDRRV
                  then begin
                       delta := aoffset;
                       lv := reg[adreg^.regno].v;
                       lv.rvoffset := lv.rvoffset + aoffset;
                       if lv.rvlev > 0
                       then begin
                            lcattr.ckind := VARB; lcattr.vlev := lv.rvlev;
                            lcattr.voffset := lv.rvoffset;
                            end
                       else begin
                            lcattr.ckind := FDAT; lcattr.flev := -lv.rvlev;
                            lcattr.doffset := lv.rvoffset;
                            end;
                       end;
     end; {case}
     if FindAddr(lcattr,a2,delta)
     then begin
          if ckind = ADDR then freereg(adreg);
          ckind := ADDR; adreg := a2; aoffset := delta;
          if adreg^.regno <= D7
          then begin
               a := getreg(A0,AMAX);
               genrr(_MOVEA_L,a,adreg);
               freereg(adreg); adreg := a;
               if abs(delta) > 8
               then begin
                    { ADDA.W #x,A } genr0(-12036,a); gen(delta);
                    aoffset := 0;
                    end;
               reg[a^.regno].v := lv;
               end;
          end;
     (*
      * This function used to generate illegal addressing modes
      * for STCK type cattrkind's
      * thus the following if branch:
      *)
     if ckind = STCK then 
     begin
               a := getreg(A0,AMAX); lock(a);
               (*  addql #8,a7; movl a7,a *)
               gen($508f); gen($204f + ((a^.regno - ord(A0)) * 512));
               unlock(a); reg[a^.regno].v := lv;
     end else if (ckind = ADDR) and (aoffset <= 8) and (aoffset >= -8) and
        ((adreg^.count <= 1) or (aoffset = 0))
     then begin
          a := adreg; load(a);
          if aoffset <> 0
          then begin
               isolate(a); addiareg(a,aoffset);
               end;
          end
     else if (ckind = INDR) and (abs(ioffset) <= 32767) and
             (abs(ooffset) <= 32767) and (ixreg = nil)
          then begin
               delta := ioffset; adreg := ireg; ckind := ADDR;
               aoffset := delta; a := getreg(A0,AMAX); lock(a);
               genrea(_MOVEA_L,a,fcattr,L);
               addiareg(a,ooffset); unlock(a); reg[a^.regno].v := lv;
               end
          else begin
               a := getreg(A0,AMAX); lock(a);
               genrea(_LEA,a,fcattr,L);
               unlock(a); reg[a^.regno].v := lv;
               end;
     end;
loadaddress := a;
end; {loadaddress}

procedure pushint(fvalue: longint; fsiz: sizes);
  var op: integer; d: pregrec;
begin
if fvalue = 0
then begin
     if fsiz <= W
     then { CLR.W -(SP) } gen(16999)
     else if LastPop and (popbytes = 4)
          then begin ungen(2); { CLR.L (SP) } gen(17047); end
          else { CLR.L -(SP) } gen(17063);
     end
else if FindCnst(d,fvalue,fsiz)
     then begin
          if fsiz = B
          then op := 7936 { MOVE.B D,-(SP) }
          else if fsiz <= W
               then op := 16128 { MOVE.W D,-(SP) }
               else op := 12032;{ MOVE.L D,-(SP) }
          genr(op,d); freereg(d);
          end
     else if (fvalue >= -32768) and (fvalue <= 32767) and (fsiz = L)
          then begin
               { PEA xxx.w } gen(18552); gen(fvalue);
               end
          else begin
               if fsiz = B
               then { MOVE.B #xxx,-(SP) } gen(7996)
               else if fsiz <= W
                    then { MOVE.W #xxx,-(SP) } gen(16188)
                    else if LastPop and (popbytes = 4)
                         then begin
                              ungen(2);
                              { MOVE.L #xxx,(SP) } gen(11964);
                              end
                         else { MOVE.L #xxx,-(SP) } gen(12092);
               if (fsiz = L) or (fsiz = S)
               then gen2(fvalue)
               else gen(fvalue);
               end;
end; {pushint}

procedure loadccd(fd: pregrec; var fcattr: cattr);
  var d: pregrec; RegAvail: Boolean;
begin
RegAvail := FreeRegs(D0,D7);
if fd <> nil
then begin
     { Scc D } genr(20672 + ord(fcattr.cc)*256,fd);
     end
else if FreeRegs(D0,D7)
     then begin
          fd := getreg(D0,D7);
          { Scc D } genr(20672 + ord(fcattr.cc)*256,fd);
          end
     else begin
          { Scc -(SP) } gen(20711 + ord(fcattr.cc)*256);
          fd := getreg(D0,D7);
          { MOVE.B (SP)+,D } genr0(4127,fd);
          end;
fcattr.ckind := BOOL; fcattr.exreg := fd;
end; {loadccd}

procedure loadcc(var fcattr: cattr);
begin
loadccd(nil,fcattr);
end; {loadcc}

procedure loadfcc(var fcattr: cattr);
  var d: pregrec; RegAvail: Boolean;
begin
RegAvail := FreeRegs(D0,D7);
if RegAvail
then begin
     d := getreg(D0,D7);
     { FScc D } genr($F240,d); gen(ord(fcattr.fcc));
     end
else begin
     { FScc -(SP) } gen($F25F); gen(ord(fcattr.fcc));
     d := getreg(D0,D7);
     { MOVE.B (SP)+,D } genr0(4127,d);
     end;
fcattr.ckind := BOOL; fcattr.exreg := d;
end; {loadfcc}

procedure dupref(var fcattr: cattr; fsiz: sizes); forward;

function loaddd(fd: pregrec; var fcattr: cattr; fsiz: sizes): pregrec;
  var DoIt,CCValid: Boolean; d1: pregrec; lop: integer; lv: regvalrec;
      lcattr: cattr;
begin
DoIt := TRUE; CCValid := FALSE;
with fcattr do begin
     if (ckind = VARB) or (ckind = FDAT)
     then begin
          lv.rvsiz := fsiz; lv.rvkind := VALURV; lv.rvReadOnly := FALSE;
          if ckind = VARB
          then begin lv.rvlev := vlev; lv.rvoffset := voffset; end
          else begin lv.rvlev := -flev; lv.rvoffset := doffset; end;
          findvarb(fcattr,fsiz);
          end
     else lv.rvkind := UNKNRV;
     if ckind = EXPR
     then begin
          if exreg^.regno <= D7
          then begin d1 := exreg; DoIt := FALSE; end;
          end
     else if ckind = CNST
          then begin
               if cvalu.cstkind = SETCNST then makesetconst(fcattr);
               d1 := loadintd(fd,cvalu.lvalu,fsiz); DoIt := FALSE;
               end
          else begin
               if ckind = COND then loadccd(fd,fcattr);
               if ckind = FCND then loadfcc(fcattr);
               if ckind = BOOL
               then begin
                    d1 := exreg; load(d1);
                    if fd = nil
                    then isolate(d1)
                    else if fd^.regno <> d1^.regno
                         then isolate(d1);
                    erase(d1); DoIt := FALSE; CCValid := TRUE;
                    if fsiz = B
                    then { NEG.B D } genr(17408,d1)
                    else begin { ANDI.W #1,D } genr(576,d1); gen(1); end;
                    end
               else if ckind = BITZ
                    then begin
                         d1 := exreg; load(d1); isolate(d1); erase(d1);
                         DoIt := FALSE; CCValid := TRUE;
                         { ANDI.W #1,D } genr(576,d1); gen(1);
                         end;
               if not DoIt
               then if fsiz = L
                    then genr(_EXT_L,d1);
               end;
     case fsiz of
       B: lop := _MOVE_B;
       W: lop := _MOVE_W;
       L,
       S: lop := _MOVE_L;
     end; {case}
     if DoIt
     then begin
          if fd = nil then d1 := getreg(D0,D7) else d1 := fd; lock(d1);
          if ckind = FEXP
          then begin
               lcattr.ckind := EXPR; lcattr.exreg := d1;
               dupref(lcattr,fsiz); { Because genfear does freecattr() }
               genfear(_FSTORE,lcattr,exreg,fsiz);
               freecattr(fcattr);
               end
          else begin
               genrea(lop,d1,fcattr,fsiz);
               CCValid := TRUE; reg[d1^.regno].v := lv;
               end;
          unlock(d1);
          end;
     if fd <> nil
     then if fd^.regno <> d1^.regno
          then begin genrr(lop,fd,d1); freereg(d1); d1 := fd; end;
     ckind := EXPR; exreg := d1; loaddd := d1;
     if CCValid then ccodereg := d1^.regno;
     end;
end; {loaddd}

function loadd(var fcattr: cattr; fsiz: sizes): pregrec;
begin
loadd := loaddd(nil,fcattr,fsiz);
end; {loadd}

function loada{var fcattr: cattr): pregrec};
  var DoIt: Boolean; a: pregrec; lv: regvalrec; loff: longint;
begin
DoIt := TRUE;
with fcattr do begin
     lv.rvkind := UNKNRV;
     if ckind = ADDR
     then if (adreg^.regno = A5) or (adreg^.regno = A6)
          then begin
               loff := aoffset;
               if adreg^.regno = A5 then vlev := 1 else vlev := level;
               ckind := VARB; voffset := loff;
               end
          else if adreg^.InReg and (reg[adreg^.regno].v.rvkind = ADDRRV)
               then with reg[adreg^.regno].v do begin
                    loff := rvoffset + aoffset; freereg(adreg);
                    vlev := rvlev; ckind := VARB; voffset := loff;
                    end;
     if (ckind = VARB) or (ckind = FDAT)
     then begin
          lv.rvsiz := L; lv.rvkind := VALURV; lv.rvReadOnly := FALSE;
          if ckind = VARB
          then begin lv.rvlev := vlev; lv.rvoffset := voffset; end
          else begin lv.rvlev := -flev; lv.rvoffset := doffset; end;
          findvarb(fcattr,L);
          end;
     if ckind = EXPR
     then begin
          if exreg^.regno >= A0
          then begin a := exreg; DoIt := FALSE; end;
          end
     else if (ckind = COND) or (ckind = BOOL) or (ckind = BITZ)
          then a := loadd(fcattr,L);
     if DoIt
     then begin
          a := getreg(A0,AMAX); lock(a);
          genrea(_MOVEA_L,a,fcattr,L);
          unlock(a); reg[a^.regno].v := lv;
          end;
     ckind := EXPR; exreg := a; loada := a;
     end;
end; {loada}

function loadf(var fcattr: cattr; fsiz: sizes): pregrec;
  var f: pregrec;
begin
makevalid(fcattr);
with fcattr do
     if ckind = FEXP
     then loadf := exreg
     else begin
          f := getreg(F0,F7); genfear(_FLOAD,fcattr,f,fsiz);
          ckind := FEXP; exreg := f; loadf := f;
          end;
end; {loadf}

procedure dupref{var fcattr: cattr; fsiz: sizes};
  var d1: pregrec;
begin
with fcattr do
     case ckind of
          JEXP,
          FEXP,
          EXPR,
          BOOL,
          BITZ: if not reg[exreg^.regno].Perm
                then exreg^.count := exreg^.count + 1;
          ADDR: if not reg[adreg^.regno].Perm
                then adreg^.count := adreg^.count + 1;
          VARB,
          FDAT,
          CNST: ;
          INDX: begin
                if not reg[inxareg^.regno].Perm
                then inxareg^.count := inxareg^.count + 1;
                if not reg[inxrreg^.regno].Perm
                then inxrreg^.count := inxrreg^.count + 1;
                end;
          COND: begin
                loadcc(fcattr);
                exreg^.count := exreg^.count + 1;
                end;
          STCK: begin
                if fsiz = D
                then begin
                     gen(12079); gen(4); { MOVE.L 4(SP),-(SP) }
                     gen(12079); gen(4); { MOVE.L 4(SP),-(SP) }
                     end
                else begin
                     d1 := loadd(fcattr,fsiz);
                     d1^.count := d1^.count + 1;
                     end;
                end;
          INDR: begin
                if not reg[ireg^.regno].Perm
                then ireg^.count := ireg^.count + 1;
                if ixreg <> nil
                then if not reg[ixreg^.regno].Perm
                     then ixreg^.count := ixreg^.count + 1;
                end;
     end; {case}
end; {dupref}

procedure pushvalue(fcattr: cattr; fsiz: sizes);
  var DoIt: Boolean; op: integer; d1,a: pregrec; lcattr: cattr;
      lval: longint;
begin
makevalid(fcattr);
if fcattr.ckind <> STCK
then if M81_FLAG and (fcattr.ckind = FEXP)
     then begin
          if fsiz = L then fsiz := S;
          lcattr.ckind := STCK;
          genfear(_FSTORE,lcattr,fcattr.exreg,fsiz);
          freereg(fcattr.exreg);
          end
     else if JUN_FLAG and (fcattr.ckind = JEXP)
          then begin
               lcattr.ckind := ABSL;
               lval := $FFFF8000 + (fcattr.exreg^.regno and 15)*16;
               if fsiz = D
               then begin
                    lcattr.aboffset := lval + J_MOVELO;
                    genea(_PUSH_L,lcattr,L);
                    lcattr.aboffset := lval + J_MOVEHI;
                    end
               else lcattr.aboffset := lval + J_MOVEF;
               genea(_PUSH_L,lcattr,L);
               freereg(fcattr.exreg);
               end
     else if fsiz < D
          then begin
               DoIt := TRUE;
               with fcattr do
                    if ckind = CNST
                    then begin
                         if cvalu.cstkind = SCALCNST
                         then begin
                              pushint(cvalu.lvalu,fsiz); DoIt := FALSE;
                              end;
                         end
                    else if (ckind = BOOL) or (ckind = COND) or
                            (ckind = BITZ) or (ckind = FCND)
                         then d1 := loadd(fcattr,fsiz);
               if DoIt
               then begin
                    if fsiz = B
                    then op := _PUSH_B
                    else if fsiz <= W
                         then op := _PUSH_W
                         else begin
                              if LastPop and (popbytes = 4)
                              then begin
                                   ungen(2);
                                   op := 11904;{ MOVE.L ?,(SP) }
                                   end
                              else op := _PUSH_L;
                              end;
                    genea(op,fcattr,fsiz);
                    end;
               end
          else begin { fsiz = D }
               if fcattr.ckind = CNST
               then begin
                    pushint(fcattr.cvalu.lvalu2,L);
                    pushint(fcattr.cvalu.lvalu,L);
                    end
               else begin
                    if (fcattr.ckind = ADDR) and (fcattr.aoffset = 0)
                    then begin
                         { MOVE.L 4(A),-(SP) } genr(12072,fcattr.adreg);
                                               gen(4);
                         { MOVE.L (A),-(SP) } genr(12048,fcattr.adreg);
                         freereg(fcattr.adreg);
                         end
                    else begin
                         incoffset(fcattr,8); a := loadaddress(fcattr);
                         isolate(a);
                         { MOVE.L -(A),-(SP) } genr(12064,a);
                         { MOVE.L -(A),-(SP) } genr(12064,a);
                         freereg(a); incrv(a^.regno,-8);
                         end;
                    end;
               end;
end; {pushvalue}


