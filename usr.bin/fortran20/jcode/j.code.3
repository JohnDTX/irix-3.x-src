(*****************************************************************************)
(*                                                                           *)
(*                            File: J.CODE.3.TEXT                            *)
(*                                                                           *)
(*           (C) Copyright 1980, 1985 Silicon Valley Software, Inc.          *)
(*                                                                           *)
(*                            All rights reserved.               10-Sep-85   *)
(*                                                                           *)
(*****************************************************************************)


procedure store(from_cattr,to_cattr: cattr; fsiz: sizes);
  var op,instsize,destmode,destreg,i,commonlev,fdatalev: integer;
      ClearFlag,FDataFlag,DoIt,CCValid,Small,ValInDReg,CCtoDreg: Boolean;
      dd,a,a2,base: pregrec; inst: array[1..10] of integer;
      ftndlev,ftndrefloc,valregno: integer; valregstuff: regvalrec;
      lcattr: cattr;
  
  procedure lgen(k: integer);
  begin
  instsize := instsize + 1; inst[instsize] := k;
  end; {lgen}
  
  procedure lgen2(k: longint);
    var c: array[0..1] of integer;
  begin
  moveleft(k,c,4);
  lgen(c[0]); lgen(c[1])
  end; {lgen2}
  
  procedure stindex(fcattr: cattr);
    var op: integer;
  begin
  with fcattr do begin
       op := inxrreg^.regno*4096 + ord(insz)*512;
       if LongIndex then op := op + 2048;
       if (inoffset <= 127) and (inoffset >= -128)
       then lgen(op + (inoffset and $ff))
       else begin
            op := op + 256;
            if (inoffset <= 32767) and (inoffset >= -32768)
            then begin lgen(op + 32); lgen(inoffset); end
            else begin lgen(op + 48); lgen2(inoffset); end;
            end;
       end;
  end; {stindex}
  
  procedure stindr(fcattr: cattr);
    var op: integer;
  begin
  with fcattr do begin
       if ixreg <> nil
       then begin
            op := $0115 + ixreg^.regno*4096 + ord(iinsz)*512;
            if LongIIndex then op := op + 2048;
            end
       else op := $0151;
       if ioffset <> 0
       then if (ioffset <= 32767) and (ioffset >= -32768)
            then op := op + $10
            else op := op + $20;
       if ooffset <> 0
       then if (ooffset <= 32767) and (ooffset >= -32768)
            then op := op + 1
            else op := op + 2;
       lgen(op);
       if ioffset <> 0
       then if (ioffset <= 32767) and (ioffset >= -32768)
            then lgen(ioffset)
            else lgen2(ioffset);
       if ooffset <> 0
       then if (ooffset <= 32767) and (ooffset >= -32768)
            then lgen(ooffset)
            else lgen2(ooffset);
       end;
  end; {stindr}
  
begin {store}
if M81_FLAG
then begin
     if from_cattr.ckind = FEXP
     then begin
          genfear(_FSTORE,to_cattr,from_cattr.exreg,fsiz);
          freereg(from_cattr.exreg); exit(store);
          end;
     end;
if JUN_FLAG
then begin
     if from_cattr.ckind = JEXP
     then begin
          makevalid(from_cattr);
          if fsiz = D
          then begin
               a := loadaddress(to_cattr); isolate(a);
               i := $8000 + (from_cattr.exreg^.regno and 15)*16;
               { MOVE.L J_HI,(A)+ } genr0($20F8,a); gen(J_MOVEHI + i);
               { MOVE.L J_LO,(A)+ } genr0($20F8,a); gen(J_MOVELO + i);
               incrv(a^.regno,8); freereg(a); freereg(from_cattr.exreg);
               exit(store);
               end
          else begin
               freereg(from_cattr.exreg);
               from_cattr.aboffset := $FFFF8000 + J_MOVEF +
                          (from_cattr.exreg^.regno and 15)*16;
               from_cattr.ckind := ABSL;
               end;
          end;
     end;
DoIt := TRUE;
case fsiz of
  B:   op := _MOVE_B;
  W:   op := _MOVE_W;
  L,S: op := _MOVE_L;
  D:   begin
       DoIt := FALSE;
       if LastPushQ and (from_cattr.ckind = STCK)
       then begin
            ungen(4); dd := getreg(D0,D0); a := getreg(D1,D1);
            { MOVEM.L D0/D1,xxx }
            geneai(18624,to_cattr,W,3);
            freereg(dd); freereg(a);
            end
       else begin
            a := loadaddress(to_cattr); isolate(a);
            case from_cattr.ckind of
                 ADDR,
                 VARB,
                 FDAT,
                 INDX,
                 INDR: begin
                       a2 := loadaddress(from_cattr); isolate(a2);
                       lock(a2); load(a);
                       { MOVE.L (A2)+,(A)+ } genrr(8408,a,a2);
                       { MOVE.L (A2)+,(A)+ } genrr(8408,a,a2);
                       unlock(a2); freereg(a2); incrv(a2^.regno,8);
                       end;
                 CNST: begin
                       if gcattr.cvalu.lvalu = 0
                       then { CLR.L (A)+ } genr(17048,a)
                       else begin
                            { MOVE.L #xxx,(A)+ } genr0(8444,a);
                                                 gen2(gcattr.cvalu.lvalu);
                            end;
                       if gcattr.cvalu.lvalu2 = 0
                       then { CLR.L (A)+ } genr(17048,a)
                       else begin
                            { MOVE.L #xxx,(A)+ } genr0(8444,a);
                                                 gen2(gcattr.cvalu.lvalu2);
                            end;
                       end;
                 STCK: begin
                       { MOVE.L (SP)+,(A)+ } genr0(8415,a);
                       { MOVE.L (SP)+,(A)+ } genr0(8415,a);
                       end;
            end; {case}
            freereg(a); incrv(a^.regno,8);
            end;
       end;
end; {case}
instsize := 0; ClearFlag := FALSE; FDataFlag := FALSE; CCtoDreg := FALSE;
CCValid := FALSE; ftndrefloc := 0; ValInDReg := FALSE;

if DoIt
then begin
     makevalid(to_cattr); chkindr(to_cattr); lockcattr(to_cattr);
     makevalid(from_cattr); chkindr(from_cattr);
     with from_cattr do begin
          if (ckind = VARB) or (ckind = FDAT) then findvarb(from_cattr,fsiz);
          case ckind of
               EXPR: begin
                     ValInDReg := TRUE; valregstuff.rvkind := UNKNRV;
                     valregno := exreg^.regno;
                     op := op + valregno;
                     end;
               ADDR: if aoffset = 0
                     then op := op + 8 + adreg^.regno
                     else if (aoffset <= 32767) and (aoffset >= -32768)
                          then begin
                               op := op + 32 + adreg^.regno; instsize := 1;
                               inst[1] := aoffset;
                               end
                          else begin
                               op := op + 40 + adreg^.regno;
                               lgen($0170); lgen2(aoffset);
                               end;
               CNST: if cvalu.lvalu = 0
                     then begin
                          ClearFlag := TRUE;
                          if IsAReg(to_cattr)
                          then { SUBA.L A,A }
                               op := -32320 + to_cattr.exreg^.regno*512
                          else begin
                               case fsiz of
                                 B:   op := 16896; { CLR.B }
                                 W:   op := 16960; { CLR.W }
                                 L,S: op := 17024; { CLR.L }
                                 D:   { Error };
                               end; {case}
                               end
                          end
                     else begin
                          Small := (cvalu.lvalu <= 127) and
                                        (cvalu.lvalu >= -128);
                          if Small and IsDReg(to_cattr)
                          then begin
                               op := _MOVEQ + (cvalu.lvalu and 255);
                               with reg[to_cattr.exreg^.regno].v do begin
                                    rvkind := CNSTRV; rvsiz := L;
                                    ival := cvalu.lvalu;
                                    end;
                               end
                          else if FindCnst(dd,cvalu.lvalu,fsiz)
                               then begin
                                    ckind := EXPR; exreg := dd;
                                    op := op + dd^.regno;
                                    end
                               else if Small and ((fsiz = L) or
                                                  FreeRegs(D0,D2))
                                    then begin
                                         dd := loadint(cvalu.lvalu,L);
                                         ckind := EXPR; exreg := dd;
                                         op := op + dd^.regno;
                                         end
                                    else begin
                                         op := op + 60;
                                         if fsiz <= W
                                         then begin
                                              inst[1] := cvalu.ivalu[1];
                                              instsize := 1;
                                              end
                                         else begin
                                              inst[1] := cvalu.ivalu[0];
                                              inst[2] := cvalu.ivalu[1];
                                              instsize := 2;
                                              end;
                                         end;
                          end;
               INDX: begin
                     op := op + 40 + inxareg^.regno;
                     stindex(from_cattr);
                     end;
               VARB: begin
                     base := getbase(vlev);
                     if voffset = 0
                     then op := op + 8 + base^.regno
                     else if (voffset <= 32767) and (voffset >= -32768)
                          then begin
                               op := op + 32 + base^.regno; instsize := 1;
                               inst[1] := voffset;
                               end
                          else begin
                               op := op + 40 + base^.regno;
                               lgen($0170); lgen2(voffset);
                               end;
                     ckind := ADDR; adreg := base; { So will free base }
                     end;
               FDAT: begin
                     op := op + 57; lgen2(doffset);
                     FDataFlag := TRUE; fdatalev := flev;
                     end;
               ABSL: begin
                     if (aboffset >= -32768) and (aboffset <= 32767)
                     then begin
                          op := op + 56; lgen(aboffset);
                          end
                     else begin
                          op := op + 57; lgen2(aboffset);
                          end;
                     end;
               FCND,
               BOOL,
               COND,
               BITZ: begin
                     if (to_cattr.ckind = EXPR) and (ckind = COND) and
                        (to_cattr.exreg^.regno <= D7)
                     then CCtoDreg := TRUE
                     else begin
                          dd := loadd(from_cattr,fsiz); op := op + dd^.regno;
                          ckind := EXPR; exreg := dd; { So will free dd }
                          end;
                     end;
               STCK: op := op + 31;
               INDR: begin
                     op := op + 40 + ireg^.regno;
                     stindr(from_cattr);
                     end;
          end; {case}
          end;
     unlockcattr(to_cattr); lockcattr(from_cattr);
     with to_cattr do
          case ckind of
               EXPR: begin
                     destreg := exreg^.regno; erase(exreg);
                     if destreg <= 7
                     then begin destmode := 0; CCValid := TRUE; end
                     else begin destreg := destreg - 8; destmode := 1; end;
                     end;
               ADDR: begin
                     if aoffset = 0
                     then destmode := 2
                     else if (aoffset <= 32767) and (aoffset >= -32768)
                          then begin
                               destmode := 5; instsize := instsize + 1;
                               inst[instsize] := aoffset;
                               end
                          else begin
                               destmode := 6; lgen($0170); lgen2(aoffset);
                               end;
                     destreg := adreg^.regno - 8; freereg(adreg);
                     end;
               INDX: begin
                     destmode := 6; destreg := inxareg^.regno - 8;
                     stindex(to_cattr);
                     freereg(inxrreg); freereg(inxareg);
                     end;
               VARB: begin
                     with valregstuff do begin
                          rvsiz := fsiz; rvkind := VALURV;
                          rvlev := vlev; rvoffset := voffset;
                          rvReadOnly := FALSE;
                          end;
                     base := getbase(vlev); freereg(base);
                     destreg := base^.regno - 8;
                     if voffset = 0
                     then destmode := 2
                     else if (voffset <= 32767) and (voffset >= -32768)
                          then begin
                               destmode := 5; instsize := instsize + 1;
                               inst[instsize] := voffset;
                               end
                          else begin
                               destmode := 6; lgen($0170); lgen2(voffset);
                               end;
                     end;
               FDAT: begin
                     with valregstuff do begin
                          rvsiz := fsiz; rvkind := VALURV;
                          rvlev := -flev; rvoffset := doffset;
                          rvReadOnly := FALSE;
                          end;
                     ftndlev := flev; ftndrefloc := instsize + 1;
                     destmode := 7; destreg := 1; lgen2(doffset);
                     end;
               ABSL: begin
                     destmode := 7;
                     if (aboffset >= -32768) and (aboffset <= 32767)
                     then begin destreg := 0; lgen(aboffset); end
                     else begin destreg := 1; lgen2(aboffset); end;
                     end;
               STCK: begin destmode := 4; destreg := 7; end;
               INDR: begin
                     destmode := 6; destreg := ireg^.regno - 8;
                     stindr(to_cattr); freereg(ireg);
                     if ixreg <> nil then freereg(ixreg);
                     end;
          end; {case}
     unlockcattr(from_cattr);
     if CCtoDreg
     then begin
          { SCC xx,D } genr(20672 + ord(from_cattr.cc)*256,to_cattr.exreg);
          { NEG.B D  } genr(17408,to_cattr.exreg);
          end
     else if ClearFlag
          then gen(op + destmode*8 + destreg)
          else gen(op + destmode*64 + destreg*512);
     if FDataFlag then ftndref(fdatalev);
     for i := 1 to instsize do begin
         if ftndrefloc = i then ftndref(ftndlev);
         gen(inst[i]);
         end;
     freecattr(from_cattr);
     if CCValid then ccodereg := destreg;
     forgetcattr(to_cattr,fsiz);
     if ValInDReg and (valregstuff.rvkind <> UNKNRV) and
        (reg[valregno].v.rvkind = UNKNRV)
     then reg[valregno].v := valregstuff;
     end; {if DoIt}
end; {store}

function GenCompare(acattr,bcattr: cattr; fsiz: sizes): Boolean;
  var ImmFlag,FreeFlag,DoIt,ARegFlag: Boolean; lcattr: cattr;
      d: pregrec; immvalue: longint; lop: integer;
begin
GenCompare := FALSE; ImmFlag := FALSE; FreeFlag := FALSE;
ARegFlag := FALSE; DoIt := TRUE;
makevalid(acattr);
if acattr.ckind = COND then d := loadd(acattr,fsiz);
lockcattr(acattr); makevalid(bcattr);
if bcattr.ckind = COND then d := loadd(bcattr,fsiz);
if (bcattr.ckind = BOOL) or (bcattr.ckind = BITZ)
then d := loadd(bcattr,fsiz);
unlockcattr(acattr); lockcattr(bcattr);
if (acattr.ckind = BOOL) or (acattr.ckind = BITZ)
then d := loadd(acattr,fsiz);
unlockcattr(bcattr);
if acattr.ckind = CNST
then begin
     lcattr := bcattr; GenCompare := TRUE;
     if lcattr.ckind = CNST then d := loadd(lcattr,fsiz);
     if acattr.cvalu.lvalu = 0
     then if IsAReg(lcattr)
          then begin
               d := getreg(D0,D7); lock(d); FreeFlag := TRUE;
               { MOVE.L } lop := 8064 + d^.regno*512;
               end
          else begin
               lop := 18944; { TST }
               if IsDReg(lcattr)
               then if lcattr.exreg^.InReg
                    then if ccodereg = lcattr.exreg^.regno
                         then DoIt := FALSE;
               end
     else if (fsiz = L) and (acattr.cvalu.lvalu >= -128) and
             (acattr.cvalu.lvalu <= 127)
          then begin
               d := loadint(acattr.cvalu.lvalu,L);
               acattr.ckind := EXPR; acattr.exreg := d;
               lop := -20480 + d^.regno*512; lock(d); FreeFlag := TRUE;
               GenCompare := FALSE;
               end
          else if IsAReg(lcattr)
               then begin
                    { CMPA } lop := -24256 + lcattr.exreg^.regno*512;
                    freereg(lcattr.exreg);
                    lcattr := acattr; GenCompare := TRUE;
                    end
               else begin
                    ImmFlag := TRUE; lop := 3072; { CMPI }
                    immvalue := acattr.cvalu.lvalu;
                    end
     end
else if bcattr.ckind = CNST
     then begin
          lcattr := acattr;
          if bcattr.cvalu.lvalu = 0
          then if IsAReg(lcattr)
               then begin
                    d := getreg(D0,D7); lock(d); FreeFlag := TRUE;
                    { MOVE.L } lop := 8064 + d^.regno*512;
                    end
               else begin
                    lop := 18944; { TST }
                    if IsDReg(lcattr)
                    then if lcattr.exreg^.InReg
                         then if ccodereg = lcattr.exreg^.regno
                              then DoIt := FALSE;
                    end
          else if (fsiz = L) and (bcattr.cvalu.lvalu >= -128) and
                  (bcattr.cvalu.lvalu <= 127)
               then begin
                    d := loadint(bcattr.cvalu.lvalu,L);
                    bcattr.ckind := EXPR; bcattr.exreg := d;
                    lop := -20480 + d^.regno*512; lock(d); FreeFlag := TRUE;
                    GenCompare := TRUE;
                    end
               else if IsAReg(lcattr)
                    then begin
                         { CMPA } lop := -24256 + lcattr.exreg^.regno*512;
                         freereg(lcattr.exreg);
                         lcattr := bcattr; GenCompare := FALSE;
                         end
                    else begin
                         ImmFlag := TRUE; lop := 3072; { CMPI }
                         immvalue := bcattr.cvalu.lvalu;
                         end
          end
     else begin
          if (bcattr.ckind = STCK) and (acattr.ckind = STCK)
          then d := loadd(bcattr,fsiz);
          if bcattr.ckind = EXPR
          then begin
               lcattr := acattr; GenCompare := TRUE;
               if (bcattr.exreg^.regno >= A0) and (fsiz = L)
               then begin d := loada(bcattr); ARegFlag := TRUE; end
               else d := loadd(bcattr,fsiz);
               end
          else begin
               if (acattr.ckind = EXPR) and
                  (acattr.exreg^.regno >= A0) and (fsiz = L)
               then begin d := loada(acattr); ARegFlag := TRUE; end
               else d := loadd(acattr,fsiz);
               lcattr := bcattr;
               end;
          if ARegFlag then lop := _CMPA_L else lop := _CMP_B;
          lop := lop + (d^.regno and 7)*512; lock(d); FreeFlag := TRUE;
          end;
if not ARegFlag
then if fsiz = W
     then lop := lop + 64
     else if fsiz = L
          then lop := lop + 128;
if DoIt
then if ImmFlag
     then geneai(lop,lcattr,fsiz,immvalue)
     else genea(lop,lcattr,fsiz)
else freereg(lcattr.exreg);
if FreeFlag then begin unlock(d); freereg(d); end;
end; {GenCompare}

procedure gencall; forward;

procedure expression(fop: integer); forward;

procedure numexpr(fop: integer; fsiz: sizes);
  var d: pregrec;
begin
expression(fop);
if gcattr.ckind in [BOOL,COND,BITZ,FCND]
then d := loadd(gcattr,fsiz);
end; {numexpr}

procedure exppushaddr(fop: integer);
begin
if fop = 12 {UPARROW}
then begin expression(nextbyte); pushvalue(gcattr,L); end
else begin expression(fop); pushaddress(gcattr); end;
end; {exppushaddr}

procedure pushset(fcattr: cattr; fbytes: integer; LenFlag: Boolean);
  var a,d: pregrec; lop,lbytes,i: integer; lpint: pintlist;
      arr: array[1..9] of integer; lsiz: sizes;
begin
if (fcattr.ckind = CNST) and (fbytes <= 16)
then begin
     if odd(fbytes) then fbytes := fbytes + 1;
     lbytes := fbytes; i := lbytes div 2; arr[i + 1] := fbytes;
     lpint := fcattr.cvalu.setvalu;
     while lbytes > 0 do begin
           if lpint = nil
           then arr[i] := 0
           else begin arr[i] := lpint^.int; lpint := lpint^.next; end;
           i := i - 1; lbytes := lbytes - 2;
           end;
     if LenFlag then fbytes := fbytes + 2;
     i := 1;
     while fbytes >= 4 do begin
           pushint(arr[i + 1]*65536 + (ord4(arr[i]) and $ffff),L);
           i := i + 2; fbytes := fbytes - 4;
           end;
     if fbytes > 0 then pushint(arr[i],W);
     end
else begin
     if fbytes <= 4
     then begin
          if fbytes = 1
          then begin
               d := getreg(D0,D7); lock(d);
               genr(_CLR_W,d); genrea(_MOVE_B,d,fcattr,B);
               fcattr.ckind := EXPR; fcattr.exreg := d; unlock(d);
               end;
          if fbytes <= 2
          then begin lop := _PUSH_W; lsiz := W; end
          else begin lop := _PUSH_L; lsiz := L; end;
          genea(lop,fcattr,lsiz);
          end
     else begin
          if fcattr.ckind <> CNST
          then incoffset(fcattr,fbytes);
          a := loadaddress(fcattr); isolate(a);
          if fbytes <= 16
          then begin
               lbytes := fbytes;
               while lbytes >= 4 do begin
                     { MOVE.L -(A),-(SP) } genr(12064,a);
                     lbytes := lbytes - 4;
                     end;
               if lbytes > 0
               then { MOVE.W -(A),-(SP) } genr(16160,a);
               end
          else begin
               d := loadint(fbytes div 4 - 1,W); isolate(d);
               { MOVE.L -(A),-(SP) } genr(12064,a);
               { DBRA D,$-4 } genr(20936,d); gen(-4);
               if odd(fbytes div 2)
               then { MOVE.W -(A),-(SP) } genr(16160,a);
               freereg(d); erase(d);
               end;
          freereg(a); erase(a);
          end;
     if odd(fbytes) then fbytes := fbytes + 1;
     if LenFlag then pushint(fbytes,W);
     end;
end; {pushset}

procedure setexpression(fop: integer; var FOnStack: Boolean);
  var setsize,i,lop,lopsize,finalsize,initsize: integer; d: pregrec;
      lint,newint: pintlist; lcattr: cattr; LeftStack,RightStack: Boolean;
      initwords,finalwords: integer; lsiz: sizes;
begin
FOnStack := FALSE;
case fop of
      1, { GLOBAL }
      2, { LOCAL }
      3, { INTER }
      4, { COMMON }
      5, { FCOMMON }
     12, { UPARROW }
     13, { FILE^ }
     15, { FIELD }
     16, { INDX1 }
     17, { INDX2 }
     18, { INDX4 }
     19, { INDX8 }
     20, { INDXBIG }
     21, { INDXPCK }
     22, { ADDRESS }
     43: { WITHREC }
         expression(fop);
     30: { SETCNST }
         begin
         setsize := nextbyte; lint := nil;
         for i := 1 to setsize do begin
             if odd(i)
             then begin
                  new(newint); newint^.int := nextbyte;
                  newint^.next := lint; lint := newint;
                  end
             else lint^.int := lint^.int + nextbyte*256;
             end;
         with gcattr do begin
              ckind := CNST; cvalu.cstkind := SETCNST;
              cvalu.setbytes := setsize; cvalu.setvalu := lint;
              cvalu.FrontAddress := FALSE;
              end;
         end;
     31: { NULLSET }
         with gcattr do begin
              ckind := CNST; cvalu.cstkind := SETCNST;
              new(lint); lint^.next := nil; lint^.int := 0;
              cvalu.setbytes := 1; cvalu.setvalu := lint;
              cvalu.FrontAddress := FALSE;
              end;
    160, { UNION }
    161, { DIFF }
    162: { INTER }
         begin
         setsize := nextbyte; setexpression(nextbyte,LeftStack);
         lcattr := gcattr; setexpression(nextbyte,RightStack);
         FOnStack := LeftStack or RightStack or (setsize > 4);
         if FOnStack
         then begin
              if not LeftStack then pushset(lcattr,setsize,TRUE);
              if not RightStack then pushset(gcattr,setsize,TRUE);
              case fop of
                   160: genjsra('%_UNION ');
                   161: if RightStack and not LeftStack
                        then genjsra('%_RDIFF ')
                        else genjsra('%_DIFF  ');
                   162: genjsra('%_INTER ');
              end; {case}
              end
         else begin
              make2valid(gcattr,lcattr);
              if fop = 160
              then lop := -32767 - 1 { OR }
              else lop := -16384; { AND }
              if setsize = 1
              then begin lopsize := 0; lsiz := B; end
              else if setsize = 2
                   then begin lopsize := 64; lsiz := W; end
                   else begin lopsize := 128; lsiz := L; end;
              lop := lop + lopsize;
              if fop = 161
              then begin
                   lockcattr(lcattr); d := loadd(gcattr,lsiz);
                   isolate(d); { NOT d } genr(17920 + lopsize,d);
                   erase(d);
                   unlockcattr(lcattr);
                   end;
              if lcattr.ckind = EXPR
              then begin d := lcattr.exreg; lcattr := gcattr; end
              else begin
                   lockcattr(lcattr); d := loadd(gcattr,lsiz);
                   unlockcattr(lcattr);
                   end;
              if lcattr.ckind = CNST
              then begin
                   lint := lcattr.cvalu.setvalu;
                   lcattr.cvalu.cstkind := SCALCNST;
                   if lint <> nil
                   then begin
                        lcattr.cvalu.ivalu[1] := lint^.int;
                        lcattr.cvalu.ivalu[0] := lcattr.cvalu.ivalu[1];
                        lint := lint^.next;
                        end
                   else lcattr.cvalu.ivalu[1] := 0;
                   if lint <> nil
                   then lcattr.cvalu.ivalu[1] := lint^.int
                   else lcattr.cvalu.ivalu[0] := 0;
                   end;
              lock(d); genrea(lop,d,lcattr,lsiz);
              unlock(d); gcattr.ckind := EXPR; gcattr.exreg := d;
              erase(d);
              end;
         end;
    168: { SINGSET }
         begin
         setsize := nextbyte; expression(nextbyte); pushvalue(gcattr,W);
         genjsra('%_SING  '); FOnStack := TRUE;
         end;
    169: { SETRANGE }
         begin
         setsize := nextbyte; expression(nextbyte); pushvalue(gcattr,W);
         expression(nextbyte); pushvalue(gcattr,W);
         genjsra('%_RANGE '); FOnStack := TRUE;
         end;
    170: { ADJSET }
         begin
         { n --> 0    Push set }
         { 0 --> n    Adjust set that is already on the stack }
         { n --> m    Adjust set that may be on the stack }
         finalsize := nextbyte; initsize := nextbyte;
         if finalsize = 1 then finalsize := 2;
         setexpression(nextbyte,FOnStack);
         if (gcattr.ckind = CNST) and not FOnStack and (finalsize <> 0)
         then begin
              initwords := (initsize + 1) div 2;
              finalwords := (finalsize + 1) div 2;
              if initwords > finalwords
              then for i := finalwords + 1 to initwords do
                       gcattr.cvalu.setvalu := gcattr.cvalu.setvalu^.next
              else for i := initwords + 1 to finalwords do
                       begin
                       new(lint); lint^.int := 0;
                       lint^.next := gcattr.cvalu.setvalu;
                       gcattr.cvalu.setvalu := lint;
                       end;
              gcattr.cvalu.setbytes := finalsize;
              end
         else begin
              if not FOnStack then pushset(gcattr,initsize,TRUE);
              if (initsize <> finalsize) and (finalsize <> 0)
              then begin
                   pushint(finalsize,W); genjsra('%_ADJSZ ');
                   end;
              FOnStack := TRUE;
              end;
        end;
end; {case}
end; {setexpression}

procedure fchexpression(fop,routine: integer); forward;

procedure pushfchaddr(fop: integer);
  var SubStrFlag,LCFlag,UpArrowFlag: Boolean; a: pregrec; lsize,lop: integer;
      lcattr: cattr;
begin
if fop = 217 {FCHTEMP}
then begin
     lsize := nextword;
     gettemp(lcattr,lsize);
     pushaddress(lcattr);
     { CLR.L -(SP) } gen(17063);
     fchexpression(nextbyte,0);
     end
else if fop = 213 {CHFRSLT}
     then begin
          lsize := nextword; { Cannot be size 0 }
          gettemp(lcattr,lsize);
          pushaddress(lcattr);
          pushint(lsize,L);
          fop := nextbyte;
          (****) if fop <> 190 {PARMLST}
          (****) then writeln('CHFRSLT w/o PARMLST');
          gencall;
          end
     else if fop = 190 {PARMLST}
          then gencall
          else begin
               SubStrFlag := fop = 222 {FSUBSTR};
               if SubStrFlag then fop := nextbyte;
               LCFlag := FALSE; UpArrowFlag := FALSE;
               if fop = 223 {MKFCH}
               then begin
                    lsize := nextword;
                    if lsize = 0
                    then begin { Must be a reference parameter }
                         lop := nextbyte;
                         (****) if lop <> 12 {UPARROW}
                         (****) then writeln('*** Not a ref param!!! ***');
                         end
                    else if lsize < 0
                         then begin
                              expression(nextbyte); lcattr := gcattr;
                              LCFlag := TRUE;
                              end;
                    lop := nextbyte;
                    if lop = 12 {UPARR}
                    then begin UpArrowFlag := TRUE; lop := nextbyte; end;
                    expression(lop);
                    end
               else begin { PAOC Constant }
                    (****) if fop <> 29 {PAOCNST}
                    (****) then writeln('pushfchaddr w/o PAOCNST');
                    expression(fop);
                    lsize := gcattr.cvalu.len;
                    end;
               if LCFlag then make2valid(gcattr,lcattr) else makevalid(gcattr);
               if lsize = 0
               then begin
                    if UpArrowFlag then uparrow(gcattr);
                    a := loadaddress(gcattr);
                    { MOVE.L (A),-(SP) }  genr(12048,a);
                    { MOVE.L -(A),-(SP) } genr(12064,a);
                    freereg(a); incrv(a^.regno,-4);
                    end
               else begin
                    if LCFlag then lockcattr(lcattr);
                    if UpArrowFlag
                    then pushvalue(gcattr,L)
                    else pushaddress(gcattr);
                    if LCFlag then unlockcattr(lcattr);
                    if lsize > 0
                    then pushint(lsize,L)
                    else pushvalue(lcattr,L);
                    end;
               if SubStrFlag
               then begin
                    expression(nextbyte); pushvalue(gcattr,W);
                    lop := nextbyte;
                    if lop = 23 {NIL}
                    then genjsra('%FC_SUB1')
                    else begin
                         expression(lop);
                         pushvalue(gcattr,W);
                         genjsra('%FC_SUB ');
                         end;
                    end;
               end;
end; {pushfchaddr}

procedure fchexpression{*fop,routine: integer*};
  var lroutine: integer;
begin
while fop = 221 {FCONCAT} do begin
      if routine = 2 {FIN}
      then lroutine := 1 {ASS}
      else lroutine := routine;
      fchexpression(nextbyte,lroutine);
      fop := nextbyte;
      end;
pushfchaddr(fop);
saveallregs;
if routine = 0
then genjsra('%FC_TMP ')
else if routine = 1
     then genjsra('%FC_ASS ')
     else genjsra('%FC_FIN ');
clearscr;
end; {fchexpression}

procedure ignorexp(fsize: integer);
begin
if gcattr.ckind = STCK
then { ADDQ.W #fsize,SP } gen(20559 + (fsize mod 8)*512);
freecattr(gcattr);
end; {ignorexp}
           
procedure asspckfld(fop: integer; CFlag: Boolean);
  var numbits,rightbit,datamask,i,lvalue,leftbit: integer;
      lcattr: cattr; Done: Boolean; d: pregrec; lsiz: sizes;
begin
{FOP = 62 = UPCKFLD or 63 = SPCKFLD}
numbits := nextbyte; rightbit := nextbyte; datamask := 0;
expression(nextbyte); lcattr := gcattr; expression(nextbyte);
if (numbits and $40) = 0
then begin lsiz := W; incoffset(lcattr,-2); { adjust for 4 byte int } end
else lsiz := L;
numbits := numbits and $1f;
leftbit := 32 - (numbits + rightbit);
for i := 1 to numbits do datamask := datamask*2 + 1;
make2valid(gcattr,lcattr); Done := FALSE;
if (gcattr.ckind = CNST) and (lsiz = W)
then begin
     lvalue := gcattr.cvalu.ivalu[1] and datamask;
     for i := 1 to rightbit do begin
         lvalue := lvalue + lvalue;
         datamask := datamask + datamask;
         end;
     Done := TRUE; incoffset(lcattr,2);
     if lvalue = 0
     then { ANDI.W #~dm,ea }
          geneai(576,lcattr,W,-datamask-1)
     else if lvalue = datamask
          then { ORI.W #lval,ea }
               geneai(64,lcattr,W,lvalue)
          else begin Done := FALSE; incoffset(lcattr,-2); end;
     end;
if not Done
then begin
     lockcattr(lcattr); d := loadd(gcattr,lsiz);
     lock(d); unlockcattr(lcattr);
     if leftbit >= 16
     then begin leftbit := leftbit - 16; incoffset(lcattr,2); end;
     geneai(_BFINS,lcattr,W,d^.regno*4096+leftbit*64+numbits);
     unlock(d);
     if CFlag
     then begin gcattr.ckind := EXPR; gcattr.exreg := d; end
     else freereg(d);
     end;
end; {asspckfld}


                                                                                                                                                                                                                     